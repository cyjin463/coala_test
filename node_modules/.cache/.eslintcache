[{"/Users/cyj/sun/src/index.js":"1","/Users/cyj/sun/src/App.js":"2","/Users/cyj/sun/src/reportWebVitals.js":"3","/Users/cyj/sun/src/redux/configureStore.js":"4","/Users/cyj/sun/src/page/Create.js":"5","/Users/cyj/sun/src/page/Login.js":"6","/Users/cyj/sun/src/page/Edituser.js":"7","/Users/cyj/sun/src/page/Detail.js":"8","/Users/cyj/sun/src/page/Password.js":"9","/Users/cyj/sun/src/page/SearchResult.js":"10","/Users/cyj/sun/src/page/Main.js":"11","/Users/cyj/sun/src/page/Ranking.js":"12","/Users/cyj/sun/src/components/Header.js":"13","/Users/cyj/sun/src/components/Footer.js":"14","/Users/cyj/sun/src/components/_Test.js":"15","/Users/cyj/sun/src/redux/modules/post.js":"16","/Users/cyj/sun/src/redux/modules/serch.js":"17","/Users/cyj/sun/src/redux/modules/user.js":"18","/Users/cyj/sun/src/redux/modules/answer.js":"19","/Users/cyj/sun/src/redux/modules/comment.js":"20","/Users/cyj/sun/src/redux/modules/ranking.js":"21","/Users/cyj/sun/src/components/Signup.js":"22","/Users/cyj/sun/src/components/AnswerList.js":"23","/Users/cyj/sun/src/components/Answer.js":"24","/Users/cyj/sun/src/components/Comment.js":"25","/Users/cyj/sun/src/components/ImgUpload.js":"26","/Users/cyj/sun/src/components/TableList.js":"27","/Users/cyj/sun/src/components/NoticeBoard.js":"28","/Users/cyj/sun/src/components/RoundTab.js":"29","/Users/cyj/sun/src/components/RankingOther.js":"30","/Users/cyj/sun/src/components/Chat.js":"31","/Users/cyj/sun/src/components/RankingTop.js":"32","/Users/cyj/sun/src/components/Postchat.js":"33","/Users/cyj/sun/src/components/TabMenu.js":"34","/Users/cyj/sun/src/components/Category.js":"35","/Users/cyj/sun/src/elements/Profile.js":"36","/Users/cyj/sun/src/elements/NoticeList.js":"37","/Users/cyj/sun/src/components/Serch.js":"38","/Users/cyj/sun/src/elements/category.js":"39","/Users/cyj/sun/src/elements/testApiUrl.js":"40","/Users/cyj/sun/src/elements/Banner.js":"41","/Users/cyj/sun/src/shared/token.js":"42","/Users/cyj/sun/src/shared/api.js":"43","/Users/cyj/sun/src/elements/RoundBtn.js":"44","/Users/cyj/sun/src/page/Alarms.js":"45","/Users/cyj/sun/src/redux/modules/mypage.js":"46","/Users/cyj/sun/src/shared/InfinityScroll.js":"47","/Users/cyj/sun/src/components/Loader.js":"48","/Users/cyj/sun/src/page/Scrap.js":"49"},{"size":755,"mtime":1647817933000,"results":"50","hashOfConfig":"51"},{"size":1464,"mtime":1648183755018,"results":"52","hashOfConfig":"51"},{"size":362,"mtime":1646972011000,"results":"53","hashOfConfig":"51"},{"size":1547,"mtime":1647968952711,"results":"54","hashOfConfig":"51"},{"size":9434,"mtime":1648186608148,"results":"55","hashOfConfig":"51"},{"size":5405,"mtime":1648186608148,"results":"56","hashOfConfig":"51"},{"size":10897,"mtime":1648183729567,"results":"57","hashOfConfig":"51"},{"size":6526,"mtime":1648186608148,"results":"58","hashOfConfig":"51"},{"size":5159,"mtime":1648183729568,"results":"59","hashOfConfig":"51"},{"size":3013,"mtime":1648183755021,"results":"60","hashOfConfig":"51"},{"size":661,"mtime":1648186608148,"results":"61","hashOfConfig":"51"},{"size":1749,"mtime":1648186608149,"results":"62","hashOfConfig":"51"},{"size":5299,"mtime":1648248100200,"results":"63","hashOfConfig":"51"},{"size":1040,"mtime":1648248100200,"results":"64","hashOfConfig":"51"},{"size":9744,"mtime":1647517298000,"results":"65","hashOfConfig":"51"},{"size":9581,"mtime":1648183755021,"results":"66","hashOfConfig":"51"},{"size":4295,"mtime":1648183755022,"results":"67","hashOfConfig":"51"},{"size":9782,"mtime":1648183729568,"results":"68","hashOfConfig":"51"},{"size":9251,"mtime":1647620750000,"results":"69","hashOfConfig":"51"},{"size":2759,"mtime":1648183729568,"results":"70","hashOfConfig":"51"},{"size":3038,"mtime":1647485806000,"results":"71","hashOfConfig":"51"},{"size":9299,"mtime":1648183729567,"results":"72","hashOfConfig":"51"},{"size":13883,"mtime":1648248083029,"results":"73","hashOfConfig":"51"},{"size":3164,"mtime":1647620750000,"results":"74","hashOfConfig":"51"},{"size":1471,"mtime":1648186588597,"results":"75","hashOfConfig":"51"},{"size":2445,"mtime":1647968952709,"results":"76","hashOfConfig":"51"},{"size":2866,"mtime":1648183755020,"results":"77","hashOfConfig":"51"},{"size":3102,"mtime":1648106520256,"results":"78","hashOfConfig":"51"},{"size":1144,"mtime":1647968952710,"results":"79","hashOfConfig":"51"},{"size":2778,"mtime":1648184702012,"results":"80","hashOfConfig":"51"},{"size":8224,"mtime":1648186588596,"results":"81","hashOfConfig":"51"},{"size":2346,"mtime":1648184702012,"results":"82","hashOfConfig":"51"},{"size":8762,"mtime":1648186588597,"results":"83","hashOfConfig":"51"},{"size":884,"mtime":1647337383000,"results":"84","hashOfConfig":"51"},{"size":2412,"mtime":1648248100200,"results":"85","hashOfConfig":"51"},{"size":659,"mtime":1647938899000,"results":"86","hashOfConfig":"51"},{"size":2770,"mtime":1648103549466,"results":"87","hashOfConfig":"51"},{"size":2179,"mtime":1648183755019,"results":"88","hashOfConfig":"51"},{"size":711,"mtime":1648106500274,"results":"89","hashOfConfig":"51"},{"size":413,"mtime":1648099579002,"results":"90","hashOfConfig":"51"},{"size":1707,"mtime":1648106520256,"results":"91","hashOfConfig":"51"},{"size":641,"mtime":1648186588597,"results":"92","hashOfConfig":"51"},{"size":3370,"mtime":1648183755022,"results":"93","hashOfConfig":"51"},{"size":699,"mtime":1647522054000,"results":"94","hashOfConfig":"51"},{"size":621,"mtime":1648186608147,"results":"95","hashOfConfig":"51"},{"size":1775,"mtime":1648183755021,"results":"96","hashOfConfig":"51"},{"size":1135,"mtime":1647968952712,"results":"97","hashOfConfig":"51"},{"size":424,"mtime":1648034306266,"results":"98","hashOfConfig":"51"},{"size":1815,"mtime":1648186608149,"results":"99","hashOfConfig":"51"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},"oxloec",{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158"},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162"},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166"},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"103"},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174"},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181"},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185"},{"filePath":"186","messages":"187","suppressedMessages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"103"},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","suppressedMessages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"103"},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200"},{"filePath":"201","messages":"202","suppressedMessages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204"},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"103"},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"212"},{"filePath":"213","messages":"214","suppressedMessages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216"},{"filePath":"217","messages":"218","suppressedMessages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"220"},{"filePath":"221","messages":"222","suppressedMessages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224"},{"filePath":"225","messages":"226","suppressedMessages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"103"},{"filePath":"229","messages":"230","suppressedMessages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232"},{"filePath":"233","messages":"234","suppressedMessages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"236","messages":"237","suppressedMessages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"239","messages":"240","suppressedMessages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242"},{"filePath":"243","messages":"244","suppressedMessages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"246","messages":"247","suppressedMessages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","suppressedMessages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"252","messages":"253","suppressedMessages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"255"},{"filePath":"256","messages":"257","suppressedMessages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"259","messages":"260","suppressedMessages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"262","messages":"263","suppressedMessages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265"},{"filePath":"266","messages":"267","suppressedMessages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269"},{"filePath":"270","messages":"271","suppressedMessages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"103"},{"filePath":"274","messages":"275","suppressedMessages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"277","messages":"278","suppressedMessages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280"},"/Users/cyj/sun/src/index.js",[],[],["281","282"],"/Users/cyj/sun/src/App.js",["283"],[],"import React from \"react\";\nimport { Route, useLocation } from \"react-router-dom\";\n\nimport Main from \"./page/Main\";\nimport Login from \"./page/Login\";\nimport Create from \"./page/Create\";\nimport Detail from \"./page/Detail\";\nimport _Test from \"./components/_Test\";\nimport Ranking from \"./page/Ranking\";\nimport SearchResult from \"./page/SearchResult\";\nimport Header from \"./components/Header\";\nimport Edituser from \"./page/Edituser\";\nimport Password from \"./page/Password\";\nimport Footer from \"./components/Footer\";\nimport Alarms from \"./page/Alarms\";\nimport Scrap from \"./page/Scrap\";\n\nfunction App() {\n  const location = useLocation();\n  return (\n    <div className='App'>\n      {location.pathname === \"/login\" ? null : <Header />}\n      <Route path='/' exact component={Main} />\n      <Route path='/create' exact component={Create} />\n      <Route path='/edit/:pid' exact component={Create} />\n      <Route path='/ranking' exact component={Ranking} />\n      <Route path='/login' exact component={Login} />\n      <Route path='/detail/:pid' exact component={Detail} />\n      <Route path='/search/:keyword' exact component={SearchResult} />\n      <Route path='/useredit' exact component={Edituser} />\n      <Route path='/passedit' exact component={Password} />\n      <Route path='/alarms' exact component={Alarms} />\n      <Route path='/scrap' exact component={Scrap} />\n      {location.pathname === \"/login\" ? null : <Footer />}\n    </div>\n  );\n}\n\nexport default App;\n","/Users/cyj/sun/src/reportWebVitals.js",[],[],"/Users/cyj/sun/src/redux/configureStore.js",[],[],"/Users/cyj/sun/src/page/Create.js",["284","285","286","287","288","289","290","291","292","293","294","295","296"],[],"import React from \"react\";\nimport styled from \"styled-components\";\nimport Swal from \"sweetalert2\";\nimport { useLocation, useParams } from \"react-router\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ReactComponent as ArrowSvg } from \"../svg/arrow_down_b.svg\";\nimport { ReactComponent as ArrowActiveSvg } from \"../svg/arrow_up_b.svg\";\nimport { actionCreators as postActions } from \"../redux/modules/post\";\nimport { history } from \"../redux/configureStore\";\nimport { category } from \"../elements/category\";\nimport ImgUpload from \"../components/ImgUpload\";\nimport Chat from \"../components/Chat\";\nimport Banner from \"../elements/Banner\";\n\nconst Create = () => {\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const params = useParams().pid;\n\n  const isCreate = location.pathname === \"/create\";\n  const img_list = useSelector((state) => state.post?.preview);\n  const post_one = useSelector((state) => state.post.one_list);\n  const [addPost, setAddPost] = React.useState(!isCreate ? post_one : []);\n  const [isSelect, setIsSelect] = React.useState(false);\n  const [oneCategory, setOneCategory] = React.useState(\"\");\n  const token = sessionStorage.getItem(\"token\");\n  const reg = /[\\{\\}\\[\\]\\/?.,;:|\\)*~`!^\\-_+<>@\\#$%&\\\\\\=\\(\\'\\\"]/gi;\n\n  React.useEffect(() => {\n    window.scrollTo(0, 0);\n    if (!isCreate) {\n      dispatch(postActions.getOnePostDB(params));\n      setAddPost(post_one);\n      setOneCategory(addPost.category);\n    }\n  }, []);\n\n  const onChange = (e) => {\n    const id = e.target.id;\n    const content = e.target.value;\n\n    setAddPost({ ...addPost, [id]: content });\n  };\n\n  const submit = () => {\n    if (!addPost.title || !addPost.comment) {\n      Swal.fire(\"\", \"내용을 모두 입력해주세요 :)\", \"error\");\n      return;\n    } else if (!oneCategory) {\n      Swal.fire(\"\", \"카테고리를 선택해 주세요 :)\", \"error\");\n      return;\n    } else if (addPost.tags) {\n      const tags = addPost.tags?.split(\"#\").splice(1);\n\n      let text_tag = tags\n        .map((v) => (reg.test(v) ? v.replace(reg, \"\") : v))\n        .filter((v) => v !== \"\");\n\n      dispatch(\n        postActions.addPostDB({\n          ...addPost,\n          tags: text_tag,\n          category: oneCategory,\n        })\n      );\n    } else {\n      dispatch(\n        postActions.addPostDB({\n          ...addPost,\n          category: oneCategory,\n        })\n      );\n    }\n  };\n\n  const revise = () => {\n    if (typeof addPost.tags === \"string\") {\n      const tags = addPost.tags?.split(\"#\").splice(1);\n\n      let text_tag = tags\n        .map((v) => (reg.test(v) ? v.replace(reg, \"\") : v))\n        .filter((v) => v !== \"\");\n\n      dispatch(\n        postActions.editPostDB({\n          ...addPost,\n          pid: params,\n          tag: text_tag,\n          category: oneCategory,\n        })\n      );\n    } else {\n      dispatch(\n        postActions.editPostDB({\n          ...addPost,\n          pid: params,\n          category: oneCategory,\n        })\n      );\n    }\n  };\n\n  if (!isCreate) {\n    return (\n      <CreateWrap>\n        <PostWrap>\n          <h1>수정 페이지</h1>\n\n          <h2>카테고리 선택</h2>\n          <CategoryDiv length={category.length}>\n            <span\n              className={oneCategory === \"\" ? \"\" : \"choose\"}\n              onClick={() => {\n                setIsSelect(!isSelect);\n              }}>\n              {oneCategory\n                ? oneCategory\n                : addPost.category\n                ? addPost.category\n                : \" 카테고리를 선택\"}\n\n              {isSelect ? <ArrowActiveSvg /> : <ArrowSvg />}\n            </span>\n            <ul className={isSelect ? \"\" : \"close\"}>\n              {category.map((v, idx) => (\n                <li\n                  key={idx}\n                  onClick={() => {\n                    setOneCategory(v.name);\n                    setIsSelect(false);\n                  }}>\n                  {v.name}\n                </li>\n              ))}\n            </ul>\n          </CategoryDiv>\n\n          <h2>제목</h2>\n          <input\n            id='postTitle'\n            onChange={onChange}\n            type='text'\n            value={addPost.postTitle}\n          />\n\n          <h2>내용</h2>\n          <TextareaImg>\n            <textarea\n              id='postComment'\n              onChange={onChange}\n              type='text'\n              value={addPost.postComment}></textarea>\n            <ImgUpload isEdit={true} editImg={addPost.postImg} />\n          </TextareaImg>\n\n          <h2>\n            태그입력<em></em>\n          </h2>\n          <input\n            id='tags'\n            onChange={onChange}\n            type='text'\n            placeholder={`#${addPost.tag?.join(\" #\")}`}\n          />\n          <button onClick={revise}>수정 click</button>\n          <button\n            onClick={() => {\n              history.replace(`/detail/${params}`);\n            }}>\n            취소\n          </button>\n        </PostWrap>\n        <div className='right'>\n          <div>\n            <Chat />\n            <Banner />\n          </div>\n        </div>\n      </CreateWrap>\n    );\n  }\n\n  return (\n    <CreateWrap>\n      <PostWrap>\n        <h1>글쓰기 페이지</h1>\n\n        <h2>카테고리 선택</h2>\n        <CategoryDiv length={category.length}>\n          <span\n            className={oneCategory === \"\" ? \"\" : \"choose\"}\n            onClick={() => {\n              setIsSelect(!isSelect);\n            }}>\n            {oneCategory === \"\" ? \" 카테고리를 선택\" : oneCategory}\n            {isSelect ? <ArrowActiveSvg /> : <ArrowSvg />}\n          </span>\n          <ul className={isSelect ? \"\" : \"close\"}>\n            {category.map((v, idx) => (\n              <li\n                key={idx}\n                onClick={() => {\n                  setOneCategory(v.name);\n                  setIsSelect(false);\n                }}>\n                {v.name}\n              </li>\n            ))}\n          </ul>\n        </CategoryDiv>\n        <h2>제목</h2>\n        <input id='title' onChange={onChange} type='text' placeholder='제목' />\n\n        <h2>내용</h2>\n        <TextareaImg>\n          <textarea\n            id='comment'\n            onChange={onChange}\n            type='text'\n            placeholder='내용'></textarea>\n          <ImgUpload />\n        </TextareaImg>\n\n        <h2>\n          태그입력<em>(선택사항)</em>\n        </h2>\n        <input\n          id='tags'\n          onChange={onChange}\n          type='text'\n          placeholder='특수문자는 # 만 입력 가능합니다.'\n        />\n        <button onClick={submit}>올리기</button>\n      </PostWrap>\n\n      <div className='right'>\n        <div>\n          <Chat />\n          <Banner />\n        </div>\n      </div>\n    </CreateWrap>\n  );\n};\nconst CreateWrap = styled.div`\n  display: flex;\n  width: 1440px;\n  margin: 0 auto;\n  margin-bottom: 24px;\n  gap: 24px;\n\n  .right {\n    flex: none;\n    width: 342px;\n\n    > div {\n      position: sticky;\n      top: 0;\n    }\n  }\n`;\n\nconst PostWrap = styled.div`\n  width: 100%;\n  padding: 50px 26px;\n  border-radius: 8px;\n  box-shadow: 0 4px 20px 0 rgba(228, 226, 242, 0.45);\n\n  h1 {\n    display: none;\n  }\n\n  h2 {\n    font-size: 16px;\n    margin-bottom: 8px;\n\n    em {\n      font-weight: normal;\n      font-style: normal;\n      margin-left: 4px;\n      color: #797979;\n      font-size: 12px;\n    }\n  }\n\n  label > input#file-upload-button {\n    display: none;\n  }\n\n  input {\n    display: block;\n    width: 100%;\n    height: 52px;\n    padding: 16px;\n    margin-bottom: 24px;\n    border: none;\n    border-radius: 8px;\n    background-color: #fbfbfd;\n\n    &::placeholder {\n      color: #797979;\n    }\n  }\n\n  button {\n    display: block;\n    width: 200px;\n    line-height: 50px;\n    margin-top: 48px;\n    margin-left: auto;\n    background-color: #7966ff;\n    border-radius: 8px;\n    font-size: 16px;\n    color: #fff;\n  }\n`;\n\nconst TextareaImg = styled.div`\n  margin-bottom: 40px;\n  border-radius: 8px;\n  background-color: #fbfbfd;\n\n  textarea {\n    display: block;\n    width: 100%;\n    padding: 16px;\n    min-height: 400px;\n    border: none;\n    background-color: transparent;\n    resize: none;\n\n    &::placeholder {\n      color: #797979;\n    }\n  }\n\n  .img_load {\n    border-radius: 8px;\n    border-bottom: none;\n    background-color: #f4f4fb;\n  }\n`;\n\nconst CategoryDiv = styled.div`\n  display: inline-block;\n  width: 300px;\n  margin-bottom: 24px;\n  position: relative;\n\n  > span {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    width: 100%;\n    height: 52px;\n    line-height: 52px;\n    padding: 0 16px;\n    line-height: 46px;\n    color: #797979;\n    border-radius: 8px;\n    background-color: #fbfbfd;\n\n    &.choose {\n      color: #7966ff;\n    }\n  }\n\n  ul {\n    position: absolute;\n    top: calc(46px + 8px);\n    left: 0;\n    width: 100%;\n    height: ${(props) => `calc(${props.length} * 46px + 20px)`};\n    overflow: hidden;\n    margin: 0;\n    transition: height 0.5s ease-out;\n    background-color: #fff;\n    border-radius: 0 0 8px 8px;\n    box-shadow: 0 4px 14px 0 rgba(65, 0, 131, 0.06);\n\n    &.close {\n      height: 0;\n      padding: 0;\n    }\n  }\n\n  li {\n    margin: 0 10px;\n    text-align: center;\n    line-height: 46px;\n    cursor: pointer;\n\n    &:nth-child(1) {\n      margin-top: 10px;\n    }\n\n    &:last-child {\n      margin-bottom: 10px;\n    }\n    &:hover {\n      background-color: #7966ff;\n      color: #fff;\n    }\n  }\n`;\n\nexport default Create;\n","/Users/cyj/sun/src/page/Login.js",["297","298"],[],"import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { ReactComponent as LoginSvg } from \"../svg/login_logo.svg\";\nimport LoginBackSvg from \"../svg/login_background.svg\";\nimport Signup from \"../components/Signup\";\nimport { actionCreators as userActions } from \"../redux/modules/user\";\nimport { history } from \"../redux/configureStore\";\nimport styled from \"styled-components\";\nimport Swal from \"sweetalert2\";\n\nconst Login = () => {\n  const dispatch = useDispatch();\n  const [check, setCheck] = React.useState(\"login\");\n  const [username, setUsername] = React.useState(\"\");\n  const [password, setPassword] = React.useState(\"\");\n\n  const onKeyPress = (e) => {\n    if (e.key == \"Enter\") {\n      if (username !== \"\" && password !== \"\") {\n        login();\n      }\n    }\n  };\n\n  const login = () => {\n    if (username === \"\" || password === \"\") {\n      Swal.fire(\"\", \"모두 입력해주세요.\", \"error\");\n      return;\n    }\n    dispatch(userActions.loginDB(username, password));\n  };\n  return (\n    <Container1>\n      <img src={LoginBackSvg}></img>\n      <Container2>\n        <div className={check === \"login\" ? \"box\" : \"signup\"}>\n          <div className='logo'>\n            <LoginSvg\n              onClick={() => {\n                history.push(\"/\");\n              }}\n            />\n          </div>\n          <div className='switch'>\n            <label className={check === \"login\" ? \"login\" : \"\"}>\n              <input\n                onChange={(e) => {\n                  setCheck(e.target.value);\n                }}\n                type='radio'\n                name='select'\n                value='login'\n              />\n              로그인\n            </label>\n            <label className={check === \"signup\" ? \"signup\" : \"\"}>\n              <input\n                onChange={(e) => {\n                  setCheck(e.target.value);\n                }}\n                type='radio'\n                name='select'\n                value='signup'\n              />\n              회원가입\n            </label>\n          </div>\n          {check === \"login\" ? (\n            <div className='inputbox'>\n              <div>\n                <span className='inputSpan'>아이디</span>\n                <input\n                  type='text'\n                  placeholder='ID입력'\n                  onChange={(e) => {\n                    setUsername(e.target.value);\n                  }}\n                  onKeyPress={onKeyPress}\n                />\n              </div>\n              <div>\n                <span className='inputSpan'>비밀번호</span>\n                <input\n                  type='password'\n                  placeholder='Password입력'\n                  onChange={(e) => {\n                    setPassword(e.target.value);\n                  }}\n                  onKeyPress={onKeyPress}\n                />\n              </div>\n              <button onClick={login}>로그인</button>\n            </div>\n          ) : (\n            <div className='signup'>\n              <Signup />\n            </div>\n          )}\n        </div>\n      </Container2>\n    </Container1>\n  );\n};\n\nconst Container1 = styled.div`\n  width: 100%;\n  width: 1440px;\n  height: 100vh;\n  min-height: 930px;\n  display: flex;\n  position: relative;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n`;\n\nconst Container2 = styled.div`\n  width: 1440px;\n  height: 930px;\n  margin: 0 auto;\n  display: flex;\n  position: absolute;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 200px;\n  div.box {\n    width: 500px;\n    height: 472px;\n    margin: auto;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    &.signup {\n      width: 500px;\n      height: 472px;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n    }\n  }\n  div.logo {\n    width: 500px;\n    height: 196px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    svg {\n      cursor: pointer;\n    }\n  }\n  div.switch {\n    width: 500px;\n    display: flex;\n    justify-content: start;\n    align-items: center;\n    margin-bottom: 30px;\n    > label {\n      font-size: 18px;\n      margin-right: 41px;\n      cursor: pointer;\n\n      &.login {\n        color: white;\n      }\n      &.signup {\n        color: white;\n      }\n      > input {\n        display: none;\n      }\n    }\n  }\n  div.inputbox {\n    width: 500px;\n    height: 232px;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    > div {\n      width: 100%;\n      height: 72px;\n      display: flex;\n      flex-direction: row;\n      position: relative;\n      justify-content: end;\n      align-items: center;\n      background-color: #f9f8ff;\n      border-radius: 0.5rem;\n      padding: 15px;\n      > span.inputSpan {\n        width: 57px;\n        color: #7966ff;\n        font-size: 16px;\n        font-weight: 800;\n        vertical-align: middle;\n      }\n    }\n  }\n  div.signup {\n    width: 500px;\n    height: 471px;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n  }\n  input {\n    width: 85%;\n    height: 72px;\n    border: 0px solid black;\n    background-color: #f9f8ff;\n    font-size: 16px;\n    outline: none;\n    border-radius: 0.5rem;\n  }\n  button {\n    width: 100%;\n    height: 72px;\n    background-color: #5e45f2;\n    color: white;\n    border-radius: 0.5rem;\n  }\n`;\nexport default Login;\n","/Users/cyj/sun/src/page/Edituser.js",["299","300","301"],[],"import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport Profile from \"../elements/Profile\";\nimport { actionCreators as userActions } from \"../redux/modules/user\";\nimport img_down from \"../svg/arrow_down_b.svg\";\nimport camera from \"../svg/camera_fill.svg\";\nimport Swal from \"sweetalert2\";\n// import { ReactComponent as img_down } from \"../svg/arrow_down_b.svg\";\n// import { ReactComponent as camera } from \"../svg/camera_fill.svg\";\n\nconst userNickname = sessionStorage.getItem(\"nickname\");\nconst userCareer = sessionStorage.getItem(\"career\");\nconst userImage = sessionStorage.getItem(\"userImage\");\nconst userURL = sessionStorage.getItem(\"url\");\nconst uid = sessionStorage.getItem(\"uid\");\n\nconst Edituser = (props) => {\n  const dispatch = useDispatch();\n  const [isCheckNickname, setIsCheckNickname] = React.useState(false);\n  const [nickname, setNickname] = useState(userNickname);\n  const [userImg, setUserImg] = useState(userImage);\n  const [blogUrl, setBlogUrl] = useState(userURL);\n  const [career, setCareer] = useState(userCareer);\n  const [careerSelect, setCareerSelect] = useState(userCareer);\n  const [nicknameRuleCheck, setNicknameRuleCheck] = React.useState(true);\n  const imgInput = React.useRef();\n  const options = [\n    { value: \"1년차 이내\", name: \"1년차 이내\" },\n    { value: \"1~2년차\", name: \"1~2년차\" },\n    { value: \"3~4년차\", name: \"3~4년차\" },\n    { value: \"5년차 이상\", name: \"5년차 이상\" },\n  ];\n\n  const nicknameRule = (e) => {\n    const rule = /^[ㄱ-ㅎ|ㅏ-ㅣ|가-힣A-Za-z0-9]{2,8}$/;\n    const nick = e.target.value;\n    setNickname(nick);\n    rule.test(nick) ? setNicknameRuleCheck(true) : setNicknameRuleCheck(false);\n  };\n\n  const Check = () => {\n    if (userNickname === nickname) {\n      setIsCheckNickname(true);\n      Swal.fire(\"\", \"사용 가능합니다.\", \"success\");\n    } else if (nicknameRuleCheck !== true) {\n      Swal.fire(\"\", \"닉네임 형식이 맞지 않습니다.\", \"error\");\n    }\n    check();\n  };\n\n  const check = () => {\n    if (nickname === \"\") {\n      Swal.fire(\"\", \"닉네임이 공란입니다.\", \"error\");\n      return;\n    }\n    dispatch(userActions.checkNicknameDB(nickname, false));\n    setIsCheckNickname(true);\n  };\n\n  const url = (e) => {\n    setBlogUrl(e.target.value);\n  };\n\n  ////////////////////////////////////////사진 변경\n  const editImg = () => {\n    const img = imgInput.current.files[0];\n    console.log(img);\n    const imgReader = new FileReader();\n    imgReader.readAsDataURL(img);\n    imgReader.onloadend = () => {\n      setUserImg(imgReader.result);\n    };\n    dispatch(userActions.imgPost(img));\n  };\n  //////////////////////////////////////////SAVE\n\n  const Save = () => {\n    if (\n      userNickname === nickname &&\n      userCareer === career &&\n      userImage === userImg &&\n      userURL === blogUrl\n    ) {\n      Swal.fire(\"\", \"변경 사항이 없습니다.\", \"error\");\n      return;\n    } else if (nickname === \"\") {\n      Swal.fire(\"\", \"닉네임이 공란입니다.\", \"error\");\n      return;\n    } else if (isCheckNickname === false) {\n      if (userNickname === nickname) {\n        setIsCheckNickname(true);\n      } else {\n        Swal.fire(\"\", \"중복체크를 해주세요\", \"error\");\n      }\n      return;\n    } else if (userImg === userImage) {\n      Swal.fire({\n        title: \"회원정보를 수정하시겠습니까?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        confirmButtonText: \"네 수정하겠습니다.\",\n        confirmButtonColor: \"#7966FF\",\n        cancelButtonText: \"아니오\",\n        cancelTextColor: \"#7966FF\",\n      }).then((result) => {\n        if (result.isConfirmed) {\n          Swal.fire(\"\", \"회원정보가 수정 되었습니다.\", \"success\");\n          dispatch(\n            userActions.logEditDB(uid, nickname, career, blogUrl, userImg)\n          );\n        } else if (result.dismiss === Swal.DismissReason.cancel) {\n          Swal.fire(\"\", \"수정이 취소 되었습니다 :)\", \"error\");\n        }\n      });\n      return;\n    } else if (userImg !== userImage) {\n      Swal.fire({\n        title: \"회원정보를 수정하시겠습니까?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        confirmButtonText: \"네 수정하겠습니다.\",\n        confirmButtonColor: \"#7966FF\",\n        cancelButtonText: \"아니오\",\n        cancelTextColor: \"#7966FF\",\n      }).then((result) => {\n        if (result.isConfirmed) {\n          Swal.fire(\"\", \"회원정보가 수정 되었습니다.\", \"success\");\n          dispatch(\n            userActions.logEditDB2(uid, nickname, career, blogUrl, userImg)\n          );\n        } else if (result.dismiss === Swal.DismissReason.cancel) {\n          Swal.fire(\"\", \"수정이 취소 되었습니다 :)\", \"error\");\n        }\n      });\n      return;\n    }\n  };\n\n  return (\n    <Container>\n      <div className='title'>프로필 편집</div>\n      <div className='user'>\n        <ProfileImg>\n          <i>\n            <Profile imgUrl={userImg} size={175} />\n          </i>\n          <input\n            id='profile'\n            type='file'\n            hidden={true}\n            onChange={editImg}\n            ref={imgInput}\n          />\n          <label htmlFor='profile'>\n            <img src={camera} />\n            사진 업로드\n          </label>\n        </ProfileImg>\n        <div className='container'>\n          <EditNickname>\n            <div>\n              <div>\n                <input\n                  placeholder='닉네임'\n                  onChange={nicknameRule}\n                  value={nickname}></input>\n                <button className='check' onClick={Check}>\n                  중복체크\n                </button>\n              </div>\n              {nickname.length > 0 && !nicknameRuleCheck && (\n                <span className='rule'> *닉네임 형식이 맞지 않습니다. </span>\n              )}\n            </div>\n          </EditNickname>\n\n          <EditBlog>\n            <div>\n              <input\n                className='blog'\n                placeholder='sns 계정 url 기입'\n                onChange={url}\n                value={userURL === \"undefined\" ? null : blogUrl}></input>\n            </div>\n          </EditBlog>\n          <EditCareer>\n            <div>\n              <span onClick={() => setCareerSelect(!careerSelect)}>\n                {career}\n              </span>\n              {careerSelect === true ? (\n                <ul>\n                  {options.map((v, idx) => (\n                    <li\n                      key={idx}\n                      onClick={() => {\n                        setCareer(v.name);\n                        setCareerSelect(false);\n                      }}>\n                      {v.name}\n                    </li>\n                  ))}\n                </ul>\n              ) : null}\n            </div>\n            <img\n              onClick={() => setCareerSelect(!careerSelect)}\n              src={img_down}></img>\n          </EditCareer>\n          <button className='save' onClick={Save}>\n            저장\n          </button>\n        </div>\n      </div>\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  width: 1440px;\n  height: 830px;\n  margin: auto;\n  > div.title {\n    width: 116px;\n    height: 35px;\n    font-size: 24px;\n    font-weight: 600;\n  }\n  > div.user {\n    width: 830px;\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin: auto;\n    > div.container {\n      width: 500px;\n      height: 312px;\n      margin: auto;\n      display: flex;\n      flex-direction: column;\n      justify-content: space-between;\n      > button {\n        width: 100%;\n        height: 72px;\n        background-color: #5e45f2;\n        color: white;\n        border-radius: 0.5rem;\n      }\n    }\n  }\n`;\nconst ProfileImg = styled.div`\n  width: 350px;\n  height: 400px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  > i {\n    width: 175px;\n    height: 175px;\n    margin-bottom: 1.5rem;\n  }\n  > label {\n    display: flex;\n    width: 135px;\n    height: 40px;\n    padding: 0 8px;\n    border: 2px solid #7966ff;\n    border-radius: 0.5rem;\n    font-size: 16px;\n    font-weight: 600;\n    justify-content: space-around;\n    align-items: center;\n    color: #7966ff;\n  }\n`;\n\nconst EditNickname = styled.div`\n  width: 500px;\n  height: 72px;\n  display: flex;\n  text-align: center;\n  justify-content: space-between;\n  display: flex;\n  flex-direction: column;\n  div {\n    width: 100%;\n    height: 72px;\n    display: flex;\n    flex-direction: column-reverse;\n    > span.rule {\n      color: red;\n      font-size: 12px;\n      position: absolute;\n      justify-content: start;\n      padding-left: 15px;\n    }\n    > div {\n      width: 100%;\n      height: 72px;\n      display: flex;\n      flex-direction: row;\n      position: relative;\n      justify-content: end;\n      align-items: center;\n      background-color: #f9f8ff;\n      border-radius: 0.5rem;\n      padding: 15px;\n      > input {\n        width: 100%;\n        height: 72px;\n        border-radius: 0.5rem;\n        font-size: 16px;\n        font-weight: 600;\n        outline: 0;\n        background-color: #f9f8ff;\n      }\n      > button {\n        width: 76px;\n        height: 32px;\n        background-color: #7966ff;\n        color: white;\n        border-radius: 32px;\n        position: absolute;\n        margin-right: 20px;\n      }\n    }\n  }\n`;\n\nconst EditBlog = styled.div`\n  width: 500px;\n  > div {\n    width: 100%;\n    height: 72px;\n    padding: 0 15px;\n    background-color: #f9f8ff;\n    border-radius: 0.5rem;\n    > input {\n      width: 100%;\n      height: 72px;\n      font-size: 16px;\n      font-weight: 600;\n      outline: 0;\n      background-color: #f9f8ff;\n    }\n  }\n`;\n\nconst EditCareer = styled.div`\n  width: 500px;\n  display: flex;\n  position: relative;\n  justify-content: end;\n  align-items: center;\n  div {\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    > span {\n      width: 100%;\n      height: 72px;\n      line-height: 72px;\n      padding: 0 16px;\n      border-radius: 8px;\n      background-color: #f9f8ff;\n      cursor: pointer;\n      color: #7966ff;\n      font-size: 16px;\n      font-weight: 600;\n    }\n    > ul {\n      width: 100%;\n      height: 72px;\n      border-radius: 0.5rem;\n      border: 0px;\n      position: absolute;\n      margin-top: 80px;\n      > li {\n        display: flex;\n        width: 100%;\n        height: 72px;\n        font-size: 16px;\n        font-weight: 600;\n        padding-left: 10px;\n        background-color: #f9f8ff;\n        align-items: center;\n        justify-content: start;\n        cursor: pointer;\n        &:hover {\n          background-color: #5e45f2;\n          color: #f9f8ff;\n        }\n      }\n    }\n  }\n  > img {\n    width: 50px;\n    height: 50px;\n    position: absolute;\n  }\n`;\n\nexport default Edituser;\n","/Users/cyj/sun/src/page/Detail.js",["302","303","304","305","306"],[],"import React from \"react\";\nimport styled from \"styled-components\";\nimport Comment from \"../components/Comment\";\nimport { useParams } from \"react-router\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { actionCreators as postActions } from \"../redux/modules/post\";\nimport { actionCreators as answerActions } from \"../redux/modules/answer\";\nimport { actionsCreators as searchActions } from \"../redux/modules/serch\";\nimport Swal from \"sweetalert2\";\n\nimport { history } from \"../redux/configureStore\";\nimport Answer from \"../components/Answer\";\nimport AnswerList from \"../components/AnswerList\";\nimport Profile from \"../elements/Profile\";\nimport user from \"../redux/modules/user\";\nimport Postchat from \"../components/Postchat\";\nimport Banner from \"../elements/Banner\";\n\nconst Detail = () => {\n  const dispatch = useDispatch();\n  const pid = useParams().pid;\n  const post_one = useSelector((state) => state.post.one_list);\n  const user_info = sessionStorage.getItem(\"uid\");\n  const delPost = () => {\n    Swal.fire({\n      title: \"게시글을 삭제하시겠습니까?\",\n      text: \"삭제된 게시물은 다시 복구할 수 없습니다.\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: \"네 삭제하겠습니다.\",\n      confirmButtonColor: \"#7966FF\",\n      cancelButtonText: \"아니오\",\n    }).then((result) => {\n      if (result.isConfirmed) {\n        Swal.fire(\"\", \"게시글이 삭제 되었습니다.\", \"success\");\n        dispatch(postActions.delPostDB(pid));\n      } else if (result.dismiss === Swal.DismissReason.cancel) {\n        Swal.fire(\"\", \"삭제가 취소 되었습니다 :)\", \"error\");\n      }\n    });\n  };\n\n  const likebtn = () => {\n    if (!user_info) {\n      Swal.fire(\"\", \"로그인 후 이용해주세요\", \"error\");\n    } else {\n      dispatch(postActions.postLikeDB(user_info, pid));\n    }\n  };\n\n  React.useEffect(() => {\n    window.scrollTo(0, 0);\n    dispatch(answerActions.getAnswerDB(pid));\n    dispatch(postActions.getOnePostDB(pid));\n  }, []);\n  // const date = post_one.createdAt?.split(\".\")[0].split(\"T\").join(\" \");\n  const date = post_one.createdAt?.split(\"T\")[0];\n\n  return (\n    <Container>\n      <div className='post_wrap'>\n        <Question>\n          <Top>\n            <div className='header'>\n              <h2>{post_one.postTitle}</h2>\n              <span\n                className='category'\n                onClick={() => {\n                  history.push(`/search/category_${post_one.category}`);\n                }}>\n                {post_one.category}\n              </span>\n            </div>\n            <div className='post_info'>\n              <dl className='user_info'>\n                <dt>\n                  <Profile size='24' migUrl={post_one.userImage} />\n                </dt>\n                <dd>{post_one.nickname}</dd>\n              </dl>\n              <em>{date}</em>\n              <i>관심 {post_one.postLikeCount}</i>\n            </div>\n          </Top>\n          <ContextWrap>\n            <div className='text-wrap'>\n              <p>{post_one.postComment}</p>\n              {post_one.postImg && <img src={post_one.postImg} />}\n            </div>\n\n            <div className='btn_wrap'>\n              <TagUl>\n                {post_one.tag?.map((v, idx) => (\n                  <li\n                    key={idx}\n                    onClick={() => {\n                      history.push(`/search/tag_${v}`);\n                    }}>\n                    #{v}\n                  </li>\n                ))}\n              </TagUl>\n              {Number(user_info) === post_one.uid ? (\n                <>\n                  <button styled={{ fontSize: \"40px\" }} onClick={delPost}>\n                    삭제\n                  </button>\n                  <button\n                    styled={{ fontSize: \"40px\" }}\n                    onClick={() => {\n                      history.push(`/edit/${pid}`);\n                    }}>\n                    수정\n                  </button>\n                </>\n              ) : (\n                <button onClick={likebtn}>관심 {post_one.postLikeCount}</button>\n              )}\n            </div>\n          </ContextWrap>\n        </Question>\n        {user_info && <Answer />}\n        <AnswerList isWriter={post_one.uid} />\n      </div>\n      <div className='right'>\n        <div>\n          <Postchat pid={pid} />\n          <Banner />\n        </div>\n      </div>\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  display: flex;\n  gap: 22px;\n  width: 1440px;\n  margin: 0 auto;\n\n  .post_wrap {\n    width: calc(100% - 342px - 22px);\n  }\n\n  .right {\n    flex: none;\n    width: 342px;\n    margin-bottom: 24px;\n\n    > div {\n      position: sticky;\n      top: 0;\n    }\n  }\n`;\n\nconst Question = styled.div`\n  background-color: #fff;\n  border-radius: 8px;\n  margin-bottom: 24px;\n  box-shadow: 0 4px 20px 0 rgba(228, 226, 242, 0.45);\n`;\n\nconst Top = styled.div`\n  padding: 30px 24px;\n  border-bottom: solid 1px #dadada;\n\n  h2 {\n    font-size: 20px;\n    word-break: break-all;\n  }\n\n  > div {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n  }\n\n  .header {\n    padding-bottom: 26px;\n\n    span {\n      cursor: pointer;\n    }\n  }\n\n  .category {\n    --cate-color: #797979;\n    font-size: 12px;\n    color: var(--cate-color);\n    border: solid 1px var(--cate-color);\n    margin-left: 10px;\n    padding: 8px 12px;\n    border-radius: 20px;\n  }\n\n  .post_info {\n    --main-color: #c4c4c4;\n    justify-content: flex-end;\n    color: var(--main-color);\n    font-weight: 700;\n\n    span {\n      vertical-align: middle;\n    }\n\n    em {\n      padding: 0 16px;\n      margin: 0 16px;\n      font-style: normal;\n      border-left: solid 1px var(--main-color);\n      border-right: solid 1px var(--main-color);\n    }\n  }\n\n  .user_info {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n  }\n`;\n\nconst ContextWrap = styled.div`\n  padding: 24px;\n\n  .text-wrap {\n    min-height: 250px;\n\n    > *:not(style) {\n      margin-bottom: 10px;\n    }\n  }\n\n  p {\n    word-break: break-all;\n  }\n\n  .btn_wrap {\n    display: flex;\n    align-items: center;\n\n    ul {\n      margin-right: auto;\n    }\n\n    button {\n      padding: 10px 16px;\n      color: #7966ff;\n      font-size: 16px;\n    }\n  }\n`;\n\nconst TagUl = styled.ul`\n  --main-color: #797979;\n\n  display: inline-flex;\n  color: var(--main-color);\n  font-size: 14px;\n\n  li {\n    padding: 6px 10px;\n    margin-right: 10px;\n    border-radius: 30px;\n    border: solid 1px var(--main-color);\n    cursor: pointer;\n  }\n`;\n\nexport default Detail;\n","/Users/cyj/sun/src/page/Password.js",["307","308","309"],[],"import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Swal from \"sweetalert2\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { actionCreators as passWordAction } from \"../redux/modules/user\";\nimport { useParams } from \"react-router-dom\";\n\nconst uid = sessionStorage.getItem(\"uid\");\n\nconst Password = () => {\n  const dispatch = useDispatch();\n  const [password, setPassword] = useState(\"\");\n  const [newPassword, setnewPassWord] = useState(\"\");\n  const [checkPassWord, setCheckPassWord] = useState(\"\");\n\n  const [newPasswordRuleCheck, setNewPasswordRuleCheck] = React.useState(false);\n\n  const Pass = (e) => {\n    const password = e.target.value;\n    setPassword(password);\n  };\n\n  const NewPass = (e) => {\n    const rule = /^(?=.*\\d)(?=.*[a-zA-Z])[0-9a-zA-Z]{4,10}$/;\n    const newPassword = e.target.value;\n    setnewPassWord(newPassword);\n    rule.test(newPassword)\n      ? setNewPasswordRuleCheck(true)\n      : setNewPasswordRuleCheck(false);\n    console.log(newPasswordRuleCheck);\n  };\n\n  const CheckPass = (e) => {\n    setCheckPassWord(e.target.value);\n    console.log(checkPassWord);\n  };\n\n  /////////////////입력한 현재비밀번호가 맞는지 확인해야함\n  const NewPassWord = () => {\n    if (password === newPassword) {\n      Swal.fire(\"\", \"새비밀번호가 현재비밀번호와 동일합니다.\", \"error\");\n      return;\n    } else if (newPasswordRuleCheck === false) {\n      Swal.fire(\"\", \"새비밀번호 형식이 맞지않습니다.\", \"error\");\n      return;\n    } else if (newPassword !== checkPassWord) {\n      Swal.fire(\"\", \"입력하신 새비밀번호가 일치하지않습니다.\", \"error\");\n      return;\n    } else {\n      Swal.fire({\n        title: \"수정하시겠습니까?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        confirmButtonText: \"네 수정하겠습니다.\",\n        confirmButtonColor: \"#7966FF\",\n        cancelButtonText: \"아니오\",\n        cancelTextColor: \"#7966FF\",\n      }).then((result) => {\n        if (result.isConfirmed) {\n          dispatch(\n            passWordAction.NewPassWordDB(\n              uid,\n              password,\n              newPassword,\n              checkPassWord\n            )\n          );\n          Swal.fire(\"\", \"수정 되었습니다.\", \"success\");\n        } else if (result.dismiss === Swal.DismissReason.cancel) {\n          Swal.fire(\"\", \"수정이 취소 되었습니다 :)\", \"error\");\n        }\n      });\n    }\n  };\n\n  return (\n    <Container>\n      <div className='title'>비밀번호 재설정</div>\n      <div className='user'>\n        <div className='inputBox'>\n          <div>\n            <input\n              type='password'\n              placeholder='현재 비밀번호'\n              onChange={Pass}\n            />\n          </div>\n\n          <div>\n            <input\n              type='password'\n              placeholder='새로운 비밀번호'\n              onChange={NewPass}\n            />\n            {newPassword.length > 0 && !newPasswordRuleCheck && (\n              <span className='rule'>\n                *영문 숫자 조합 4자 이상 입력해주세요.\n              </span>\n            )}\n          </div>\n\n          <div>\n            <input\n              type='password'\n              placeholder='새로운 비밀번호 재확인'\n              onChange={CheckPass}\n            />\n            {checkPassWord.length > 0 && checkPassWord !== newPassword && (\n              <span className='rule'>*일치하지않는 비밀번호입니다.</span>\n            )}\n          </div>\n\n          <button onClick={NewPassWord}>저장하기</button>\n        </div>\n      </div>\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  width: 1440px;\n  height: 830px;\n  margin: auto;\n  > div.title {\n    width: 160px;\n    height: 35px;\n    font-size: 24px;\n    font-weight: 600;\n  }\n  > div.user {\n    width: 500px;\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin: auto;\n    > div.inputBox {\n      width: 500px;\n      height: 312px;\n      display: flex;\n      flex-direction: column;\n      justify-content: space-evenly;\n      div {\n        width: 100%;\n        height: 72px;\n        display: flex;\n        flex-direction: column;\n        position: relative;\n        justify-content: end;\n        background-color: #f9f8ff;\n        border-radius: 0.5rem;\n        padding: 15px;\n        > span.rule {\n          color: red;\n          font-size: 12px;\n          position: absolute;\n          justify-content: start;\n          padding-left: 15px;\n        }\n        > input {\n          width: 100%;\n          height: 72px;\n          border-radius: 0.5rem;\n          font-size: 16px;\n          font-weight: 600;\n          outline: 0;\n          background-color: #f9f8ff;\n        }\n      }\n      > input {\n        width: 500px;\n        height: 72px;\n        border-radius: 0.5rem;\n        background-color: #f9f8ff;\n      }\n      > button {\n        width: 500px;\n        height: 72px;\n        color: #f9f8ff;\n        background-color: #7966ff;\n        border-radius: 0.5rem;\n      }\n    }\n  }\n`;\n\nexport default Password;\n","/Users/cyj/sun/src/page/SearchResult.js",["310","311","312","313","314","315","316"],[],"import React from \"react\";\nimport styled from \"styled-components\";\nimport { useParams } from \"react-router\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useInView } from \"react-intersection-observer\";\nimport NoticeList from \"../elements/NoticeList\";\nimport { history } from \"../redux/configureStore\";\nimport { actionsCreators as searchActions } from \"../redux/modules/serch\";\n\nconst SearchResult = () => {\n  const dispatch = useDispatch();\n  const search_type = useParams().keyword.split(\"_\")[0];\n  const search_keyword = useParams().keyword.split(\"_\")[1];\n  const tag_list = useSelector((state) => state.search.tag_list);\n  const serch_list = useSelector((state) => state.search.serch_list);\n  const category_list = useSelector((state) => state.search.category_list);\n  const postList =\n    search_type === \"tag\"\n      ? tag_list\n      : search_type === \"serch\"\n      ? serch_list\n      : category_list;\n  const [isLoaded, setIsLoaded] = React.useState(false);\n  const [pageNum, setPageNum] = React.useState(1);\n  const [pageNum1, setPageNum1] = React.useState(1);\n  const [pageNum2, setPageNum2] = React.useState(1);\n  const [ref, inView] = useInView({\n    threshold: 0.4,\n  });\n\n  React.useEffect(() => {\n    switch (search_type) {\n      case \"tag\":\n        return dispatch(searchActions.tagDB(search_keyword, pageNum));\n      case \"serch\":\n        return dispatch(searchActions.serchDB(search_keyword, pageNum1));\n      case \"category\":\n        return dispatch(searchActions.categoryDB(search_keyword, pageNum2));\n      default:\n        return null;\n    }\n  }, [search_keyword, pageNum, pageNum1, pageNum2]);\n\n  const getMoreItem = () => {\n    switch (search_type) {\n      case \"tag\":\n        setPageNum(pageNum + 1);\n      case \"serch\":\n        setPageNum1(pageNum1 + 1);\n      case \"category\":\n        setPageNum2(pageNum2 + 1);\n      default:\n        return null;\n    }\n  };\n\n  React.useEffect(() => {\n    if (inView) {\n      getMoreItem();\n    }\n  }, [inView]);\n\n  return (\n    <Container>\n      {postList.map((v, idx) => {\n        const lastEl = idx === postList.length - 1;\n        return <NoticeList key={idx} list={v} lastEl={lastEl} viewRef={ref} />;\n      })}\n\n      {postList.length === 0 && (\n        <NoSearch>\n          <h2>검색 결과가 없습니다 :)</h2>\n          <button\n            onClick={() => {\n              history.replace(\"/\");\n            }}>\n            되돌아가기\n          </button>\n        </NoSearch>\n      )}\n    </Container>\n  );\n};\nconst NoSearch = styled.div`\n  padding: 200px;\n  min-height: calc(100vh - 250px);\n  text-align: center;\n\n  h2 {\n    font-size: 30px;\n    font-weight: 700;\n  }\n\n  button {\n    margin-top: 40px;\n    padding: 16px 40px;\n    background-color: #ddd;\n    border-radius: 8px;\n    color: #fff;\n    transition: all 0.4s;\n\n    &:hover {\n      background-color: #7966ff;\n    }\n  }\n`;\nconst Container = styled.div`\n  width: 1440px;\n  min-height: calc(100vh - 100px - 150px);\n  margin: auto;\n`;\nexport default SearchResult;\n","/Users/cyj/sun/src/page/Main.js",[],[],"/Users/cyj/sun/src/page/Ranking.js",["317","318"],[],"import React from \"react\";\nimport styled from \"styled-components\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { actionCreators as rankingActions } from \"../redux/modules/ranking\";\nimport TabMenu from \"../components/TabMenu\";\nimport RankingTop from \"../components/RankingTop\";\nimport RankingOther from \"../components/RankingOther\";\n\nconst Ranking = () => {\n  const tab_list = [\n    {\n      title: \"total\",\n      value: \"종합 랭킹\",\n    },\n    {\n      title: \"month\",\n      value: \"월간 랭킹\",\n    },\n    {\n      title: \"week\",\n      value: \"주간 랭킹\",\n    },\n  ];\n  const dispatch = useDispatch();\n  const ranking_list = useSelector((state) => state.ranking.list);\n  const user_ranking = useSelector((state) => state.ranking.user_list);\n  const [tabList, setTabList] = React.useState();\n\n  React.useEffect(() => {\n    switch (tabList) {\n      case \"month\":\n        dispatch(rankingActions.monthRankingDB());\n        dispatch(rankingActions.myMonthRankingDB());\n        return;\n      case \"week\":\n        dispatch(rankingActions.weekRankingDB());\n        dispatch(rankingActions.myWeekRankingDB());\n        return;\n      default:\n        dispatch(rankingActions.myTotalRankingDB());\n        dispatch(rankingActions.totalRankingDB());\n        return;\n    }\n  }, [tabList]);\n\n  return (\n    <SC_Detail>\n      <TabMenu tab_list={tab_list} tab={setTabList} />\n      <RankingTop list={ranking_list?.slice(0, 3)} />\n      <RankingOther\n        list={ranking_list?.slice(3, 10)}\n        user_ranking={user_ranking}\n      />\n    </SC_Detail>\n  );\n};\nconst SC_Detail = styled.div`\n  width: 1440px;\n  margin: 0 auto;\n  padding-bottom: 220px;\n\n  h2 {\n    font-size: 24px;\n    padding-bottom: 40px;\n  }\n`;\nexport default Ranking;\n","/Users/cyj/sun/src/components/Header.js",["319","320","321","322","323"],[],"import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport Stomp, { over } from \"stompjs\";\nimport SockJs from \"sockjs-client\";\n\nimport { history } from \"../redux/configureStore\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { actionCreators as loOutAction } from \"../redux/modules/user\";\nimport Serch from \"./Serch\";\nimport Profile from \"../elements/Profile\";\nimport Category from \"./Category\";\nimport { delToken } from \"../shared/token\";\nimport { apiUrl } from \"../elements/testApiUrl\";\nimport { ReactComponent as LogoSvg } from \"../svg/logo_header.svg\";\nimport { ReactComponent as ArrowDown } from \"../svg/arrow_down_b.svg\";\nimport { ReactComponent as User } from \"../svg/user.svg\";\n\nlet stompClient = null;\nconst Header = () => {\n  const isLogin = sessionStorage.getItem(\"isLogin\");\n  const nickname = sessionStorage.getItem(\"nickname\");\n  const userImage = sessionStorage.getItem(\"userImage\");\n  const [view, setView] = useState(false);\n  const View = () => {\n    setView(!view);\n  };\n\n  const [goPost, setGoPost] = React.useState(\"\");\n  const token = {\n    Authorization: sessionStorage.getItem(\"token\"),\n  };\n\n  const Logout = () => {\n    delToken();\n  };\n\n  React.useEffect(() => {\n    if (nickname) {\n      let socket = new SockJs(`${apiUrl}/ws`);\n\n      stompClient = Stomp.over(socket);\n      stompClient.connect({}, () => {\n        stompClient.subscribe(\n          `/queue/user/${nickname}`,\n          (payload) => {\n            let payloadData = JSON.parse(payload.body);\n            console.log(payloadData);\n            setGoPost(payloadData);\n          },\n          token\n        );\n      });\n    } else {\n      // stompClient.disconnect(() => {\n      //   stompClient.unsubscribe(`/queue/user/${nickname}`);\n      // });\n    }\n  }, []);\n\n  return (\n    <Container>\n      <div>\n        <LogoSvg className='Logo' onClick={() => history.push(\"/\")} />\n\n        <Category />\n\n        <Serch />\n        {!isLogin ? (\n          <div className='auth none' onClick={() => history.push(\"/login\")}>\n            <i>\n              <User />\n            </i>\n            <span>회원가입/로그인</span>\n          </div>\n        ) : (\n          <div className='auth my' onClick={View}>\n            <i className={goPost.status ? \"active\" : \"\"}>\n              <Profile size={36} imgUrl={userImage} />\n            </i>\n            {nickname}\n            <ArrowDown className='arrow' />\n            {view ? (\n              <ul className='view'>\n                <li onClick={() => history.push(\"/useredit\")}>프로필 편집</li>\n                <li onClick={() => history.push(\"/passedit\")}>\n                  비밀번호 재설정\n                </li>\n                <li onClick={() => history.push(\"/alarms\")}>알람 내역</li>\n                <li onClick={() => history.push(\"/scrap\")}>관심글</li>\n                <li className='logout' onClick={Logout}>\n                  로그아웃\n                </li>\n              </ul>\n            ) : null}\n          </div>\n        )}\n      </div>\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  min-width: 1440px;\n  height: 100px;\n  margin-bottom: 24px;\n  box-shadow: -4px 5px 14px 0 rgb(65 0 131 / 6%);\n\n  > div {\n    display: flex;\n    width: 1440px;\n    height: 100%;\n    margin: 0 auto;\n    align-items: center;\n  }\n\n  .auth {\n    position: relative;\n    align-items: center;\n    justify-content: center;\n    width: 280px;\n    height: 52px;\n    padding-left: 20px;\n    padding-right: 17px;\n    border-radius: 8px;\n    box-shadow: 0 0 4px 0 rgba(172, 168, 203, 0.2);\n    cursor: pointer;\n  }\n\n  .Logo {\n    flex: none;\n    width: 220px;\n    height: 38px;\n    cursor: pointer;\n  }\n\n  div.my {\n    display: flex;\n\n    i {\n      margin-right: 10px;\n    }\n\n    i.active {\n      span {\n        position: relative;\n      }\n      span:before {\n        --alert-size: 10px;\n        content: \"\";\n        position: absolute;\n        bottom: 2px;\n        right: -2px;\n        width: var(--alert-size);\n        height: var(--alert-size);\n        border-radius: var(--alert-size);\n        background-color: #de0000;\n        box-shadow: 0 1px 3px 0 rgba(245, 80, 80, 0.25);\n      }\n    }\n  }\n\n  div.my > .arrow {\n    margin-left: auto;\n    width: 24px;\n    height: 24px;\n  }\n\n  div.none {\n    width: 191;\n    height: 63px;\n    display: flex;\n    color: #7966ff;\n    align-items: center;\n    cursor: pointer;\n  }\n\n  ul.view {\n    position: absolute;\n    top: calc(100% + 8px);\n    right: 0;\n    width: 100%;\n    padding: 30px 24px;\n    background-color: #fff;\n    border-radius: 8px;\n    z-index: 10;\n    box-shadow: 0 0 10px 0 rgba(172, 168, 203, 0.4);\n  }\n\n  ul.view > li {\n    height: 2rem;\n    padding: 4px 8px;\n    margin-bottom: 6px;\n    font-size: 1rem;\n    text-align: center;\n    cursor: pointer;\n    color: #333;\n    font-size: 16px;\n    border-radius: 2px;\n\n    &.logout {\n      color: #797979;\n      &:hover {\n        background-color: #998bff;\n      }\n    }\n\n    &:hover {\n      color: #fff;\n      background-color: #7966ff;\n    }\n  }\n\n  i {\n    display: inline-flex;\n    margin-right: 12px;\n  }\n\n  img {\n    width: 100%;\n    height: 100%;\n  }\n\n  button {\n    width: 138px;\n    height: 52px;\n    border-radius: 2rem;\n    font-size: 14px;\n    color: black;\n  }\n`;\n\nexport default Header;\n","/Users/cyj/sun/src/components/Footer.js",[],[],"/Users/cyj/sun/src/components/_Test.js",[],[],"/Users/cyj/sun/src/redux/modules/post.js",["324","325","326"],[],"import { createAction, handleActions } from \"redux-actions\";\nimport produce from \"immer\";\nimport axios from \"axios\";\nimport { apis } from \"../../shared/api\";\nimport { apiUrl } from \"../../elements/testApiUrl\";\n\nconst GET_POST = \"GET_POST\";\nconst GET_ONE_POST = \"GET_ONE_POST\";\nconst GET_POSTCHK = \"GET_POSTCHK\";\nconst ADD_POST = \"ADD_POST\";\nconst EDIT_POST = \"EDIT_POST\";\nconst DEL_POST = \"DEL_POST\";\nconst IMG_POST = \"IMG_POST\";\nconst LOADING = \"LOADING\";\n\nconst getPost = createAction(GET_POST, (post) => ({ post }));\nconst getPostNoChk = createAction(GET_POSTCHK, (post) => ({ post }));\nconst getOnePost = createAction(GET_ONE_POST, (post) => ({ post }));\nconst addPost = createAction(ADD_POST, (post) => ({ post }));\nconst editPost = createAction(EDIT_POST, (post) => ({ post }));\nconst delPost = createAction(DEL_POST, (pid) => ({ pid }));\nconst imgPost = createAction(IMG_POST, (preview) => ({ preview }));\nconst loading = createAction(LOADING, (is_loading) => ({ is_loading }));\n\nconst initialState = {\n  list: [],\n  one_list: [],\n  nockeckList: [],\n  preview: \"\",\n  paging: { start: null, next: null, size: 3 },\n  is_loading: false,\n};\n\n// ===================================================================\n// ======================== 게시글 리스트 가지고오기========================\n\nconst getPostDB = (page) => {\n  return function (dispatch, getState, { history }) {\n    apis\n      .getpost(page)\n      .then((res) => {\n        const query = res.data;\n        dispatch(getPost(query));\n      })\n      .catch((err) => {\n        console.log(\"error get post\");\n      });\n  };\n};\n\nconst getPostNocheckDB = (page) => {\n  return function (dispatch, getState, { history }) {\n    console.log(page);\n    apis\n      .getpostnocheck(page)\n      .then((res) => {\n        const query = res.data;\n        dispatch(getPostNoChk(query));\n      })\n      .catch((err) => {\n        console.log(\"error get post\");\n      });\n  };\n};\n\n// ====================================================================\n// ======================== 선택한 게시글 가지고오기 ========================\nconst getOnePostDB = (pid) => {\n  return function (dispatch, getState, { history }) {\n    apis\n      .onepost(pid)\n      .then((res) => {\n        dispatch(getOnePost(res.data));\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n\n// =====================================================================\n// ================================ 추가 ================================\nconst addPostDB = (props) => {\n  return function (dispatch, getState, { history }) {\n    const { title, comment, tags, category } = props;\n    const token_res = sessionStorage.getItem(\"token\");\n    const img_list = getState().post.preview;\n    const formData = new FormData();\n    formData.append(\"images\", img_list);\n\n    if (!img_list) {\n      axios({\n        method: \"post\",\n        url: `${apiUrl}/islogin/post/write`,\n        data: {\n          postTitle: title,\n          postComment: comment,\n          postImg: null,\n          tags: tags ? tags : null,\n          category: category,\n        },\n        headers: { Authorization: `${token_res}` },\n      }).then((res) => {\n        dispatch(\n          addPost({\n            title,\n            comment,\n            imgUrl: null,\n            tags: tags ? tags : null,\n            pid: res.data,\n          })\n        );\n        history.replace(\"/\");\n      });\n    } else {\n      axios\n        .post(`${apiUrl}/images/upload`, formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\",\n            Authorization: `${token_res}`,\n          },\n        })\n        .then((res) => {\n          const imgUrl = res.data.url;\n          return imgUrl;\n        })\n        .then((imgUrl) => {\n          axios({\n            method: \"post\",\n            url: `${apiUrl}/islogin/post/write`,\n            data: {\n              postTitle: title,\n              postComment: comment,\n              postImg: imgUrl,\n              tags: tags ? tags : null,\n\n              category: category,\n            },\n            headers: { Authorization: `${token_res}` },\n          }).then((res) => {\n            dispatch(\n              addPost({\n                title,\n                comment,\n                imgUrl,\n                tags: tags ? tags : null,\n                pid: res.data,\n              })\n            );\n            history.replace(\"/\");\n          });\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n};\n\n// =====================================================================\n// ================================ 수정 ================================\nconst editPostDB = (props) => {\n  return function (dispatch, getState, { history }) {\n    const { category, pid, postComment, postImg, postTitle, tag } = props;\n    const token_res = sessionStorage.getItem(\"token\");\n    const img_list = getState().post.preview;\n    const formData = new FormData();\n    formData.append(\"images\", img_list);\n\n    if (!img_list) {\n      axios({\n        method: \"PUT\",\n        url: `${apiUrl}/islogin/post/revice/${pid}`,\n        data: {\n          pid: pid,\n          postTitle: postTitle,\n          postComment: postComment,\n          postImg: postImg,\n          tags: tag,\n          category: category,\n        },\n        headers: { Authorization: `${token_res}` },\n      }).then(() => {\n        dispatch(editPost({ postTitle, postComment, tag, category, pid }));\n        history.replace(`/detail/${pid}`);\n        window.scrollTo(0, 0);\n      });\n    } else {\n      axios\n        .post(`${apiUrl}/images/upload`, formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\",\n            Authorization: `${token_res}`,\n          },\n        })\n        .then((res) => {\n          const imgUrl = res.data.url;\n          return imgUrl;\n        })\n        .then((imgUrl) => {\n          axios({\n            method: \"PUT\",\n            url: `${apiUrl}/islogin/post/revice/${pid}`,\n            data: {\n              pid: pid,\n              postTitle: postTitle,\n              postComment: postComment,\n              postImg: imgUrl,\n              tags: tag,\n              category: category,\n            },\n            headers: { Authorization: `${token_res}` },\n          }).then(() => {\n            dispatch(editPost({ postTitle, postComment, tag, category, pid }));\n            history.replace(`/detail/${pid}`);\n            window.scrollTo(0, 0);\n          });\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n};\n\n// =====================================================================\n// ================================ 삭제 ================================\nconst delPostDB = (pid) => {\n  return function (dispatch, getState, { history }) {\n    apis\n      .delpost(pid)\n      .then(() => {\n        window.location.replace(\"/\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n\nconst postLikeDB = (uid, pid) => {\n  return function (dispatch, getState, { history }) {\n    apis\n      .likepost(uid, pid)\n      .then((res) => {\n        const post_list = getState().post.one_list;\n        let like_count = \"\";\n        if (res.data.postLike === \"true\") {\n          like_count = post_list.postLikeCount + 1;\n        } else {\n          like_count = post_list.postLikeCount - 1;\n        }\n\n        dispatch(\n          getOnePost({ ...post_list, post_list, postLikeCount: like_count })\n        );\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n// =====================================================================\n// ============================== reducer ==============================\nexport default handleActions(\n  {\n    [GET_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list.push(...action.payload.post);\n        draft.list = draft.list.reduce((acc, cur) => {\n          if (acc.findIndex((a) => a.pid === cur.pid) === -1) {\n            return [...acc, cur];\n          } else {\n            acc[acc.findIndex((a) => a.pid === cur.pid)] = cur;\n            return acc;\n          }\n        }, []);\n      }),\n    [GET_POSTCHK]: (state, action) =>\n      produce(state, (draft) => {\n        draft.nockeckList.push(...action.payload.post);\n        draft.nockeckList = draft.nockeckList.reduce((acc, cur) => {\n          if (acc.findIndex((a) => a.pid === cur.pid) === -1) {\n            return [...acc, cur];\n          } else {\n            acc[acc.findIndex((a) => a.pid === cur.pid)] = cur;\n            return acc;\n          }\n        }, []);\n      }),\n    [GET_ONE_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.one_list = action.payload.post;\n      }),\n    [ADD_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list.push(action.payload.post);\n        draft.preview = \"\";\n      }),\n    [EDIT_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.one_list = action.payload.post;\n        draft.preview = \"\";\n      }),\n    [DEL_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list = draft.list;\n      }),\n    [IMG_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.preview = action.payload.preview;\n      }),\n    [LOADING]: (state, action) =>\n      produce(state, (draft) => {\n        draft.is_loading = action.payload.is_loading;\n      }),\n  },\n  initialState\n);\n\nconst actionCreators = {\n  getPostDB,\n  getOnePostDB,\n  addPostDB,\n  editPostDB,\n  delPostDB,\n  imgPost,\n  getPostNocheckDB,\n  postLikeDB,\n};\n\nexport { actionCreators };\n","/Users/cyj/sun/src/redux/modules/serch.js",["327","328","329","330"],[],"import { createAction, handleActions } from \"redux-actions\";\nimport axios from \"axios\";\nimport { setToken } from \"../../shared/token\";\nimport produce from \"immer\";\nimport { apiUrl } from \"../../elements/testApiUrl\";\nimport { apis } from \"../../shared/api\";\n\nconst SERCH = \"SERCH\";\nconst CATEGORY = \"CATEGORY\";\nconst TAG = \"TAG\";\n\nconst serch = createAction(SERCH, (list) => ({ list }));\nconst categorySerch = createAction(CATEGORY, (list) => ({ list }));\nconst tagSearch = createAction(TAG, (list) => ({ list }));\n\nconst token = sessionStorage.getItem(\"token\");\n\nconst initialState = {\n  serch_list: [],\n  category_list: [],\n  tag_list: [],\n};\n\nconst serchDB = (title, page) => {\n  return async function (dispatch, getState, { history }) {\n    console.log(title, page);\n    await axios\n      .get(\n        `${apiUrl}/post/search/${title}?page=${page}&size=10&sortBy=createdAt&isAsc=false`,\n        {\n          headers: {\n            Authorization: token,\n          },\n        }\n      )\n      .then((res) => {\n        console.log(res.data);\n        dispatch(serch(res.data));\n        return;\n        if (res.data.length === 0) {\n          console.log(res.data);\n          const beforePage = page - 1;\n          console.log(beforePage);\n          axios\n            .get(\n              `${apiUrl}/post/search/${title}?page=${beforePage}&size=10&sortBy=createdAt&isAsc=false`,\n              {\n                headers: {\n                  Authorization: token,\n                },\n              }\n            )\n            .then((res) => {\n              console.log(res);\n              dispatch(serch(res.data));\n            });\n        } else {\n          console.log(res);\n          dispatch(serch(res.data));\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n\nconst categoryDB = (category, page) => {\n  return function (dispatch, getState, { history }) {\n    axios\n      .get(\n        `${apiUrl}/category/search/${category}?page=${page}&size=10&sortBy=createdAt&isAsc=false`,\n        {\n          headers: {\n            Authorization: token,\n          },\n        }\n      )\n      .then((res) => {\n        console.log(page);\n        console.log(res.data);\n\n        dispatch(categorySerch(res.data));\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n\nconst tagDB = (tag, page) => {\n  return function (dispatch, getState, { history }) {\n    axios\n      .get(\n        `${apiUrl}/tag/search/${tag}?page=${page}&size=10&sortBy=createdAt&isAsc=false`,\n        {\n          headers: {\n            Authorization: token,\n          },\n        }\n      )\n      .then((res) => {\n        console.log(res.data);\n        dispatch(tagSearch(res.data));\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n\nexport default handleActions(\n  {\n    [SERCH]: (state, action) =>\n      produce(state, (draft) => {\n        // draft.serch_list = action.payload.list;\n        draft.serch_list.push(...action.payload.list);\n        draft.serch_list = draft.serch_list.reduce((acc, cur) => {\n          if (acc.findIndex((a) => a.pid === cur.pid) === -1) {\n            return [...acc, cur];\n          } else {\n            acc[acc.findIndex((a) => a.pid === cur.pid)] = cur;\n            return acc;\n          }\n        }, []);\n      }),\n    [CATEGORY]: (state, action) =>\n      produce(state, (draft) => {\n        draft.category_list.push(...action.payload.list);\n        draft.category_list = draft.category_list.reduce((acc, cur) => {\n          if (acc.findIndex((a) => a.pid === cur.pid) === -1) {\n            return [...acc, cur];\n          } else {\n            acc[acc.findIndex((a) => a.pid === cur.pid)] = cur;\n            return acc;\n          }\n        }, []);\n      }),\n    [TAG]: (state, action) =>\n      produce(state, (draft) => {\n        draft.tag_list.push(...action.payload.list);\n        draft.tag_list = draft.tag_list.reduce((acc, cur) => {\n          if (acc.findIndex((a) => a.pid === cur.pid) === -1) {\n            return [...acc, cur];\n          } else {\n            acc[acc.findIndex((a) => a.pid === cur.pid)] = cur;\n            return acc;\n          }\n        }, []);\n      }),\n  },\n  initialState\n);\n\nconst actionsCreators = {\n  serchDB,\n  serch,\n  categoryDB,\n  categorySerch,\n  tagDB,\n};\n\nexport { actionsCreators };\n","/Users/cyj/sun/src/redux/modules/user.js",["331","332"],[],"import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport history from \"../configureStore\";\nimport axios from \"axios\";\nimport Swal from \"sweetalert2\";\n\nimport { setToken, delToken } from \"../../shared/token\";\nimport { apiUrl } from \"../../elements/testApiUrl\";\n\n//initialState\nconst initialState = {\n  userinfo: {\n    uid: \"\",\n    username: \"\",\n    nickname: \"\",\n    career: \"\",\n    userImage: \"\",\n  },\n  isLogin: false,\n  isCheckUsername: false,\n  isCheckNickname: false,\n  preview: \"\",\n};\n\n//action\nconst CHECK_USERNAME = \"CHECK_USERNAME\";\nconst CHECK_NICKNAME = \"CHECK_NICKNAME\";\nconst LOG_IN = \"LOG_IN\";\nconst LOG_OUT = \"LOG_OUT\";\nconst USER_EDUT = \"USER_EDUT\";\nconst IMG_POST = \"IMG_POST\";\n\n//action creators\nconst setCheckUsername = createAction(CHECK_USERNAME, (isCheckUsername) => ({\n  isCheckUsername,\n}));\nconst setCheckNickname = createAction(CHECK_NICKNAME, (isCheckNickname) => ({\n  isCheckNickname,\n}));\nconst logIn = createAction(LOG_IN, (user) => ({ user }));\nconst logOut = createAction(LOG_OUT, () => ({}));\nconst logEdit = createAction(USER_EDUT, (user) => ({ user }));\nconst imgPost = createAction(IMG_POST, (preview) => ({ preview }));\n\n// //token\nconst token = sessionStorage.getItem(\"token\");\n\n//middleware actions\nconst checkUsernameDB = (username, isCheckUsername) => {\n  return async function (dispatch, getState, { history }) {\n    console.log(username, isCheckUsername);\n    await axios\n      .post(`${apiUrl}/user/signup/username`, { username: username })\n      .then((res) => {\n        if (res.data === true) {\n          Swal.fire(\"\", \"이미 존재하는 ID입니다.\", \"error\");\n          return;\n        }\n        dispatch(setCheckUsername(!isCheckUsername));\n        console.log(\"리듀서로\");\n      });\n  };\n};\n\nconst checkNicknameDB = (userNickname, isCheckNickname) => {\n  return async function (dispatch, getState, { history }) {\n    console.log(userNickname, isCheckNickname);\n    await axios\n      .post(`${apiUrl}/user/signup/nickname`, {\n        nickname: userNickname,\n      })\n      .then((res) => {\n        if (res.data === true) {\n          Swal.fire(\"\", \"이미 존재하는 닉네임입ㄴ디ㅏ.\", \"error\");\n          return;\n        }\n        console.log(res);\n        dispatch(setCheckNickname(!isCheckNickname));\n      });\n  };\n};\n\nconst signupDB = (username, nickname, password, passwordCheck, career) => {\n  return function (dispatch, getState, { history }) {\n    console.log(username, nickname, password, passwordCheck, career);\n    axios\n      .post(`${apiUrl}/user/signup`, {\n        username: username,\n        nickname: nickname,\n        password: password,\n        passwordCheck: passwordCheck,\n        career: career,\n      })\n      .then((res) => {\n        Swal.fire(\"\", \"회원가입을 축하드립니다.\", \"success\");\n        window.location.reload();\n      })\n      .catch((err) => {\n        console.log(\"회원가입 실패\", err);\n        Swal.fire(\"\", \"회원가입에 실패했어요.\", \"error\");\n      });\n  };\n};\n\nconst loginDB = (username, password) => {\n  return function (dispatch, getState, { history }) {\n    console.log(username, password);\n    axios\n      .post(`${apiUrl}/user/login`, {\n        username: username,\n        password: password,\n      })\n      .then((res) => {\n        console.log(res);\n        const token_res = res.headers.authorization;\n        setToken(token_res);\n        return token_res;\n      })\n      .then((token_res) => {\n        console.log(token_res);\n        axios({\n          method: \"post\",\n          url: `${apiUrl}/islogin/user`,\n          headers: {\n            Authorization: `${token_res}`,\n          },\n        })\n          .then((res) => {\n            console.log(res);\n            sessionStorage.setItem(\"uid\", res.data.uid);\n            sessionStorage.setItem(\"username\", res.data.username);\n            sessionStorage.setItem(\"nickname\", res.data.nickname);\n            sessionStorage.setItem(\"career\", res.data.career);\n            sessionStorage.setItem(\"userImage\", res.data.userImage);\n            sessionStorage.setItem(\"url\", res.data.blogUrl);\n            sessionStorage.setItem(\"isLogin\", true);\n            console.log(\"1번\");\n            dispatch(\n              logIn({\n                uid: res.data.uid,\n                username: res.data.username,\n                nickname: res.data.nickname,\n                career: res.data.career,\n                userImage: res.data.userImage,\n                url: res.data.blogUrl,\n              })\n            );\n            history.push(\"/\");\n            window.location.reload();\n          })\n          .catch((err) => {\n            console.log(\"로그인 확인 실패\", err);\n          });\n      })\n      .catch((err) => {\n        console.log(err);\n        Swal.fire(\"\", \"이메일이나 패스워드를 다시 확인해주세요.\", \"error\");\n      });\n  };\n};\n\nconst logEditDB = (uid, nickname, career, url, userImg) => {\n  return function (dispatch, getState, { history }) {\n    console.log(uid, nickname, career, url);\n    axios\n      .put(\n        `${apiUrl}/islogin/user/getinfo/${uid}`,\n        {\n          nickname: nickname,\n          career: career,\n          userImage: \"\",\n          blogUrl: url,\n        },\n        {\n          headers: {\n            Authorization: token,\n          },\n        }\n      )\n      .then((res) => {\n        console.log(res.data);\n        dispatch(\n          logEdit({\n            nickname: nickname,\n            career: career,\n            userImage: userImg,\n            blogUrl: url,\n          })\n        );\n        sessionStorage.setItem(\"nickname\", nickname);\n        sessionStorage.setItem(\"career\", career);\n        sessionStorage.setItem(\"url\", url);\n        window.location.replace(\"/\");\n      })\n      .catch((err) => {\n        console.log(err);\n        Swal.fire(\"\", \"회원 정보 수정 실패\", \"error\");\n      });\n  };\n};\n\nconst logEditDB2 = (uid, nickname, career, url, userImg) => {\n  return function (dispatch, getState, { history }) {\n    const img_list = getState().user.preview;\n    const Data = new FormData();\n    Data.append(\"images\", img_list);\n    console.log(img_list);\n    axios\n      .post(`${apiUrl}/images/upload`, Data, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          Authorization: token,\n        },\n      })\n      .then((res) => {\n        console.log(\"img업로드 성공\");\n        const imgUrl = res.data.url;\n        return imgUrl;\n      })\n\n      .then((imgUrl) => {\n        axios\n          .put(\n            `${apiUrl}/islogin/user/getinfo/${uid}`,\n            {\n              nickname: nickname,\n              career: career,\n              userImage: imgUrl,\n              blogUrl: url,\n            },\n            {\n              headers: {\n                Authorization: token,\n              },\n            }\n          )\n          .then((res) => {\n            console.log(res);\n            dispatch(\n              logEdit({\n                nickname: nickname,\n                career: career,\n                userImage: userImg,\n                blogUrl: url,\n              })\n            );\n            sessionStorage.setItem(\"nickname\", nickname);\n            sessionStorage.setItem(\"career\", career);\n            sessionStorage.setItem(\"userImage\", userImg);\n            sessionStorage.setItem(\"url\", url);\n            history.push(\"/\");\n            window.location.reload();\n          });\n      })\n      .catch((err) => {\n        console.log(err);\n        Swal.fire(\"\", \"회원 정보 수정 실패\", \"error\");\n      });\n  };\n};\n\nconst NewPassWordDB = (uid, password, newPassword, newPasswordCheck) => {\n  console.log(\"간다\");\n  return function (dispatch, getState, { history }) {\n    axios\n      .put(\n        `${apiUrl}/islogin/user/password/${uid}`,\n        {\n          password: password,\n          newPassword: newPassword,\n          newPasswordCheck: newPasswordCheck,\n        },\n        {\n          headers: {\n            Authorization: token,\n          },\n        }\n      )\n      .then((res) => {\n        console.log(res.data);\n        if (res.data.result !== true) {\n          Swal.fire(\"\", \"비밀번호 수정 실패\", \"error\");\n          window.location.reload();\n        } else {\n          Swal.fire(\"\", \"비밀번호 수정 성공\", \"success\");\n          history.push(\"/\");\n          window.location.replace(\"/\");\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        Swal.fire(\"\", \"비밀번호 수정 실패\", \"error\");\n      });\n  };\n};\n\nexport default handleActions(\n  {\n    [CHECK_USERNAME]: (state, action) =>\n      produce(state, (draft) => {\n        console.log(\"CHECK_USERNAME 리듀서로 적용 완료\", state, action.payload);\n        draft.isCheckUsername = action.payload.isCheckUsername;\n        Swal.fire(\"\", \"해당 이메일은 사용 가능합니다.\", \"success\");\n      }),\n    [CHECK_NICKNAME]: (state, action) =>\n      produce(state, (draft) => {\n        console.log(\"CHECK_NICKNAME 리듀서 적용\", state, action.payload);\n        draft.isCheckNickname = action.payload.isCheckNickname;\n        Swal.fire(\"\", \"사용 가능한 닉네임입니다.\", \"success\");\n      }),\n    [LOG_IN]: (state, action) =>\n      produce(state, (draft) => {\n        draft.userinfo = action.payload.user;\n        draft.isLogin = true;\n      }),\n    [USER_EDUT]: (state, action) =>\n      produce(state, (draft) => {\n        draft.userinfo = action.payload.user;\n      }),\n    [IMG_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.preview = action.payload.preview;\n      }),\n  },\n  initialState\n);\n\nconst actionCreators = {\n  signupDB,\n  checkUsernameDB,\n  checkNicknameDB,\n  loginDB,\n  logOut,\n  logEditDB,\n  logEditDB2,\n  NewPassWordDB,\n  imgPost,\n};\n\nexport { actionCreators };\n","/Users/cyj/sun/src/redux/modules/answer.js",["333"],[],"import { createAction, handleActions } from \"redux-actions\";\nimport produce from \"immer\";\nimport axios from \"axios\";\nimport { apis } from \"../../shared/api\";\nimport { apiUrl } from \"../../elements/testApiUrl\";\n\nconst GET_ANSWER = \"GET_ANSWER\";\nconst ADD_ANSWER = \"ADD_ANSWER\";\nconst EDIT_ANSWER = \"EDIT_ANSWER\";\nconst DEL_ANSWER = \"DEL_ANSWER\";\nconst LIKE_ANSWER = \"LIKE_ANSWER\";\nconst AS_IMG_POST = \"AS_IMG_POST\";\n\nconst getAnswer = createAction(GET_ANSWER, (list) => ({ list }));\nconst addAnswer = createAction(ADD_ANSWER, (list) => ({ list }));\nconst editAnswer = createAction(EDIT_ANSWER, (list) => ({ list }));\nconst likeAnswer = createAction(LIKE_ANSWER, (list) => ({ list }));\nconst delAnswer = createAction(DEL_ANSWER, (list) => ({ list }));\nconst asImgPost = createAction(AS_IMG_POST, (asPreview) => ({ asPreview }));\n\nconst initialState = {\n  list: [],\n  editList: [],\n  asPreview: \"\",\n  status: false,\n};\n\nconst getAnswerDB = (pid) => {\n  return function (dispatch, getState, { history }) {\n    apis\n      .getanswer(pid)\n      .then((res) => {\n        dispatch(getAnswer(res.data));\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n\nconst addAnswerDB = ({ pid, uid, answerTitle, answerComment }) => {\n  return function (dispatch, getState, { history }) {\n    const token_res = sessionStorage.getItem(\"token\");\n    const img_list = getState().answer.asPreview;\n    const formData = new FormData();\n    formData.append(\"images\", img_list);\n\n    if (!img_list) {\n      axios({\n        method: \"post\",\n        url: `${apiUrl}/islogin/answer/${pid}`,\n        data: {\n          pid: pid,\n          uid: uid,\n          answerTitle: answerTitle,\n          answerComment: answerComment,\n          answerImg: null,\n        },\n        headers: { Authorization: token_res },\n      }).then((res) => {\n        dispatch(\n          addAnswer({\n            pid,\n            uid,\n            answerTitle: answerTitle,\n            answerComment: answerComment,\n            answerImg: null,\n            answerId: res.data,\n            answerLike: false,\n            blogUrl: null,\n            career: null,\n            commnetResponseDtoList: [],\n            createdAt: \"\",\n            nickname: \"\",\n            userImage: null,\n          })\n        );\n      });\n    } else {\n      axios\n        .post(`${apiUrl}/images/upload`, formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\",\n            Authorization: `${token_res}`,\n          },\n        })\n        .then((res) => {\n          console.log(\"img업로드 성공\");\n          const imgUrl = res.data.url;\n          return imgUrl;\n        })\n        .then((imgUrl) => {\n          console.log(\"img업로드 성공\");\n          axios({\n            method: \"post\",\n            url: `${apiUrl}/islogin/answer/${pid}`,\n            data: {\n              pid: pid,\n              uid: uid,\n              answerTitle: answerTitle,\n              answerComment: answerComment,\n              answerImg: imgUrl,\n            },\n            headers: { Authorization: token_res },\n          }).then((res) => {\n            dispatch(\n              addAnswer({\n                pid,\n                uid,\n                answerTitle: answerTitle,\n                answerComment: answerComment,\n                answerImg: imgUrl,\n                answerId: res.data,\n                answerLike: false,\n                blogUrl: null,\n                career: null,\n                commnetResponseDtoList: [],\n                createdAt: \"\",\n                nickname: \"\",\n                userImage: null,\n              })\n            );\n          });\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n};\n\nconst editAnswerDB = (props) => {\n  return function (dispatch, getState, { history }) {\n    const {\n      uid,\n      pid,\n      answerId,\n      answerUid,\n      userImage,\n      answerComment,\n      answerImg,\n      answerTitle,\n      blogUrl,\n      nickname,\n      createdAt,\n      career,\n      commnetResponseDtoList,\n    } = props;\n\n    const token_res = sessionStorage.getItem(\"token\");\n    const img_list = getState().answer.asPreview;\n    const formData = new FormData();\n    formData.append(\"images\", img_list);\n\n    if (!img_list) {\n      axios({\n        method: \"put\",\n        url: `${apiUrl}/islogin/answer/revice/${answerId}`,\n        data: {\n          answerTitle: answerTitle,\n          answerComment: answerComment,\n          answerImg: answerImg,\n        },\n        headers: { Authorization: token_res },\n      }).then((res) => {\n        const list = {\n          uid,\n          pid,\n          answerId,\n          answerUid,\n          userImage,\n          answerComment,\n          answerImg,\n          answerTitle,\n          blogUrl,\n          nickname,\n          createdAt,\n          career,\n          commnetResponseDtoList,\n        };\n        const _answer_list = getState().answer.list;\n        const answer_list = _answer_list.map((v) =>\n          v.answerId === answerId ? list : v\n        );\n\n        dispatch(editAnswer(answer_list));\n        // window.location.replace(`/detail/${pid}`);\n      });\n    } else {\n      axios\n        .post(`${apiUrl}/images/upload`, formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\",\n            Authorization: `${token_res}`,\n          },\n        })\n        .then((res) => {\n          const imgUrl = res.data.url;\n          return imgUrl;\n        })\n        .then((imgUrl) => {\n          console.log(\"img업로드 성공\");\n          console.log(imgUrl);\n          axios({\n            method: \"put\",\n            url: `${apiUrl}/islogin/answer/revice/${answerId}`,\n            data: {\n              answerTitle: answerTitle,\n              answerComment: answerComment,\n              answerImg: imgUrl,\n            },\n            headers: { Authorization: token_res },\n          }).then((res) => {\n            const list = {\n              uid,\n              pid,\n              answerId,\n              answerUid,\n              userImage,\n              answerComment,\n              answerImg: imgUrl,\n              answerTitle,\n              blogUrl,\n              nickname,\n              createdAt,\n              career,\n              commnetResponseDtoList,\n            };\n            const _answer_list = getState().answer.list;\n            const answer_list = _answer_list.map((v) =>\n              v.answerId === answerId ? list : v\n            );\n\n            dispatch(editAnswer(answer_list));\n            // window.location.replace(`/detail/${pid}`);\n          });\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n};\n\nconst delAnswerDB = (answsrId) => {\n  return function (dispatch, getState, { history }) {\n    apis\n      .delanswer(answsrId)\n      .then(() => {\n        const _answer_list = getState().answer.list;\n        const answer_list = _answer_list.filter((v) => v.answerId !== answsrId);\n        dispatch(delAnswer(answer_list));\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n\nconst chooseAnswerDB = (props) => {\n  return function (dispatch, getState) {\n    console.log(props);\n\n    const {\n      uid,\n      pid,\n      answerId,\n      answerUid,\n      userImage,\n      answerComment,\n      answerImg,\n      answerTitle,\n      blogUrl,\n      nickname,\n      createdAt,\n      career,\n      commnetResponseDtoList,\n      status,\n    } = props;\n\n    apis\n      .chooseAnswer(uid, pid, answerId, answerUid)\n      .then((res) => {\n        const status = res.data.status;\n        const list = {\n          uid,\n          pid,\n          answerId,\n          answerUid,\n          userImage,\n          answerComment,\n          answerImg,\n          answerTitle,\n          blogUrl,\n          nickname,\n          createdAt,\n          career,\n          commnetResponseDtoList,\n          status: status,\n        };\n\n        const _answer_list = getState().answer.list;\n        const answer_list = _answer_list.map((v) =>\n          v.answerId === answerId ? list : v\n        );\n\n        dispatch(likeAnswer(answer_list));\n        // window.location.replace(`/detail/${pid}`);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n\nexport default handleActions(\n  {\n    [GET_ANSWER]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list = action.payload.list;\n      }),\n    [ADD_ANSWER]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list.unshift(action.payload.list);\n        draft.asPreview = \"\";\n      }),\n    [EDIT_ANSWER]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list = action.payload.list;\n        draft.asPreview = \"\";\n      }),\n    [DEL_ANSWER]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list = action.payload.list;\n      }),\n    [LIKE_ANSWER]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list = action.payload.list;\n      }),\n    [AS_IMG_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.asPreview = action.payload.asPreview;\n      }),\n  },\n  initialState\n);\n\nconst actionCreators = {\n  getAnswerDB,\n  addAnswerDB,\n  editAnswerDB,\n  delAnswerDB,\n  chooseAnswerDB,\n  asImgPost,\n};\n\nexport { actionCreators };\n","/Users/cyj/sun/src/redux/modules/comment.js",["334"],[],"import React from \"react\";\nimport axios from \"axios\";\nimport Swal from \"sweetalert2\";\nimport { createAction, handleActions } from \"redux-actions\";\nimport produce from \"immer\";\nimport { apiUrl } from \"../../elements/testApiUrl\";\n\nconst token = sessionStorage.getItem(\"token\");\n\nconst COMMENT_ADD = \"COMMENT_ADD\";\nconst COMMENT_DELETE = \"COMMENT_DELETE\";\n\nconst addComment = createAction(COMMENT_ADD, (comment) => ({ comment }));\nconst deleteComment = createAction(COMMENT_DELETE, (comment) => ({ comment }));\n\nconst initialState = {\n  list: [],\n};\n\nconst addCommentDB = (uid, pid, answerId, comment) => {\n  return function (dispatch, getState, { history }) {\n    console.log(uid, pid, answerId, comment);\n    axios\n      .post(\n        `${apiUrl}/islogin/comment/write`,\n        {\n          uid: uid,\n          pid: pid,\n          answerId: answerId,\n          comment: comment,\n        },\n        {\n          headers: {\n            Authorization: token,\n          },\n        }\n      )\n      .then((res) => {\n        console.log(res);\n        dispatch(addComment(res));\n        window.location.reload();\n      })\n      .catch((err) => {\n        console.log(err);\n        Swal.fire(\"\", \"댓글 추가 실패\", \"error\");\n      });\n  };\n};\n\nconst editCommentDB = (commentId, comment, pid) => {\n  console.log(commentId, comment);\n  return function (dispatch, getState, { history }) {\n    axios\n      .put(\n        `${apiUrl}/islogin/comment/revice/${commentId}`,\n        {\n          comment: comment,\n        },\n        {\n          headers: {\n            Authorization: token,\n          },\n        }\n      )\n      .then((res) => {\n        console.log(res);\n        window.location.replace(`/detail/${pid}`);\n      })\n      .catch((err) => {\n        console.log(err);\n        Swal.fire(\"\", \"댓글 수정 실패\", \"error\");\n      });\n  };\n};\n\nconst deleteCommentDB = (commentId) => {\n  return function (dispatch, getState, { history }) {\n    console.log(commentId);\n    axios\n      .delete(`${apiUrl}/islogin/comment/delete/${commentId}`, {\n        headers: {\n          Authorization: token,\n        },\n      })\n      .then((res) => {\n        console.log(res);\n        dispatch(deleteComment(commentId));\n        window.location.reload();\n      })\n      .catch((err) => {\n        console.log(err);\n        Swal.fire(\"\", \"댓글 삭제 실패\", \"error\");\n      });\n  };\n};\n\nexport default handleActions(\n  {\n    [COMMENT_ADD]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list.push(action.payload);\n      }),\n    [COMMENT_DELETE]: (state, action) => produce(state, (draft) => {}),\n  },\n  initialState\n);\n\nconst actionCreators = {\n  addComment,\n  deleteComment,\n  addCommentDB,\n  editCommentDB,\n  deleteCommentDB,\n};\n\nexport { actionCreators };\n","/Users/cyj/sun/src/redux/modules/ranking.js",[],[],"/Users/cyj/sun/src/components/Signup.js",["335"],[],"import React from \"react\";\nimport styled from \"styled-components\";\nimport { useDispatch } from \"react-redux\";\nimport img_down from \"../svg/arrow_down_b.svg\";\nimport { actionCreators as userActions } from \"../redux/modules/user\";\nimport Swal from \"sweetalert2\";\n\nfunction Signup(props) {\n  const dispatch = useDispatch();\n  const [username, setUsername] = React.useState(\"\");\n  const [nickname, setNickname] = React.useState(\"\");\n  const [password, setPassword] = React.useState(\"\");\n  const [checkPassword, setCheckPassword] = React.useState(\"\");\n  const [career, setCareer] = React.useState(\"경력\");\n  const [careerSelect, setCareerSelect] = React.useState(\"\");\n\n  ////유효성 검사\n  const [idRuleCheck, setIdRuleCheck] = React.useState(false);\n  const [passwordRuleCheck, setPasswordRuleCheck] = React.useState(false);\n  const [nicknameRuleCheck, setNicknameRuleCheck] = React.useState(false);\n\n  //////중복 체크\n  const [isCheckUsername, setIsCheckUsername] = React.useState(false);\n  const [isCheckNickname, setIsCheckNickname] = React.useState(false);\n\n  ///경력 리스트\n  const options = [\n    { value: \"1년차 이내\", name: \"1년차 이내\" },\n    { value: \"1~2년차\", name: \"1~2년차\" },\n    { value: \"3~4년차\", name: \"3~4년차\" },\n    { value: \"5년차 이상\", name: \"5년차 이상\" },\n  ];\n\n  /////////////////////////////////경고 문구\n  const idRule = (e) => {\n    const rule =\n      /^(((?=.*\\d)(?=.*[a-zA-Z])[0-9a-zA-Z]{4,10})|([A-Za-z]{4,10}))$/;\n    const id = e.target.value;\n    setUsername(id);\n    rule.test(id) ? setIdRuleCheck(true) : setIdRuleCheck(false);\n  };\n\n  const nicknameRule = (e) => {\n    const rule = /^[ㄱ-ㅎ|ㅏ-ㅣ|가-힣A-Za-z0-9]{2,8}$/;\n    const nick = e.target.value;\n    setNickname(nick);\n    rule.test(nick) ? setNicknameRuleCheck(true) : setNicknameRuleCheck(false);\n  };\n\n  const passwordRule = (e) => {\n    const rule = /^(?=.*\\d)(?=.*[a-zA-Z])[0-9a-zA-Z]{4,10}$/;\n    const password = e.target.value;\n    setPassword(password);\n    rule.test(password)\n      ? setPasswordRuleCheck(true)\n      : setPasswordRuleCheck(false);\n  };\n\n  ///////////////////////////////////// 중복체크\n\n  const checkUsername = () => {\n    if (username === \"\") {\n      Swal.fire(\"\", \"아이디를 입력해 주세요.\", \"error\");\n      return;\n    } else if (idRuleCheck === false) {\n      Swal.fire(\"\", \"아이디 형식이 맞지않습니다.\", \"error\");\n      return;\n    }\n    console.log(username, \"중복요청\");\n    dispatch(userActions.checkUsernameDB(username, false));\n    setIsCheckUsername(true);\n  };\n\n  const checkNickname = () => {\n    if (nickname === \"\") {\n      Swal.fire(\"\", \"닉네임이 공란입니다.\", \"error\");\n      return;\n    } else if (nicknameRuleCheck === false) {\n      Swal.fire(\"\", \"닉네임 형식이 맞지않습니다.\", \"error\");\n      return;\n    }\n    console.log(nickname, \"의 중복확인 요청을 dispatch 했습니다.\");\n    dispatch(userActions.checkNicknameDB(nickname, false));\n    setIsCheckNickname(true);\n  };\n\n  ///////////////////////회원가입\n  const signup = (e) => {\n    e.preventDefault();\n\n    setIsCheckNickname(true);\n    setIsCheckUsername(true);\n    console.log(isCheckUsername, isCheckNickname);\n    if (username === \"\" || nickname === \"\" || password === \"\") {\n      Swal.fire(\"\", \"빈칸을 채워주세요.\", \"error\");\n      return;\n    } else if (passwordRuleCheck !== true) {\n      Swal.fire(\"\", \"패스워드 형식이 맞지 않습니다.\", \"error\");\n      return;\n    } else if (password !== checkPassword) {\n      Swal.fire(\"\", \"패스워드가 다릅니다.\", \"error\");\n      return;\n    } else if (isCheckUsername === false || isCheckNickname === false) {\n      Swal.fire(\"\", \"중복확인을 해주세요.\", \"error\");\n      return;\n    } else if (career === \"경력\") {\n      Swal.fire(\"\", \"경력을 선택해 주세요.\", \"error\");\n      return;\n    }\n    dispatch(\n      userActions.signupDB(username, nickname, password, checkPassword, career)\n    );\n    setIsCheckUsername(false);\n    setIsCheckNickname(false);\n  };\n  return (\n    <Container>\n      <div>\n        <div>\n          <span className='inputSpan'>아이디</span>\n          <input\n            type='text'\n            placeholder='영문과 숫자를 4자 이상 10글자 이내 입력하세요.'\n            onChange={idRule}\n          />\n          <button className='CheckButton' onClick={checkUsername}>\n            중복체크\n          </button>\n        </div>\n        {username.length > 0 && !idRuleCheck && (\n          <span className='rule'> *아이디 형식이 맞지 않습니다. </span>\n        )}\n      </div>\n\n      <div>\n        <div>\n          <span style={{ width: \"58px\" }} className='inputSpan'>\n            비밀번호\n          </span>\n          <input\n            type='password'\n            placeholder='password'\n            onChange={passwordRule}\n          />\n        </div>\n        {password.length > 0 && !passwordRuleCheck && (\n          <span className='rule'> *영문 숫자 조합 4자 이상 입력해주세요. </span>\n        )}\n      </div>\n\n      <div>\n        <div>\n          <span style={{ width: \"100px\" }} className='inputSpan'>\n            비밀번호 확인\n          </span>\n          <input\n            type='password'\n            onChange={(e) => {\n              setCheckPassword(e.target.value);\n            }}\n          />\n        </div>{\" \"}\n        {checkPassword !== password && (\n          <span className='rule'> *일치하지않는 비밀번호입니다. </span>\n        )}\n      </div>\n\n      <div>\n        <div>\n          <span className='inputSpan'>닉네임</span>\n          <input type='text' placeholder='Nickname' onChange={nicknameRule} />\n          <button className='CheckButton' onClick={checkNickname}>\n            중복체크\n          </button>\n        </div>\n        {nickname.length > 0 && !nicknameRuleCheck && (\n          <span className='rule'> *닉네임 형식이 맞지 않습니다. </span>\n        )}\n      </div>\n\n      <Career>\n        <div>\n          <span onClick={() => setCareerSelect(!careerSelect)}>{career}</span>\n          {careerSelect === true ? (\n            <ul>\n              {options.map((v, idx) => (\n                <li\n                  key={idx}\n                  onClick={() => {\n                    setCareer(v.name);\n                    setCareerSelect(false);\n                  }}>\n                  {v.name}\n                </li>\n              ))}\n            </ul>\n          ) : null}\n        </div>\n        <img\n          onClick={() => setCareerSelect(!careerSelect)}\n          src={img_down}></img>\n        {career === \"경력\" && (\n          <span className='rule'> *경력을 선택해주세요 </span>\n        )}\n      </Career>\n      <div>\n        <button className='SignupButtom' onClick={signup}>\n          회원가입\n        </button>\n      </div>\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  width: 500px;\n  height: 472px;\n  margin: 0 auto;\n  text-align: center;\n  justify-content: space-between;\n  display: flex;\n  flex-direction: column;\n  div {\n    width: 100%;\n    height: 72px;\n    display: flex;\n    flex-direction: column-reverse;\n    > span.rule {\n      color: red;\n      font-size: 12px;\n      position: absolute;\n      justify-content: start;\n      padding-left: 15px;\n    }\n    > div {\n      width: 100%;\n      height: 72px;\n      display: flex;\n      flex-direction: row;\n      position: relative;\n      justify-content: end;\n      align-items: center;\n      background-color: #f9f8ff;\n      border-radius: 0.5rem;\n      padding: 15px;\n      > span.inputSpan {\n        color: #7966ff;\n        font-size: 16px;\n        font-weight: 800;\n      }\n    }\n  }\n  input {\n    width: 90%;\n    height: 32px;\n    border: 0px solid black;\n    font-size: 16px;\n  }\n  button.CheckButton {\n    width: 76px;\n    height: 32px;\n    background-color: #7966ff;\n    color: white;\n    border-radius: 32px;\n    position: absolute;\n  }\n  button.SignupButtom {\n    width: 100%;\n    height: 72px;\n    background-color: #5e45f2;\n    color: white;\n    border-radius: 0.5rem;\n  }\n`;\nconst Career = styled.div`\n  width: 500px;\n  display: flex;\n  position: relative;\n  justify-content: end;\n\n  div {\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    > span {\n      width: 100%;\n      height: 72px;\n      line-height: 72px;\n      padding-left: 5px;\n      border-radius: 8px;\n      background-color: #f9f8ff;\n      cursor: pointer;\n      color: #7966ff;\n      font-size: 16px;\n      font-weight: 800;\n      text-align: start;\n    }\n    > ul {\n      width: 100%;\n      height: 72px;\n      border-radius: 0.5rem;\n      border: 0px;\n      position: absolute;\n      margin-top: 150px;\n      > li {\n        display: flex;\n        width: 100%;\n        height: 72px;\n        margin-left: 15px;\n        font-size: 16px;\n        font-weight: 600;\n        padding-left: 10px;\n        background-color: #f9f8ff;\n        align-items: center;\n        justify-content: start;\n        cursor: pointer;\n        &:hover {\n          background-color: #5e45f2;\n          color: #f9f8ff;\n        }\n      }\n    }\n  }\n  > img {\n    width: 30px;\n    height: 30px;\n    display: flex;\n    position: absolute;\n    margin: 0 0 20px 450px;\n    cursor: pointer;\n  }\n`;\nexport default Signup;\n","/Users/cyj/sun/src/components/AnswerList.js",["336","337","338","339","340","341","342"],[],"import React from \"react\";\nimport styled from \"styled-components\";\nimport { useParams } from \"react-router\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { actionCreators as answerActions } from \"../redux/modules/answer\";\nimport { actionCreators as commentActions } from \"../redux/modules/comment\";\nimport Comment from \"./Comment\";\nimport Answer from \"./Answer\";\nimport Profile from \"../elements/Profile\";\nimport Swal from \"sweetalert2\";\nimport RoundBtn from \"../elements/RoundBtn\";\n\nconst AnswerList = ({ isWriter }) => {\n  const pid = useParams().pid;\n  const dispatch = useDispatch();\n  const list = useSelector((state) => state.answer.list);\n  const user_info = sessionStorage.getItem(\"uid\");\n  const [isEdit, setIsEdit] = React.useState(null);\n  const [isCommentEdit, setIsCommentEdit] = React.useState(false);\n  const [comment, setComment] = React.useState(\"\");\n  const [commentView, setCommentView] = React.useState(\"\");\n  const [commentViewSelect, setCommentViewSelect] = React.useState(false);\n  const [commentId, setCommentId] = React.useState(0);\n  const isChoose = list?.find((v) => v.status === \"true\");\n\n  React.useEffect(() => {\n    if (list.length <= 1) {\n      return;\n    }\n    dispatch(answerActions.getAnswerDB(pid));\n  }, []);\n\n  const chooseAnswer = (choose_list) => {\n    if (!isChoose) {\n      Swal.fire({\n        title: \"답변을 채택하시겠습니까?\",\n        text: \"한번 채택한 답변은 취소 할 수 없습니다\",\n        icon: \"warning\",\n        showCancelButton: true,\n        confirmButtonText: \"네 채택하겠습니다.\",\n        confirmButtonColor: \"#7966FF\",\n        cancelButtonText: \"아니오\",\n      }).then((result) => {\n        if (result.isConfirmed) {\n          Swal.fire(\"\", \"답변이 채택 되었습니다.\", \"success\");\n          dispatch(\n            answerActions.chooseAnswerDB({\n              ...choose_list,\n              answerUid: choose_list.uid,\n            })\n          );\n        } else if (result.dismiss === Swal.DismissReason.cancel) {\n          Swal.fire(\"\", \"채택이 취소 되었습니다 :)\", \"error\");\n        }\n      });\n    } else {\n      Swal.fire({\n        title: \"\",\n        text: \"채택 된 답변이 존재합니다. :)\",\n        icon: \"warning\",\n        confirmButtonText: \"확인\",\n        confirmButtonColor: \"#7966FF\",\n      });\n    }\n  };\n\n  const deleAnswer = (answerId) => {\n    Swal.fire({\n      title: \"답변을 삭제하시겠습니까?\",\n      text: \"삭제 된 답변은 복구 할 수 없습니다\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: \"네 삭제하겠습니다.\",\n      confirmButtonColor: \"#7966FF\",\n      cancelButtonText: \"아니오\",\n    }).then((result) => {\n      if (result.isConfirmed) {\n        Swal.fire(\"\", \"답변이 삭제 되었습니다.\", \"success\");\n        dispatch(answerActions.delAnswerDB(answerId));\n      } else if (result.dismiss === Swal.DismissReason.cancel) {\n        Swal.fire(\"\", \"취소 되었습니다 :)\", \"error\");\n      }\n    });\n  };\n\n  const commentViewList = (pid) => {\n    setCommentView(pid);\n    if (commentView === \"\") {\n      setCommentViewSelect(!commentViewSelect);\n    } else if (commentView === pid) {\n      setCommentViewSelect(!commentViewSelect);\n    } else if (commentView !== pid) {\n      setCommentViewSelect(\"true\");\n    }\n  };\n\n  const setCommentEdit = (commentId) => {\n    setCommentId(commentId);\n  };\n\n  const commentChange = (e) => {\n    setComment(e.target.value);\n  };\n\n  const commentEdit = (e) => {\n    const commentEditId = e.target.value;\n    Swal.fire({\n      title: \"댓글을 수정하시겠습니까?\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: \"네\",\n      confirmButtonColor: \"#7966FF\",\n      cancelButtonText: \"아니오\",\n      Buttons: true,\n    }).then((result) => {\n      if (result.isConfirmed) {\n        dispatch(commentActions.editCommentDB(commentEditId, comment, pid));\n      } else {\n        return;\n      }\n    });\n  };\n\n  const commentDelete = (e) => {\n    Swal.fire({\n      title: \"댓글을 삭제하시겠습니까?\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: \"네\",\n      confirmButtonColor: \"#7966FF\",\n      cancelButtonText: \"아니오\",\n      Buttons: true,\n    }).then((result) => {\n      if (result.isConfirmed) {\n        dispatch(commentActions.deleteCommentDB(e.target.value));\n      } else {\n        return;\n      }\n    });\n  };\n\n  return (\n    <SC_List>\n      {list.map((v, idx) => {\n        const comment_count = Object.keys(v.commnetResponseDtoList).length;\n        console.log(v);\n        return (\n          <React.Fragment key={idx}>\n            <div>\n              <div className='answer_wrap'>\n                <div className='answer_box'>\n                  <div className='header'>\n                    <Profile size='48' imgUrl={v.userImage} />\n                    <span>{v.nickname}</span>\n                  </div>\n                  <div className='content'>\n                    <div>{v.answerTitle}</div>\n                    <p>{v.answerComment}</p>\n                    <div>\n                      <img src={v.answerImg} />\n                    </div>\n                  </div>\n\n                  <div className='btn_wrap'>\n                    <span onClick={() => commentViewList(v.answerId)}>\n                      댓글 {comment_count}\n                    </span>\n                    {/* 채택 하기 , 수적 삭제, 채택된 상태 */}\n                    {v.status === \"true\" ? (\n                      <button className='choose'>채택</button>\n                    ) : Number(user_info) === Number(v.uid) ? (\n                      <>\n                        <button\n                          onClick={() => {\n                            deleAnswer(v.answerId);\n                          }}>\n                          삭제\n                        </button>\n                        <button\n                          className='edit_btn'\n                          onClick={() => {\n                            setIsEdit(v.answerId);\n                          }}>\n                          수정\n                        </button>\n                      </>\n                    ) : (\n                      Number(user_info) === Number(isWriter) &&\n                      Number(isWriter) !== Number(v.uid) && (\n                        <RoundBtn\n                          isLine\n                          title='\n                            채택\n                            '\n                          onClick={() => {\n                            chooseAnswer(v);\n                          }}\n                        />\n                      )\n                    )}\n                  </div>\n                </div>\n                <div className='comment_box'>\n                  <SC_Commentbox className='comment'>\n                    <Comment list={v} />\n                  </SC_Commentbox>\n                </div>\n              </div>\n\n              <SC_CommentList className='comment_wrap'>\n                {v.commnetResponseDtoList.map((list, idx) => {\n                  return (\n                    <div key={idx}>\n                      {commentViewSelect && commentView === list.answerId && (\n                        <>\n                          {user_info == list.uid && (\n                            <>\n                              {isCommentEdit && list.commentId === commentId ? (\n                                <div>\n                                  <div className='mycomment'>\n                                    <div>\n                                      <Profile\n                                        size={24}\n                                        imgUrl={list.userImage}\n                                      />\n                                      <strong>{list.nickname}</strong>\n                                    </div>\n                                    <div className='button'>\n                                      <button\n                                        className='comment'\n                                        onClick={commentEdit}\n                                        value={list.commentId}>\n                                        수정완료\n                                      </button>\n                                    </div>\n                                  </div>\n                                  <p>\n                                    <textarea\n                                      type='text'\n                                      onChange={commentChange}>\n                                      {list.comment}\n                                    </textarea>\n                                  </p>\n                                  <p> {list.createdAt?.split(\"T\")[0]}</p>\n                                </div>\n                              ) : (\n                                <div>\n                                  <div className='mycomment'>\n                                    <div>\n                                      <Profile\n                                        size={24}\n                                        imgUrl={list.userImage}\n                                      />\n                                      <strong>{list.nickname}</strong>\n                                    </div>\n                                    <div className='button'>\n                                      <button\n                                        className='comment'\n                                        onClick={() => {\n                                          setCommentEdit(list.commentId);\n                                          setIsCommentEdit(!isCommentEdit);\n                                        }}>\n                                        수정\n                                      </button>\n                                      <button\n                                        className='comment'\n                                        onClick={commentDelete}\n                                        value={list.commentId}>\n                                        삭제\n                                      </button>\n                                    </div>\n                                  </div>\n                                  <p className='comment'>{list.comment}</p>\n                                  <p> {list.createdAt?.split(\"T\")[0]}</p>\n                                </div>\n                              )}\n                            </>\n                          )}\n                          {list.uid != user_info && (\n                            <div>\n                              <div>\n                                <div className='comment'>\n                                  <Profile size={24} imgUrl={list.userImage} />\n                                  <strong>{list.nickname}</strong>\n                                </div>\n                                <p className='comment'>{list.comment}</p>\n                                <p> {list.createdAt?.split(\"T\")[0]}</p>\n                              </div>\n                            </div>\n                          )}\n                        </>\n                      )}\n                    </div>\n                  );\n                })}\n              </SC_CommentList>\n\n              {isEdit === v.answerId && (\n                <Answer close={setIsEdit} isEdit={true} list={v} />\n              )}\n            </div>\n          </React.Fragment>\n        );\n      })}\n    </SC_List>\n  );\n};\n\nconst SC_List = styled.div`\n  .answer_wrap {\n    padding: 24px;\n    box-shadow: 0 4px 20px 0 rgba(228, 226, 242, 0.45);\n    border-radius: 8px;\n    overflow: hidden;\n    margin-bottom: 24px;\n  }\n\n  h2 {\n    margin: 0;\n  }\n\n  .comment_box {\n    border-radius: 8px;\n  }\n\n  .header {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n\n    button {\n      margin-left: auto;\n    }\n\n    span {\n      font-size: 18px;\n    }\n  }\n\n  .content {\n    padding: 24px 0;\n\n    > div {\n      font-size: 20px;\n      font-weight: 700;\n    }\n\n    > *:not(style) {\n      margin-bottom: 10px;\n    }\n  }\n\n  .btn_wrap {\n    display: flex;\n    padding-bottom: 16px;\n\n    span {\n      margin-right: auto;\n    }\n\n    button {\n      color: #7966ff;\n      font-size: 16px;\n\n      &.choose {\n        width: 94px;\n        height: 40px;\n        background-color: #ffd703;\n        color: #fff;\n        border-radius: 40px;\n        cursor: default;\n      }\n    }\n\n    .edit_btn:before {\n      content: \"\";\n      margin: 0 12px;\n      border-left: solid 1px #7966ff;\n    }\n  }\n`;\n\nconst SC_Commentbox = styled.div`\n  padding-top: 24px;\n  border-top: solid 1px #dadada;\n`;\n\nconst SC_CommentList = styled.div`\n  --gray-color: #c4c4c4;\n\n  > div {\n    display: flex;\n    padding: 18px 24px;\n    border-bottom: solid 1px #dadada;\n    color: var(--gray-color);\n    flex-direction: column;\n    justify-content: space-between;\n\n    &:last-child {\n      border-bottom: none;\n    }\n  }\n\n  p {\n    flex: auto;\n    margin: 3px;\n\n    > textarea {\n      width: 1000px;\n      height: 100px;\n    }\n  }\n\n  p.comment {\n    flex: auto;\n    margin: 3px;\n    height: 2rem;\n    width: 100%;\n    height: 100%;\n    color: #797979;\n\n    > textarea {\n      width: 100%;\n      height: 100%;\n    }\n  }\n\n  strong {\n    color: #333;\n    font-weight: normal;\n    margin-left: 8px;\n  }\n\n  em {\n    font-style: normal;\n    padding-left: 16px;\n    margin-left: 16px;\n    border-left: solid 1px var(--gray-color);\n  }\n  div.mycomment {\n    display: flex;\n    justify-content: space-between;\n    > div {\n      display: flex;\n      align-items: center;\n      line-height: 1rem;\n    }\n    > div.button {\n      width: 60px;\n      justify-content: space-between;\n    }\n  }\n  div.comment {\n    display: flex;\n    align-items: center;\n  }\n  button {\n    color: var(--gray-color);\n    font-size: 1rem;\n  }\n`;\n\nexport default AnswerList;\n","/Users/cyj/sun/src/components/Answer.js",["343","344","345","346","347","348"],[],"import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { useParams } from \"react-router\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport ImgUpload from \"./ImgUpload\";\n\nimport { actionCreators as answerActions } from \"../redux/modules/answer\";\nimport RoundBtn from \"../elements/RoundBtn\";\n\nconst Answer = ({ close = null, isEdit = null, list = null }) => {\n  const dispatch = useDispatch();\n  const params = useParams().pid;\n  const user_info = sessionStorage.getItem(\"uid\");\n  const nickname = sessionStorage.getItem(\"nickname\");\n  const [addAnswer, setAddAnswer] = React.useState(\n    isEdit ? list : { answerTitle: \"\", answerComment: \"\" }\n  );\n  const { answerTitle, answerComment } = addAnswer;\n\n  const onChange = (e) => {\n    const id = e.target.id;\n    const content = e.target.value;\n\n    setAddAnswer({ ...addAnswer, [id]: content });\n  };\n\n  const answerSubmit = () => {\n    dispatch(\n      answerActions.addAnswerDB({ pid: params, uid: user_info, ...addAnswer })\n    );\n    setAddAnswer({ answerTitle: \"\", answerComment: \"\" });\n  };\n\n  const editAnswer = () => {\n    dispatch(\n      answerActions.editAnswerDB({\n        ...addAnswer,\n      })\n    );\n    close(list.pid);\n  };\n\n  if (isEdit) {\n    return (\n      <SC_Answer>\n        <SC_InputWrap>\n          <h5>답변 수정하기</h5>\n          <input\n            id='answerTitle'\n            onChange={onChange}\n            type='text'\n            value={answerTitle}\n          />\n          <textarea\n            id='answerComment'\n            onChange={onChange}\n            type='text'\n            value={answerComment}></textarea>\n        </SC_InputWrap>\n        <ImgUpload isEdit={isEdit} editImg={list.answerImg} />\n        <RoundBtn onClick={editAnswer} title='수정' />\n      </SC_Answer>\n    );\n  }\n\n  return (\n    <SC_Answer>\n      <h5>답변 작성하기</h5>\n      <SC_InputWrap>\n        <input\n          id='answerTitle'\n          value={answerTitle}\n          onChange={onChange}\n          type='text'\n          placeholder='답변 제목 입력 해주세요'\n        />\n        <textarea\n          id='answerComment'\n          value={answerComment}\n          onChange={onChange}\n          type='text'\n          placeholder='답변을 입력 해주세요'></textarea>\n      </SC_InputWrap>\n      <ImgUpload cleanImg={addAnswer.answerTitle} />\n      <RoundBtn onClick={answerSubmit} title='등록' />\n    </SC_Answer>\n  );\n};\n\nconst SC_InputWrap = styled.div`\n  input {\n    display: block;\n    width: 100%;\n    padding: 18px;\n    margin-bottom: 10px;\n    background-color: #f9f9f9;\n    border-radius: 8px;\n  }\n\n  textarea {\n    width: 100%;\n    height: 130px;\n    padding: 18px 20px;\n    background-color: #f9f9f9;\n    border-radius: 8px;\n  }\n`;\n\nconst SC_Answer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 24px;\n  padding: 0 24px;\n  background-color: #fff;\n  border-radius: 8px;\n  box-shadow: 0 4px 20px 0 rgba(228, 226, 242, 0.45);\n\n  h5 {\n    font-size: 20px;\n    font-weight: 700;\n    padding-top: 30px;\n    padding-bottom: 16px;\n  }\n\n  button {\n    margin: 16px 0;\n    margin-left: auto;\n  }\n`;\nexport default Answer;\n","/Users/cyj/sun/src/components/Comment.js",[],[],"/Users/cyj/sun/src/components/ImgUpload.js",["349","350"],[],"import React from \"react\";\nimport styled from \"styled-components\";\nimport { ReactComponent as ImgSvg } from \"../svg/img.svg\";\nimport { useLocation } from \"react-router\";\nimport { useDispatch } from \"react-redux\";\nimport { actionCreators as postActions } from \"../redux/modules/post\";\nimport { actionCreators as answerActions } from \"../redux/modules/answer\";\n\nconst ImgUpload = ({ isEdit = null, editImg = null, cleanImg = null }) => {\n  const dispatch = useDispatch();\n  const fileInput = React.useRef();\n  const [preImg, setPreImg] = React.useState(\"\");\n  const location = useLocation();\n  const pathName = location.pathname.indexOf(\"/detail\") >= 0;\n\n  React.useEffect(() => {\n    if (cleanImg === \"\") {\n      fileInput.current.value = \"\";\n      setPreImg(\"\");\n    }\n  }, [cleanImg]);\n\n  const onChange = (e) => {\n    const file = fileInput.current.files[0];\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onloadend = () => {\n      setPreImg(reader.result);\n    };\n\n    if (pathName) {\n      dispatch(answerActions.asImgPost(file));\n    } else {\n      dispatch(postActions.imgPost(file));\n    }\n  };\n\n  if (isEdit) {\n    return (\n      <ImgWrap className='img_load'>\n        <label htmlFor='editImg'>\n          <ImgSvg className='icon' />\n          <span>첨부하기</span>\n        </label>\n        <input onChange={onChange} id='editImg' type='file' ref={fileInput} />\n        <div className='img_box'>\n          <img src={preImg ? preImg : editImg} />\n        </div>\n      </ImgWrap>\n    );\n  }\n\n  return (\n    <ImgWrap className='img_load'>\n      <label htmlFor='img'>\n        <ImgSvg className='icon' />\n        <span>이미지 첨부하기</span>\n      </label>\n      <input onChange={onChange} id='img' type='file' ref={fileInput} />\n      {preImg && (\n        <div className='img_box'>\n          <img src={preImg} />\n        </div>\n      )}\n    </ImgWrap>\n  );\n};\n\nconst ImgWrap = styled.div`\n  display: flex;\n  gap: 24px;\n  width: 100%;\n  font-weight: 700;\n  border-bottom: solid 1px #ccc;\n\n  .img_box {\n    flex: auto;\n  }\n\n  > label {\n    flex: none;\n    display: flex;\n    align-items: center;\n    padding: 24px;\n    cursor: pointer;\n  }\n\n  input {\n    display: none !important;\n  }\n\n  svg {\n    display: inline-block;\n    fill: #797979;\n    width: 24px;\n    height: 24px;\n    margin-right: 8px;\n  }\n\n  span {\n    color: #797979;\n  }\n\n  img {\n    max-width: 100%;\n  }\n`;\n\nexport default ImgUpload;\n","/Users/cyj/sun/src/components/TableList.js",["351"],[],"import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { actionCreators as myActions } from \"../redux/modules/mypage\";\nimport styled from \"styled-components\";\nimport { history } from \"../redux/configureStore\";\n\nconst TableList = ({ currTab }) => {\n  const dispatch = useDispatch();\n  const [list, setList] = React.useState();\n  const aram_list = useSelector((state) => state.mypage.list);\n\n  React.useEffect(() => {\n    dispatch(myActions.myAlarmsDB());\n    if (currTab === \"total\") {\n      setList(\"토탈\");\n    } else if (currTab === \"answer\") {\n      setList(\"답변\");\n    } else {\n      setList(\"게시글\");\n    }\n  }, [currTab]);\n\n  const select_list = () => {\n    switch (currTab) {\n      case \"total\":\n        return aram_list;\n      case \"answer\":\n        return aram_list.filter((v) => v.type === \"AnswerCreate\");\n      case \"choose\":\n        return aram_list.filter((v) => v.type === \"AnswerChoose\");\n      default:\n        return null;\n    }\n  };\n  return (\n    <TableListUl>\n      {select_list().length === 0 && (\n        <li className='no_list'>\n          <strong>{list} 알림이 없습니다 :)</strong>\n        </li>\n      )}\n      {select_list().map((v, idx) => {\n        const date = v.createdAt?.split(\".\")[0].replace(\"T\", \" \");\n\n        return (\n          <li key={v.alarmId}>\n            <div\n              onClick={() => {\n                history.push(`detail/${v.pid}`);\n              }}>\n              <p>\"{v.postTitle}\"</p>\n              {v.type === \"AnswerCreate\" && (\n                <span>누군가 내 게시글에 답글을 남겼습니다.</span>\n              )}\n              {v.type === \"AnswerChoose\" && <span>답변이 채택되었습니다.</span>}\n              <em>{date}</em>\n            </div>\n            <button\n              onClick={() => {\n                dispatch(myActions.myAlarmsDelDB(v.alarmId));\n              }}>\n              삭제\n            </button>\n          </li>\n        );\n      })}\n    </TableListUl>\n  );\n};\n\nexport const TableListUl = styled.ul`\n  min-height: 600px;\n  .no_list {\n    line-height: 400px;\n  }\n\n  li {\n    padding: 20px 64px;\n    display: flex;\n    align-items: center;\n    text-align: center;\n    color: #676767;\n    border-bottom: solid 1px #ebebeb;\n\n    > div {\n      display: flex;\n      flex: auto;\n    }\n  }\n\n  strong {\n    display: block;\n    width: 100%;\n    text-align: center;\n    font-size: 30px;\n  }\n\n  p {\n    flex: 1;\n    text-align: left;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n\n  span {\n    flex: 1;\n    text-align: left;\n  }\n\n  em {\n    width: 20%;\n    font-size: 12px;\n    font-style: normal;\n    color: #c4c4c4;\n  }\n\n  button {\n    width: 94px;\n    height: 30px;\n    color: #fff;\n    font-size: 16px;\n    border-radius: 40px;\n    background-color: #ddd;\n  }\n`;\n\nexport default TableList;\n","/Users/cyj/sun/src/components/NoticeBoard.js",["352","353","354","355","356"],[],"import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { actionCreators as postActions } from \"../redux/modules/post\";\nimport Swal from \"sweetalert2\";\nimport styled from \"styled-components\";\nimport NoticeList from \"../elements/NoticeList\";\nimport TabMenu from \"./TabMenu\";\nimport Loader from \"./Loader\";\n\nimport { ReactComponent as WriteSvg } from \"../svg/write.svg\";\nimport { useInView } from \"react-intersection-observer\";\nimport { history } from \"../redux/configureStore\";\n\nconst NoticeBoard = () => {\n  const tab_list = [\n    {\n      title: \"nockeck\",\n      value: \"답변대기\",\n    },\n    {\n      title: \"check\",\n      value: \"답변완료\",\n    },\n  ];\n  const dispatch = useDispatch();\n  const user_info = sessionStorage.getItem(\"uid\");\n  const [TabList, setTabList] = React.useState(tab_list[0].title);\n  const [isLoaded, setIsLoaded] = React.useState(false);\n  const [pageNum, setPageNum] = React.useState(1);\n  const [pageNum1, setPageNum1] = React.useState(1);\n  const post_list = useSelector((state) => state.post.list);\n  const post_nocheck = useSelector((state) => state.post.nockeckList);\n  const postList = TabList === \"check\" ? post_list : post_nocheck;\n\n  const [ref, inView] = useInView({\n    threshold: 0.4,\n  });\n\n  React.useEffect(() => {\n    if (TabList === \"check\") {\n      dispatch(postActions.getPostDB(pageNum));\n    } else {\n      dispatch(postActions.getPostNocheckDB(pageNum1));\n    }\n  }, [TabList, pageNum, pageNum1]);\n\n  const getMoreItem = () => {\n    if (TabList === \"check\") {\n      setPageNum(pageNum + 1);\n    } else {\n      setPageNum1(pageNum1 + 1);\n    }\n  };\n\n  const goWrite = () => {\n    if (!user_info) {\n      Swal.fire(\"\", \"로그인 후 사용할 수 있습니다:)\", \"error\");\n      return;\n    }\n    history.push(\"/create\");\n  };\n\n  React.useEffect(() => {\n    if (inView) {\n      getMoreItem();\n    }\n  }, [inView]);\n\n  return (\n    <React.Fragment>\n      <SC_NoticeDiv>\n        <h2>전체 게시물</h2>\n        <TabMenu tab_list={tab_list} tab={setTabList} />\n        <div className='list_wrap'>\n          {postList.map((v, idx) => {\n            const lastEl = idx === postList.length - 1;\n            return (\n              <NoticeList key={idx} list={v} lastEl={lastEl} viewRef={ref} />\n            );\n          })}\n        </div>\n        <div className='last'>{isLoaded && <Loader />}</div>\n        <SC_BtnWrap>\n          <button onClick={goWrite}>\n            <WriteSvg />\n            글쓰기\n          </button>\n        </SC_BtnWrap>\n      </SC_NoticeDiv>\n    </React.Fragment>\n  );\n};\n\nconst SC_NoticeDiv = styled.div`\n  width: calc(100% - 342px - 24px);\n  background-color: #fff;\n  border-radius: 8px;\n\n  h2 {\n    padding: 30px 20px;\n    font-weight: 700;\n  }\n  > ul {\n    margin: 0 24px;\n  }\n`;\n\nconst SC_BtnWrap = styled.div`\n  margin: 32px 24px 48px;\n  text-align: right;\n\n  button {\n    color: #fff;\n    padding: 16px 40px;\n    border-radius: 5px;\n    background-color: #7966ff;\n\n    svg {\n      vertical-align: middle;\n      margin-right: 16px;\n    }\n  }\n`;\nexport default React.memo(NoticeBoard);\n","/Users/cyj/sun/src/components/RoundTab.js",["357"],[],"import { map } from \"bluebird\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nconst RoundTab = ({ currTab }) => {\n  const tab_list = [\n    {\n      title: \"total\",\n      value: \"전체\",\n    },\n    {\n      title: \"answer\",\n      value: \"답변\",\n    },\n    {\n      title: \"choose\",\n      value: \"채택\",\n    },\n  ];\n  const [tab, setTab] = React.useState(\"total\");\n  console.log(tab);\n\n  return (\n    <RoundTabUl>\n      {tab_list.map((v, idx) => (\n        <li\n          key={idx}\n          className={tab === v.title ? \"active\" : \"\"}\n          onClick={() => {\n            setTab(v.title);\n            currTab(v.title);\n          }}>\n          {v.value}\n        </li>\n      ))}\n    </RoundTabUl>\n  );\n};\n\nconst RoundTabUl = styled.ul`\n  --main-color: #7966ff;\n  display: flex;\n  gap: 24px;\n  margin-bottom: 32px;\n  padding: 0 24px;\n\n  li {\n    padding: 10px 32px;\n    border: solid 1px var(--main-color);\n    border-radius: 40px;\n    cursor: pointer;\n    transition: all 0.3s;\n    color: var(--main-color);\n\n    &.active {\n      color: #fff;\n      background-color: var(--main-color);\n    }\n  }\n`;\nexport default RoundTab;\n","/Users/cyj/sun/src/components/RankingOther.js",["358","359","360"],[],"import React from \"react\";\nimport styled from \"styled-components\";\nimport Swal from \"sweetalert2\";\nimport Profile from \"../elements/Profile\";\n\nconst RankingOther = ({ list, user_ranking }) => {\n  const user_info = sessionStorage.getItem(\"uid\");\n  return (\n    <SC_OtherRanking>\n      <ul>\n        {user_info && (\n          <li className='my_ranking'>\n            <i>{user_ranking.rank}</i>\n            <Profile size={70} imgUrl={user_ranking.userImage} />\n            <strong>{user_ranking.nickname}</strong>\n            {user_ranking.point && <em>{user_ranking.point} 점</em>}\n            {user_ranking.weekPoint && <em>{user_ranking.weekPoint} 점</em>}\n            {user_ranking.monthPoint && <em>{user_ranking.monthPoint} 점</em>}\n            {!user_ranking.blogUrl || user_ranking.blogUrl === \"undefined\" ? (\n              <button\n                onClick={() => {\n                  Swal.fire(\"\", \"연결 된 sns가 없습니다 :)\", \"error\");\n                }}>\n                SNS\n              </button>\n            ) : (\n              <a href={user_ranking.blogUrl} target='_blank'>\n                <button> SNS</button>\n              </a>\n            )}\n          </li>\n        )}\n        {list.map((v, idx) => (\n          <li key={idx}>\n            <i>{idx + 4}</i>\n            <Profile size={70} imgUrl={v.userImage} />\n            <strong>{v.nickname}</strong>\n            <em>{!v.point ? 0 : v.point} 점</em>\n            {!v.blogUrl || v.blogUrl === \"undefined\" ? (\n              <button\n                onClick={() => {\n                  Swal.fire(\"\", \"연결 된 sns가 없습니다 :)\", \"error\");\n                }}>\n                SNS\n              </button>\n            ) : (\n              <a href={v.blogUrl} target='_blank'>\n                <button> SNS</button>\n              </a>\n            )}\n          </li>\n        ))}\n      </ul>\n    </SC_OtherRanking>\n  );\n};\nconst SC_OtherRanking = styled.div`\n  --main-color: #7966ff;\n  .my_ranking {\n    background-color: #f9f8ff;\n    color: var(--main-color);\n    border-radius: 8px;\n    border-bottom: none;\n  }\n\n  li {\n    display: flex;\n    align-items: center;\n    padding: 0 30px;\n    height: 96px;\n    border-bottom: solid 1px #f0ecfd;\n\n    & > *:not(style) {\n      font-size: 16px;\n      font-weight: 700;\n    }\n  }\n\n  span {\n    box-shadow: 0 0 10px 0 rgba(121, 102, 255, 0.2);\n  }\n\n  i {\n    width: 57px;\n    font-style: normal;\n    padding: 10px;\n  }\n\n  strong {\n    padding: 0 10px;\n  }\n\n  em {\n    font-style: normal;\n    width: 20%;\n  }\n\n  a {\n    margin-left: auto;\n  }\n\n  button {\n    width: 103px;\n    height: 36px;\n    border-radius: 40px;\n    font-size: 14px !important;\n    margin-left: auto;\n    color: #fff;\n    background-color: var(--main-color);\n  }\n`;\n\nexport default RankingOther;\n","/Users/cyj/sun/src/components/Chat.js",["361","362","363","364","365","366","367"],[],"import React from \"react\";\nimport Stomp, { over } from \"stompjs\";\nimport SockJs from \"sockjs-client\";\nimport Profile from \"../elements/Profile\";\nimport styled from \"styled-components\";\nimport Swal from \"sweetalert2\";\nimport { ReactComponent as SendSvg } from \"../svg/send.svg\";\n\nimport { apiUrl } from \"../elements/testApiUrl\";\n\nlet stompClient = null;\nconst Chat = () => {\n  const token = {\n    Authorization: sessionStorage.getItem(\"token\")\n      ? sessionStorage.getItem(\"token\")\n      : \"Authorization\",\n  };\n  const username = sessionStorage.getItem(\"nickname\");\n\n  const uid = sessionStorage.getItem(\"uid\");\n  const is_login = sessionStorage.getItem(\"is_Login\");\n  const [welcome, setWelcome] = React.useState(new Map());\n  const [publicChats, setPublicChats] = React.useState([]);\n  const [connected, setConnected] = React.useState(false);\n  const [tab, setTab] = React.useState(\"CHATROOM\");\n  const [user, setUser] = React.useState(0);\n  const [time, setTime] = React.useState(\"\");\n  const [userData, setUserData] = React.useState({\n    username: \"\",\n    message: \"\",\n    opposingUserName: \"\",\n  });\n\n  React.useEffect(() => {\n    stompConnect();\n\n    return () => {\n      stompDisConnect();\n    };\n  }, []);\n\n  const onKeyPress = (e) => {\n    if (e.key == \"Enter\") {\n      sendPublicMessage();\n    }\n  };\n\n  const stompDisConnect = () => {\n    try {\n      const user_join = { status: \"OUT\" };\n      stompClient.send(\"/app/message\", {}, JSON.stringify(user_join));\n\n      stompClient.disconnect(() => {\n        stompClient.unsubscribe(\"/topic/greetings\");\n      }, token);\n    } catch (err) {}\n  };\n\n  const handleValue = (e) => {\n    const { value, name } = e.target;\n    setUserData({ ...userData, [name]: value });\n  };\n  const stompConnect = () => {\n    let socket = new SockJs(`${apiUrl}/ws`);\n    stompClient = Stomp.over(socket);\n\n    stompClient.connect({}, onConnected, onError);\n  };\n\n  const onConnected = () => {\n    try {\n      const username = sessionStorage.getItem(\"nickname\");\n      const crareer = sessionStorage.getItem(\"career\");\n      const userImage = sessionStorage.getItem(\"userImage\");\n      const user_join = { status: \"JOIN\", uid, pid: 0 };\n\n      setConnected(true);\n      setUserData({\n        ...userData,\n        crareer,\n        status: \"JOIN\",\n      });\n\n      stompClient.send(\"/app/hello\", {}, JSON.stringify({ username }));\n      stompClient.send(\"/app/message\", token, JSON.stringify(user_join));\n      stompClient.subscribe(\"/topic/greetings\", onPublicMessageReceived, token);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const sendPublicMessage = () => {\n    if (is_login) {\n      const username = sessionStorage.getItem(\"nickname\");\n\n      if (stompClient) {\n        if (!userData.message) {\n          Swal.fire(\"\", \"내용을 입력해주세요!\", \"error\");\n        } else {\n          let chatMessage = {\n            senderName: username,\n            message: userData.message,\n            status: \"MESSAGE\",\n            uid,\n            pid: 0,\n          };\n\n          stompClient.send(\"/app/message\", token, JSON.stringify(chatMessage));\n          setUserData({ ...userData, message: \"\" });\n        }\n      }\n    } else {\n      Swal.fire(\"\", \"로그인 후 사용할 수 있습니다:)\", \"error\");\n    }\n  };\n\n  //subscribe의 함수\n  const onPublicMessageReceived = (payload) => {\n    let payloadData = JSON.parse(payload.body);\n\n    switch (payloadData.status) {\n      case \"JOIN\":\n        if (!welcome.get(payloadData.senderName)) {\n          welcome.set(payloadData.message, []);\n          setWelcome(new Map(welcome));\n          setUser(payloadData.userCount);\n        }\n        break;\n      case \"OUT\":\n        if (!welcome.get(payloadData.senderName)) {\n          console.log(payloadData);\n          welcome.set(payloadData.message, []);\n          setWelcome(new Map(welcome));\n          setUser(payloadData.userCount);\n        }\n        break;\n      case \"MESSAGE\":\n        const time1 = payloadData.createdAt.split(\"T\")[1]; //년월 제거\n        const time2 = time1.split(\".\")[0]; // 소수점 제거\n        const time3 = time2.split(\":\")[0] + \":\" + time2.split(\":\")[1]; // 시간, 분\n        setTime(time3);\n        publicChats.push(payloadData);\n        setPublicChats([...publicChats]);\n        setUser(payloadData.userCount);\n        break;\n    }\n  };\n\n  const onError = (err) => {\n    console.log(err);\n    console.log(\"plz\");\n  };\n\n  return (\n    <ChatDiv>\n      <ChatTab>\n        <li\n          onClick={() => {\n            setTab(\"CHATROOM\");\n          }}>\n          채팅 {user}\n        </li>\n      </ChatTab>\n      <ChatList>\n        <ul>\n          {[...welcome.keys()].map((name, index) => {\n            return (\n              <li className='welcome' key={index}>\n                {name}\n              </li>\n            );\n          })}\n\n          {publicChats.map((chat, index) => (\n            <li\n              className={` ${chat.senderName === username ? \"self\" : \"user\"}`}\n              key={index}>\n              {chat.senderName !== username && (\n                <>\n                  <Profile size='32' imgUrl={userData.userImage} />\n                  <div>\n                    <strong>{chat.senderName}</strong>\n                    <i>{userData.crareer}</i>\n                  </div>\n                </>\n              )}\n              <p className='message-data'>{chat.message}</p>\n              {time.split[0] > 12 ? <em> {time}</em> : <em> {time} </em>}\n            </li>\n          ))}\n        </ul>\n      </ChatList>\n      <ChatInput>\n        <div>\n          <input\n            type='text'\n            name='message'\n            value={userData.message}\n            placeholder='채팅을 입력해주세요 :)'\n            onChange={handleValue}\n            onKeyPress={onKeyPress}\n          />\n          <button onClick={sendPublicMessage}>\n            <SendSvg />\n          </button>\n        </div>\n      </ChatInput>\n    </ChatDiv>\n  );\n};\n\nconst ChatDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 102px);\n  background-color: #f9f8ff;\n  border-radius: 8px;\n  overflow: hidden;\n`;\n\nconst ChatTab = styled.ul`\n  display: flex;\n  flex: none;\n  overflow: auto;\n\n  li {\n    padding: 0 22px;\n    margin: 0 10px;\n    font-size: 18px;\n    font-weight: 700;\n    line-height: 58px;\n    color: #5e45f2;\n    border-bottom: solid 3px #5e45f2;\n  }\n`;\n\nconst ChatList = styled.div`\n  flex: auto;\n  padding: 0 10px;\n  overflow: auto;\n\n  ul {\n    padding-top: 30px;\n    overflow: hidden;\n  }\n\n  li {\n    width: 286px;\n\n    p {\n      padding: 8px;\n      word-break: break-all;\n      border-radius: 8px;\n    }\n\n    &.welcome {\n      color: #5e45f2;\n    }\n\n    &.user {\n      position: relative;\n      padding-left: 36px;\n      padding-right: 10px;\n\n      strong {\n        font-size: 14px;\n        color: #5e45f2;\n      }\n\n      p {\n        margin-top: 8px;\n        color: #333;\n        background-color: #fff;\n        box-shadow: 0 4px 14px 0 rgba(65, 0, 131, 0.06);\n      }\n\n      em {\n        display: block;\n        text-align: right;\n      }\n    }\n\n    &.self {\n      margin: 12px 0;\n      margin-left: auto;\n\n      p {\n        color: #fff;\n        background-color: #7966ff;\n      }\n    }\n  }\n\n  span {\n    position: absolute;\n    top: 0;\n    left: 0;\n    box-shadow: 0 0 4px 0 rgba(121, 102, 255, 0.2);\n  }\n\n  i {\n    color: #797979;\n    font-size: 12px;\n    font-style: normal;\n\n    &:before {\n      --dat-size: 2px;\n      content: \".\";\n      margin: 0 6px;\n      font-size: 16px;\n      vertical-align: super;\n    }\n  }\n\n  em {\n    display: block;\n    margin-top: 10px;\n    color: #797979;\n    font-size: 12px;\n    font-style: normal;\n  }\n`;\n\nconst ChatInput = styled.div`\n  padding: 24px 16px;\n  background-color: #f9f8ff;\n  box-shadow: 0 -4px 10px 0 rgba(133, 47, 243, 0.05);\n\n  > div {\n    display: flex;\n    align-items: center;\n    height: 42px;\n    padding: 8px 14px;\n    overflow: hidden;\n    border-radius: 10px;\n    box-shadow: inset 0 2px 6px 0 rgba(60, 4, 105, 0.08);\n    background-color: #fff;\n  }\n\n  input {\n    flex: auto;\n    padding: 0;\n    background-color: transparent;\n  }\n\n  button {\n    flex: none;\n    svg {\n      vertical-align: middle;\n    }\n  }\n`;\n\nexport default Chat;\n","/Users/cyj/sun/src/components/RankingTop.js",["368","369","370"],[],"import React from \"react\";\nimport styled from \"styled-components\";\nimport Swal from \"sweetalert2\";\nimport Profile from \"../elements/Profile\";\nimport { ReactComponent as RankingTopSvg } from \"../svg/ranking_top.svg\";\n\nconst RankingTop = ({ list }) => {\n  return (\n    <SC_TopRanking>\n      <ul>\n        {list.map((v, idx) => {\n          const index = (idx) => {\n            switch (idx) {\n              case 0:\n                return \"1st\";\n              case 1:\n                return \"2nd\";\n              case 2:\n                return \"3rd\";\n            }\n          };\n          return (\n            <li key={idx} className={`ranking_${idx + 1}`}>\n              {idx === 0 && <RankingTopSvg />}\n              <Profile size={idx === 0 ? 140 : 104} imgUrl={v.userImage} />\n              <strong>{v.nickname}</strong>\n              <em>{!v.point ? 0 : v.point} 점</em>\n              {!v.blogUrl || v.blogUrl === \"undefined\" ? (\n                <button\n                  onClick={() => {\n                    Swal.fire(\"\", \"연결 된 sns가 없습니다 :)\", \"error\");\n                  }}>\n                  SNS\n                </button>\n              ) : (\n                <a href={v.blogUrl} target='_blank'>\n                  <button> SNS</button>\n                </a>\n              )}\n\n              <i>{index(idx)}</i>\n            </li>\n          );\n        })}\n      </ul>\n    </SC_TopRanking>\n  );\n};\n\nconst SC_TopRanking = styled.div`\n  --main-color: #7966ff;\n\n  padding-top: 60px;\n  padding-bottom: 62px;\n\n  ul {\n    display: grid;\n    align-items: end;\n    justify-items: center;\n    grid-template-columns: repeat(3, 1fr);\n    gap: 112px;\n    width: fit-content;\n    margin: 0 auto;\n  }\n\n  li {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    &.ranking_2 {\n      grid-row-start: 1;\n      grid-column-start: 1;\n    }\n  }\n\n  span {\n    box-shadow: 0 0 10px 0 rgba(121, 102, 255, 0.2);\n  }\n\n  strong {\n    margin-top: 10px;\n    margin-bottom: 12px;\n    font-size: 18px;\n  }\n\n  em,\n  i {\n    font-weight: 700;\n    font-style: normal;\n  }\n\n  button {\n    width: 103px;\n    height: 36px;\n    margin-top: 8px;\n    margin-bottom: 12px;\n    color: #fff;\n    border-radius: 40px;\n    background-color: var(--main-color);\n  }\n\n  i {\n    color: var(--main-color);\n    font-size: 20px;\n  }\n`;\nexport default RankingTop;\n","/Users/cyj/sun/src/components/Postchat.js",["371","372","373","374","375","376","377","378","379","380"],[],"import React from \"react\";\nimport Stomp, { over } from \"stompjs\";\nimport SockJs from \"sockjs-client\";\nimport Profile from \"../elements/Profile\";\nimport styled from \"styled-components\";\nimport Swal from \"sweetalert2\";\nimport { apiUrl } from \"../elements/testApiUrl\";\nimport { ReactComponent as SendSvg } from \"../svg/send.svg\";\n\nlet stompClient = null;\nconst Postchat = ({ pid }) => {\n  const token = {\n    Authorization: sessionStorage.getItem(\"token\"),\n  };\n  const is_login = sessionStorage.getItem(\"is_Login\");\n  const username = sessionStorage.getItem(\"nickname\");\n  const crareer = sessionStorage.getItem(\"career\");\n  const userImage = sessionStorage.getItem(\"userImage\");\n  const uid = sessionStorage.getItem(\"uid\");\n\n  const [welcome, setWelcome] = React.useState(new Map());\n  const [publicChats, setPublicChats] = React.useState([]);\n  const [connected, setConnected] = React.useState(false);\n  const [tab, setTab] = React.useState(\"CHATROOM\");\n  const [time, setTime] = React.useState(\"\");\n  const [user, setUser] = React.useState(0);\n  const [userData, setUserData] = React.useState({\n    username: \"\",\n    message: \"\",\n    opposingUserName: \"\",\n  });\n\n  React.useEffect(() => {\n    stompConnect();\n\n    return () => {\n      stompDisConnect();\n    };\n  }, []);\n\n  const onKeyPress = (e) => {\n    if (e.key == \"Enter\") {\n      sendPublicMessage();\n    }\n  };\n\n  const stompDisConnect = () => {\n    try {\n      const user_join = { status: \"OUT\" };\n      stompClient.send(\"/app/message1\", {}, JSON.stringify(user_join));\n\n      stompClient.disconnect(() => {\n        stompClient.unsubscribe(`/topic/greetings/${pid}`);\n      }, token);\n    } catch (err) {}\n  };\n\n  const handleValue = (e) => {\n    const { value, name } = e.target;\n    setUserData({ ...userData, [name]: value });\n  };\n\n  const stompConnect = () => {\n    let socket = new SockJs(`${apiUrl}/ws`);\n    stompClient = Stomp.over(socket);\n    stompClient.connect({}, onConnected, onError);\n  };\n\n  const onConnected = () => {\n    try {\n      const username = sessionStorage.getItem(\"nickname\");\n      const crareer = sessionStorage.getItem(\"career\");\n      const userImage = sessionStorage.getItem(\"userImage\");\n      const user_join = { status: \"JOIN\", pid, uid };\n      setConnected(true);\n      setUserData({\n        ...userData,\n        crareer,\n        senderName: username,\n        status: \"JOIN\",\n        pid: pid,\n      });\n\n      stompClient.send(\"/app/message1\", token, JSON.stringify(user_join));\n      stompClient.subscribe(\n        `/topic/greetings/${pid}`,\n        onPublicMessageReceived,\n        token\n      );\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const sendPublicMessage = () => {\n    if (is_login) {\n      const username = sessionStorage.getItem(\"nickname\");\n\n      if (stompClient) {\n        if (!userData.message) {\n          Swal.fire(\"\", \"내용을 입력해주세요!\", \"error\");\n        } else {\n          let chatMessage = {\n            ...userData,\n            senderName: username,\n            message: userData.message,\n            status: \"MESSAGE\",\n            pid: pid,\n            uid: uid,\n          };\n\n          stompClient.send(\"/app/message1\", token, JSON.stringify(chatMessage));\n          setUserData({ ...userData, message: \"\" });\n        }\n      }\n    } else {\n      Swal.fire(\"\", \"로그인 후 사용할 수 있습니다:)\", \"error\");\n    }\n  };\n\n  //subscribe의 함수\n  const onPublicMessageReceived = (payload) => {\n    let payloadData = JSON.parse(payload.body);\n\n    switch (payloadData.status) {\n      case \"JOIN\":\n        if (!welcome.get(payloadData.senderName)) {\n          console.log(payloadData);\n          welcome.set(payloadData.message, []);\n          setWelcome(new Map(welcome));\n          setUser(payloadData.userCount);\n        }\n        break;\n      case \"OUT\":\n        if (!welcome.get(payloadData.senderName)) {\n          console.log(payloadData);\n          welcome.set(payloadData.message, []);\n          setWelcome(new Map(welcome));\n          setUser(payloadData.userCount);\n        }\n        break;\n      case \"OUT\":\n        if (!welcome.get(payloadData.senderName)) {\n          console.log(payloadData);\n          welcome.set(payloadData.message, []);\n          setWelcome(new Map(welcome));\n        }\n        break;\n      case \"MESSAGE\":\n        const time1 = payloadData.createdAt.split(\"T\")[1]; //년월 제거\n        const time2 = time1.split(\".\")[0]; // 소수점 제거\n        const time3 = time2.split(\":\")[0] + \":\" + time2.split(\":\")[1]; // 시간, 분\n        setTime(time3);\n        publicChats.push(payloadData);\n        setPublicChats([...publicChats]);\n        setUser(payloadData.userCount);\n        break;\n    }\n  };\n\n  const onError = (err) => {\n    console.log(err);\n    console.log(\"plz\");\n  };\n\n  return (\n    <ChatDiv>\n      <ChatTab>\n        <li\n          onClick={() => {\n            setTab(\"CHATROOM\");\n          }}>\n          채팅 {user}\n        </li>\n      </ChatTab>\n      <ChatList>\n        <ul>\n          {[...welcome.keys()].map((name, index) => {\n            return (\n              <li className='welcome' key={index}>\n                {name}\n              </li>\n            );\n          })}\n\n          {publicChats.map((chat, index) => (\n            <li\n              className={` ${chat.senderName === username ? \"self\" : \"user\"}`}\n              key={index}>\n              {chat.senderName !== username && (\n                <>\n                  <Profile size='32' imgUrl={userData.userImage} />\n                  <div>\n                    <strong>{chat.senderName}</strong>\n                    {userData.crareer && <i>{userData.crareer}</i>}\n                  </div>\n                </>\n              )}\n              <p className='message-data'>{chat.message}</p>\n              {time.split[0] > 12 ? (\n                <em> 오후 {time}</em>\n              ) : (\n                <em> 오전 {time} </em>\n              )}\n            </li>\n          ))}\n        </ul>\n      </ChatList>\n      <ChatInput>\n        <div>\n          <input\n            type='text'\n            name='message'\n            value={userData.message}\n            placeholder='댓글을 입력해주세요 :)'\n            onChange={handleValue}\n            onKeyPress={onKeyPress}\n          />\n          <button onClick={sendPublicMessage}>\n            <SendSvg />\n          </button>\n        </div>\n      </ChatInput>\n    </ChatDiv>\n  );\n};\n\nconst ChatDiv = styled.div`\n  flex: none;\n  display: flex;\n  flex-direction: column;\n  flex: none;\n  width: 342px;\n  height: calc(100vh - 102px);\n  background-color: #f9f8ff;\n  border-radius: 8px;\n  overflow: hidden;\n`;\n\nconst ChatTab = styled.ul`\n  display: flex;\n  flex: none;\n  overflow: auto;\n\n  li {\n    padding: 0 22px;\n    margin: 0 10px;\n    font-size: 18px;\n    font-weight: 700;\n    line-height: 58px;\n    color: #5e45f2;\n    border-bottom: solid 3px #5e45f2;\n  }\n`;\n\nconst ChatList = styled.div`\n  flex: auto;\n  padding: 0 10px;\n  overflow: auto;\n\n  ul {\n    padding-top: 30px;\n    overflow: hidden;\n  }\n\n  li {\n    width: 286px;\n\n    p {\n      padding: 8px;\n      word-break: break-all;\n      border-radius: 8px;\n    }\n\n    &.welcome {\n      color: #5e45f2;\n    }\n\n    &.user {\n      position: relative;\n      padding-left: 36px;\n      padding-right: 10px;\n\n      strong {\n        font-size: 14px;\n        color: #5e45f2;\n      }\n\n      p {\n        margin-top: 8px;\n        color: #333;\n        background-color: #fff;\n        box-shadow: 0 4px 14px 0 rgba(65, 0, 131, 0.06);\n      }\n\n      em {\n        display: block;\n        text-align: right;\n      }\n    }\n\n    &.self {\n      margin: 12px 0;\n      margin-left: auto;\n\n      p {\n        color: #fff;\n        background-color: #7966ff;\n      }\n    }\n  }\n\n  span {\n    position: absolute;\n    top: 0;\n    left: 0;\n    box-shadow: 0 0 4px 0 rgba(121, 102, 255, 0.2);\n  }\n\n  i {\n    color: #797979;\n    font-size: 12px;\n    font-style: normal;\n\n    &:before {\n      --dat-size: 2px;\n      content: \".\";\n      margin: 0 6px;\n      font-size: 16px;\n      vertical-align: super;\n    }\n  }\n\n  em {\n    display: block;\n    margin-top: 10px;\n    color: #797979;\n    font-size: 12px;\n    font-style: normal;\n  }\n`;\n\nconst ChatInput = styled.div`\n  padding: 24px 16px;\n  background-color: #f9f8ff;\n  box-shadow: 0 -4px 10px 0 rgba(133, 47, 243, 0.05);\n\n  > div {\n    display: flex;\n    align-items: center;\n    height: 42px;\n    padding: 8px 14px;\n    overflow: hidden;\n    border-radius: 10px;\n    box-shadow: inset 0 2px 6px 0 rgba(60, 4, 105, 0.08);\n    background-color: #fff;\n  }\n\n  input {\n    flex: auto;\n    padding: 0;\n    background-color: transparent;\n  }\n\n  button {\n    flex: none;\n    margin-left: 10px;\n    svg {\n      vertical-align: middle;\n    }\n  }\n`;\n\nexport default Postchat;\n","/Users/cyj/sun/src/components/TabMenu.js",["381"],[],"import React from \"react\";\nimport styled from \"styled-components\";\n\nconst TabMenu = ({ tab_list, tab }) => {\n  const [menu, setMenu] = React.useState(tab_list[0].title);\n\n  return (\n    <SC_TabMenu>\n      {tab_list.map((v, idx) => (\n        <li\n          key={idx}\n          className={menu === v.title ? \"active\" : \"\"}\n          onClick={() => {\n            setMenu(v.title);\n            tab(v.title);\n          }}>\n          {v.value}\n        </li>\n      ))}\n    </SC_TabMenu>\n  );\n};\n\nconst SC_TabMenu = styled.ul`\n  display: flex;\n  border-bottom: solid 1px #f0ecfd;\n\n  li {\n    margin-right: 50px;\n    padding: 0 4px;\n    padding-bottom: 9px;\n    cursor: pointer;\n    color: #c4c4c4;\n    transition: all 0.2s ease-in-out;\n    border-bottom: solid 3px transparent;\n\n    &.active {\n      color: #7966ff;\n      border-bottom: solid 3px #7966ff;\n    }\n  }\n`;\nexport default TabMenu;\n","/Users/cyj/sun/src/components/Category.js",["382","383","384","385","386"],[],"import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { history } from \"../redux/configureStore\";\nimport { category } from \"../elements/category\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { actionsCreators as categoryActions } from \"../redux/modules/serch\";\nimport { useParams } from \"react-router\";\n\nconst Category = () => {\n  const dispatch = useDispatch();\n  const category_list = useSelector((state) => state.category_list);\n  const [categoryView, setcategortView] = useState(false);\n  const CategoryView = () => {\n    setcategortView(!categoryView);\n  };\n\n  const CategoryList = (v) => {\n    window.location.replace(`/search/category_${v}`);\n  };\n\n  return (\n    <Container>\n      <ul>\n        <li onClick={() => setcategortView(!categoryView)}>언어</li>\n        <li onClick={() => history.push(\"/ranking\")}>랭킹</li>\n      </ul>\n      <div className='category_list'>\n        {categoryView ? (\n          <div className='C' onChange={CategoryList}>\n            {category.map((c, idx) => (\n              <div\n                className={categoryView ? \"\" : \"close\"}\n                key={idx}\n                value={c.name}\n                onClick={() => {\n                  CategoryList(c.name);\n                  setcategortView(!categoryView);\n                }}>\n                {c.name}\n              </div>\n            ))}\n          </div>\n        ) : null}\n      </div>\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  position: relative;\n  margin-left: 40px;\n\n  ul {\n    display: flex;\n    font-size: 20px;\n    font-weight: 700;\n    color: #5e45f2;\n  }\n\n  li {\n    width: 98px;\n    height: 46px;\n    line-height: 46px;\n    text-align: center;\n    cursor: pointer;\n  }\n\n  .category_list {\n    top: 74px;\n    left: 0;\n    width: 250px;\n    border-radius: 8px;\n    box-shadow: 0 4px 15px 0 rgba(36, 13, 177, 0.2);\n\n    > div.C {\n      position: absolute;\n      padding: 5px;\n      transition: max-height 0.5s ease-out;\n      background-color: #fff;\n      z-index: 10;\n\n      > div {\n        width: 250px;\n        height: 50px;\n        line-height: 50px;\n        padding: 0 12px;\n        cursor: pointer;\n        border-radius: 8px;\n        &:hover {\n          color: #fff;\n          background-color: #7966ff;\n        }\n        &.close {\n          height: 0;\n          padding: 0;\n        }\n      }\n    }\n  }\n`;\nexport default Category;\n","/Users/cyj/sun/src/elements/Profile.js",[],[],"/Users/cyj/sun/src/elements/NoticeList.js",[],[],"/Users/cyj/sun/src/components/Serch.js",["387","388","389","390","391"],[],"import React from \"react\";\nimport styled from \"styled-components\";\nimport { ReactComponent as Search } from \"../svg/search.svg\";\n\nimport { useDispatch } from \"react-redux\";\nimport { actionsCreators as serchActions } from \"../redux/modules/serch\";\nimport { history } from \"../redux/configureStore\";\n\nconst Serch = () => {\n  const [find, setFind] = React.useState();\n  const [showSearch, setShowSearch] = React.useState(false);\n\n  const onKeyPress = (e) => {\n    if (e.key == \"Enter\") {\n      const setFind = e.target.value;\n      // history.push(`/search/serch_${setFind}`);\n      window.location.replace(`/search/serch_${setFind}`);\n    }\n  };\n\n  React.useEffect(() => {\n    setShowSearch(false);\n  }, []);\n\n  return (\n    <Container className={showSearch ? \"active\" : \"\"}>\n      <div className='inputdiv'>\n        <Search\n          className='search_icon'\n          onClick={() => {\n            setShowSearch(!showSearch);\n          }}\n        />\n        <input\n          onKeyPress={onKeyPress}\n          onChange={(e) => {\n            setFind(e.target.value);\n          }}\n          placeholder='검색'></input>\n      </div>\n    </Container>\n  );\n};\nconst Container = styled.div`\n  flex: auto;\n  margin: 0 10px;\n\n  &.active {\n    div.inputdiv {\n      width: 100% !important;\n      padding: 5px;\n      border: 1px solid #5e45f2;\n    }\n\n    input {\n      display: block;\n      width: calc(100% - 37px);\n      padding: 10px;\n      margin-left: auto;\n    }\n  }\n\n  div.inputdiv {\n    position: relative;\n    display: flex;\n    width: 0%;\n    align-items: center;\n    margin-left: auto;\n    height: 52px;\n    border-radius: 2rem;\n    padding: 5px;\n    padding-left: 37px;\n    transition: width 0.4s ease-in-out;\n  }\n\n  .search_icon {\n    position: absolute;\n    top: 50%;\n    left: 12px;\n    display: inline-block;\n    width: 32px;\n    height: 32px;\n    cursor: pointer;\n    transform: translateY(-50%);\n    background: url(\"icon/search.svg\") no-repeat center/contain;\n    z-index: 10;\n  }\n\n  input {\n    display: inline-block;\n    width: 0;\n    height: 100%;\n    border: 0px solid;\n    outline: 0;\n    background-color: transparent;\n    color: #333;\n  }\n`;\n\nexport default Serch;\n","/Users/cyj/sun/src/elements/category.js",[],[],"/Users/cyj/sun/src/elements/testApiUrl.js",[],[],"/Users/cyj/sun/src/elements/Banner.js",[],[],"/Users/cyj/sun/src/shared/token.js",[],[],["392","393"],"/Users/cyj/sun/src/shared/api.js",[],[],"/Users/cyj/sun/src/elements/RoundBtn.js",[],[],"/Users/cyj/sun/src/page/Alarms.js",["394"],[],"import React from \"react\";\nimport styled from \"styled-components\";\nimport RoundTab from \"../components/RoundTab\";\nimport TableList from \"../components/TableList\";\n\nconst Alarms = () => {\n  const [curTab, setCurTab] = React.useState(\"total\");\n\n  return (\n    <SC_AlarmsWrap>\n      <h2>알림</h2>\n      <RoundTab currTab={setCurTab} />\n      <TableList currTab={curTab} />\n    </SC_AlarmsWrap>\n  );\n};\n\nconst SC_AlarmsWrap = styled.div`\n  width: 1440px;\n  min-height: calc(100vh - 100px - 150px);\n  margin: 0 auto;\n\n  h2 {\n    padding: 0 24px;\n    margin-top: 64px;\n    margin-bottom: 115px;\n  }\n`;\nexport default Alarms;\n","/Users/cyj/sun/src/redux/modules/mypage.js",["395"],[],"import { createAction, handleActions } from \"redux-actions\";\nimport produce from \"immer\";\nimport { apis } from \"../../shared/api\";\n\nconst MY_ALAMS = \"MY_ALAMS\";\nconst MY_ALAMS_DEL = \"MY_ALAMS_DEL\";\nconst MY_LIKE_POST = \"MY_LIKE_POST\";\n\nconst myAlarms = createAction(MY_ALAMS, (list) => ({ list }));\nconst myAlarmsDel = createAction(MY_ALAMS_DEL, (list) => ({ list }));\nconst myMyLikePost = createAction(MY_LIKE_POST, (list) => ({ list }));\n\nconst initialState = {\n  list: [],\n};\n\nconst myAlarmsDB = () => {\n  return function (dispatch, getState, { history }) {\n    apis.myalarm().then((res) => {\n      dispatch(myAlarms(res.data));\n    });\n  };\n};\n\nconst myAlarmsDelDB = (alarmId) => {\n  return function (dispatch, getState, { history }) {\n    apis.myalarmdel(alarmId).then(() => {\n      const _aram_list = getState().mypage.list;\n      const aram_list = _aram_list.filter((v) => v.alarmId !== alarmId);\n      dispatch(myAlarmsDel(aram_list));\n    });\n  };\n};\n\nconst myLikePostDB = (page) => {\n  return function (dispatch, getState, { history }) {\n    console.log(page);\n    apis\n      .mylikepost(page)\n      .then((res) => {\n        dispatch(myAlarms(res.data));\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n\nexport default handleActions(\n  {\n    [MY_ALAMS]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list = action.payload.list;\n      }),\n    [MY_ALAMS_DEL]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list = action.payload.list;\n      }),\n    [MY_LIKE_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list = action.payload.list;\n      }),\n  },\n  initialState\n);\n\nconst actionCreators = {\n  myAlarmsDB,\n  myAlarmsDelDB,\n  myLikePostDB,\n};\n\nexport { actionCreators };\n","/Users/cyj/sun/src/shared/InfinityScroll.js",["396","397"],[],"import React from \"react\";\nimport _ from \"lodash\";\n\nconst InfinityScroll = (props) => {\n  const { children, callNext, is_next = true, loading } = props;\n\n  const _handleScroll = _.throttle(() => {\n    if (loading) {\n      return;\n    }\n    const { innerHeight } = window;\n    const { scrollHeight } = document.body;\n    const scrollTop =\n      (document.documentElement && document.documentElement.scrollTop) ||\n      document.body.scrollTop;\n\n    if (scrollHeight - innerHeight - scrollTop < 100) {\n      callNext();\n    }\n  }, 300);\n\n  const handleScroll = React.useCallback(_handleScroll, [loading]);\n\n  React.useEffect(() => {\n    if (loading) {\n      return;\n    }\n\n    if (is_next) {\n      window.addEventListener(\"scroll\", handleScroll);\n    } else {\n      window.removeEventListener(\"scroll\", handleScroll);\n    }\n\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, [is_next, loading]);\n  return <React.Fragment>{children}</React.Fragment>;\n};\n\nInfinityScroll.defatultProps = {\n  children: null,\n  callNext: () => {},\n  is_next: false,\n  loading: false,\n};\n\nexport default InfinityScroll;\n","/Users/cyj/sun/src/components/Loader.js",[],[],"/Users/cyj/sun/src/page/Scrap.js",["398"],[],"import React from \"react\";\nimport styled from \"styled-components\";\nimport { actionCreators as mypageActions } from \"../redux/modules/mypage\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { history } from \"../redux/configureStore\";\nimport { TableListUl } from \"../components/TableList\";\n\nconst Scrap = () => {\n  const dispatch = useDispatch();\n  const scrap_list = useSelector((state) => state.mypage.list);\n\n  React.useEffect(() => {\n    dispatch(mypageActions.myLikePostDB(1));\n  }, []);\n\n  return (\n    <ScrapDiv>\n      <h2>스크랩</h2>\n      <TableListUl>\n        {scrap_list.length === 0 && (\n          <li className='no_list'>\n            <strong>스크랩된 게시글이 없습니다 :)</strong>\n          </li>\n        )}\n        {scrap_list.map((v, idx) => {\n          const date = v.createdAt?.split(\".\")[0].replace(\"T\", \" \");\n\n          return (\n            <li key={v.pid}>\n              <div\n                onClick={() => {\n                  history.push(`detail/${v.pid}`);\n                }}>\n                <p>\"{v.postTitle}\"</p>\n                {v.type === \"AnswerCreate\" && (\n                  <span>누군가 내 게시글에 답글을 남겼습니다.</span>\n                )}\n                {v.type === \"AnswerChoose\" && (\n                  <span>답변이 채택되었습니다.</span>\n                )}\n                <em>{date}</em>\n              </div>\n              <button\n                onClick={() => {\n                  //   dispatch(myActions.myAlarmsDelDB(v.alarmId));\n                }}>\n                삭제\n              </button>\n            </li>\n          );\n        })}\n      </TableListUl>\n    </ScrapDiv>\n  );\n};\nconst ScrapDiv = styled.div`\n  width: 1440px;\n  min-height: calc(100vh - 100px - 150px);\n  margin: 0 auto;\n`;\nexport default Scrap;\n",{"ruleId":"399","replacedBy":"400"},{"ruleId":"401","replacedBy":"402"},{"ruleId":"403","severity":1,"message":"404","line":8,"column":8,"nodeType":"405","messageId":"406","endLine":8,"endColumn":13},{"ruleId":"403","severity":1,"message":"407","line":21,"column":9,"nodeType":"405","messageId":"406","endLine":21,"endColumn":17},{"ruleId":"403","severity":1,"message":"408","line":26,"column":9,"nodeType":"405","messageId":"406","endLine":26,"endColumn":14},{"ruleId":"409","severity":1,"message":"410","line":27,"column":17,"nodeType":"411","messageId":"412","endLine":27,"endColumn":18,"suggestions":"413"},{"ruleId":"409","severity":1,"message":"414","line":27,"column":19,"nodeType":"411","messageId":"412","endLine":27,"endColumn":20,"suggestions":"415"},{"ruleId":"409","severity":1,"message":"416","line":27,"column":21,"nodeType":"411","messageId":"412","endLine":27,"endColumn":22,"suggestions":"417"},{"ruleId":"409","severity":1,"message":"418","line":27,"column":25,"nodeType":"411","messageId":"412","endLine":27,"endColumn":26,"suggestions":"419"},{"ruleId":"409","severity":1,"message":"420","line":27,"column":33,"nodeType":"411","messageId":"412","endLine":27,"endColumn":34,"suggestions":"421"},{"ruleId":"409","severity":1,"message":"422","line":27,"column":47,"nodeType":"411","messageId":"412","endLine":27,"endColumn":48,"suggestions":"423"},{"ruleId":"409","severity":1,"message":"424","line":27,"column":54,"nodeType":"411","messageId":"412","endLine":27,"endColumn":55,"suggestions":"425"},{"ruleId":"409","severity":1,"message":"426","line":27,"column":56,"nodeType":"411","messageId":"412","endLine":27,"endColumn":57,"suggestions":"427"},{"ruleId":"409","severity":1,"message":"428","line":27,"column":58,"nodeType":"411","messageId":"412","endLine":27,"endColumn":59,"suggestions":"429"},{"ruleId":"409","severity":1,"message":"430","line":27,"column":60,"nodeType":"411","messageId":"412","endLine":27,"endColumn":61,"suggestions":"431"},{"ruleId":"432","severity":1,"message":"433","line":36,"column":6,"nodeType":"434","endLine":36,"endColumn":8,"suggestions":"435"},{"ruleId":"436","severity":1,"message":"437","line":18,"column":15,"nodeType":"438","messageId":"439","endLine":18,"endColumn":17},{"ruleId":"440","severity":1,"message":"441","line":34,"column":7,"nodeType":"442","endLine":34,"endColumn":31},{"ruleId":"403","severity":1,"message":"443","line":2,"column":23,"nodeType":"405","messageId":"406","endLine":2,"endColumn":34},{"ruleId":"440","severity":1,"message":"441","line":156,"column":13,"nodeType":"442","endLine":156,"endColumn":33},{"ruleId":"440","severity":1,"message":"441","line":207,"column":13,"nodeType":"442","endLine":209,"endColumn":30},{"ruleId":"403","severity":1,"message":"444","line":3,"column":8,"nodeType":"405","messageId":"406","endLine":3,"endColumn":15},{"ruleId":"403","severity":1,"message":"445","line":8,"column":29,"nodeType":"405","messageId":"406","endLine":8,"endColumn":42},{"ruleId":"403","severity":1,"message":"446","line":15,"column":8,"nodeType":"405","messageId":"406","endLine":15,"endColumn":12},{"ruleId":"432","severity":1,"message":"447","line":55,"column":6,"nodeType":"434","endLine":55,"endColumn":8,"suggestions":"448"},{"ruleId":"440","severity":1,"message":"441","line":88,"column":36,"nodeType":"442","endLine":88,"endColumn":66},{"ruleId":"403","severity":1,"message":"449","line":1,"column":17,"nodeType":"405","messageId":"406","endLine":1,"endColumn":26},{"ruleId":"403","severity":1,"message":"443","line":4,"column":10,"nodeType":"405","messageId":"406","endLine":4,"endColumn":21},{"ruleId":"403","severity":1,"message":"450","line":6,"column":10,"nodeType":"405","messageId":"406","endLine":6,"endColumn":19},{"ruleId":"403","severity":1,"message":"451","line":23,"column":10,"nodeType":"405","messageId":"406","endLine":23,"endColumn":18},{"ruleId":"403","severity":1,"message":"452","line":23,"column":20,"nodeType":"405","messageId":"406","endLine":23,"endColumn":31},{"ruleId":"432","severity":1,"message":"453","line":42,"column":6,"nodeType":"434","endLine":42,"endColumn":51,"suggestions":"454"},{"ruleId":"455","severity":1,"message":"456","line":48,"column":7,"nodeType":"457","messageId":"458","endLine":49,"endColumn":35},{"ruleId":"455","severity":1,"message":"456","line":50,"column":7,"nodeType":"457","messageId":"458","endLine":51,"endColumn":35},{"ruleId":"455","severity":1,"message":"459","line":52,"column":7,"nodeType":"457","messageId":"460","endLine":53,"endColumn":21},{"ruleId":"432","severity":1,"message":"461","line":61,"column":6,"nodeType":"434","endLine":61,"endColumn":14,"suggestions":"462"},{"ruleId":"432","severity":1,"message":"463","line":44,"column":6,"nodeType":"434","endLine":44,"endColumn":15,"suggestions":"464"},{"ruleId":"465","severity":1,"message":"466","line":47,"column":5,"nodeType":"442","messageId":"467","endLine":47,"endColumn":16},{"ruleId":"403","severity":1,"message":"468","line":4,"column":17,"nodeType":"405","messageId":"406","endLine":4,"endColumn":21},{"ruleId":"403","severity":1,"message":"469","line":8,"column":10,"nodeType":"405","messageId":"406","endLine":8,"endColumn":21},{"ruleId":"403","severity":1,"message":"443","line":8,"column":23,"nodeType":"405","messageId":"406","endLine":8,"endColumn":34},{"ruleId":"403","severity":1,"message":"470","line":9,"column":28,"nodeType":"405","messageId":"406","endLine":9,"endColumn":39},{"ruleId":"432","severity":1,"message":"471","line":59,"column":6,"nodeType":"434","endLine":59,"endColumn":8,"suggestions":"472"},{"ruleId":"403","severity":1,"message":"473","line":21,"column":7,"nodeType":"405","messageId":"406","endLine":21,"endColumn":14},{"ruleId":"403","severity":1,"message":"474","line":23,"column":7,"nodeType":"405","messageId":"406","endLine":23,"endColumn":14},{"ruleId":"475","severity":1,"message":"476","line":307,"column":22,"nodeType":"477","messageId":"478","endLine":307,"endColumn":32},{"ruleId":"403","severity":1,"message":"479","line":3,"column":10,"nodeType":"405","messageId":"406","endLine":3,"endColumn":18},{"ruleId":"403","severity":1,"message":"480","line":6,"column":10,"nodeType":"405","messageId":"406","endLine":6,"endColumn":14},{"ruleId":"481","severity":1,"message":"482","line":40,"column":9,"nodeType":"483","messageId":"484","endLine":60,"endColumn":10},{"ruleId":"481","severity":1,"message":"482","line":57,"column":16,"nodeType":"485","messageId":"484","endLine":60,"endColumn":10},{"ruleId":"403","severity":1,"message":"486","line":3,"column":8,"nodeType":"405","messageId":"406","endLine":3,"endColumn":15},{"ruleId":"403","severity":1,"message":"487","line":7,"column":20,"nodeType":"405","messageId":"406","endLine":7,"endColumn":28},{"ruleId":"403","severity":1,"message":"488","line":278,"column":7,"nodeType":"405","messageId":"406","endLine":278,"endColumn":13},{"ruleId":"403","severity":1,"message":"489","line":1,"column":8,"nodeType":"405","messageId":"406","endLine":1,"endColumn":13},{"ruleId":"440","severity":1,"message":"441","line":199,"column":9,"nodeType":"442","endLine":201,"endColumn":26},{"ruleId":"432","severity":1,"message":"490","line":32,"column":6,"nodeType":"434","endLine":32,"endColumn":8,"suggestions":"491"},{"ruleId":"465","severity":1,"message":"492","line":144,"column":5,"nodeType":"442","messageId":"467","endLine":144,"endColumn":14},{"ruleId":"440","severity":1,"message":"441","line":161,"column":23,"nodeType":"442","endLine":161,"endColumn":48},{"ruleId":"465","severity":1,"message":"493","line":205,"column":19,"nodeType":"442","messageId":"467","endLine":205,"endColumn":54},{"ruleId":"465","severity":1,"message":"494","line":211,"column":15,"nodeType":"442","messageId":"467","endLine":211,"endColumn":56},{"ruleId":"436","severity":1,"message":"437","line":217,"column":38,"nodeType":"438","messageId":"439","endLine":217,"endColumn":40},{"ruleId":"436","severity":1,"message":"495","line":280,"column":37,"nodeType":"438","messageId":"439","endLine":280,"endColumn":39},{"ruleId":"403","severity":1,"message":"443","line":5,"column":23,"nodeType":"405","messageId":"406","endLine":5,"endColumn":34},{"ruleId":"403","severity":1,"message":"496","line":15,"column":9,"nodeType":"405","messageId":"406","endLine":15,"endColumn":17},{"ruleId":"465","severity":1,"message":"497","line":46,"column":7,"nodeType":"442","messageId":"467","endLine":46,"endColumn":18},{"ruleId":"465","severity":1,"message":"498","line":47,"column":9,"nodeType":"442","messageId":"467","endLine":47,"endColumn":23},{"ruleId":"465","severity":1,"message":"497","line":68,"column":5,"nodeType":"442","messageId":"467","endLine":68,"endColumn":16},{"ruleId":"465","severity":1,"message":"498","line":70,"column":7,"nodeType":"442","messageId":"467","endLine":70,"endColumn":21},{"ruleId":"440","severity":1,"message":"441","line":47,"column":11,"nodeType":"442","endLine":47,"endColumn":50},{"ruleId":"440","severity":1,"message":"441","line":62,"column":11,"nodeType":"442","endLine":62,"endColumn":31},{"ruleId":"432","severity":1,"message":"463","line":21,"column":6,"nodeType":"434","endLine":21,"endColumn":15,"suggestions":"499"},{"ruleId":"403","severity":1,"message":"452","line":28,"column":20,"nodeType":"405","messageId":"406","endLine":28,"endColumn":31},{"ruleId":"432","severity":1,"message":"463","line":45,"column":6,"nodeType":"434","endLine":45,"endColumn":34,"suggestions":"500"},{"ruleId":"432","severity":1,"message":"461","line":67,"column":6,"nodeType":"434","endLine":67,"endColumn":14,"suggestions":"501"},{"ruleId":"465","severity":1,"message":"502","line":71,"column":7,"nodeType":"442","messageId":"467","endLine":71,"endColumn":21},{"ruleId":"465","severity":1,"message":"503","line":83,"column":9,"nodeType":"442","messageId":"467","endLine":83,"endColumn":21},{"ruleId":"403","severity":1,"message":"504","line":1,"column":10,"nodeType":"405","messageId":"406","endLine":1,"endColumn":13},{"ruleId":"465","severity":1,"message":"505","line":9,"column":5,"nodeType":"442","messageId":"467","endLine":9,"endColumn":22},{"ruleId":"506","severity":1,"message":"507","line":27,"column":15,"nodeType":"442","messageId":"508","endLine":27,"endColumn":62,"fix":"509"},{"ruleId":"506","severity":1,"message":"507","line":47,"column":15,"nodeType":"442","messageId":"508","endLine":47,"endColumn":51,"fix":"510"},{"ruleId":"403","severity":1,"message":"468","line":2,"column":17,"nodeType":"405","messageId":"406","endLine":2,"endColumn":21},{"ruleId":"403","severity":1,"message":"511","line":24,"column":10,"nodeType":"405","messageId":"406","endLine":24,"endColumn":19},{"ruleId":"403","severity":1,"message":"512","line":25,"column":10,"nodeType":"405","messageId":"406","endLine":25,"endColumn":13},{"ruleId":"432","severity":1,"message":"513","line":40,"column":6,"nodeType":"434","endLine":40,"endColumn":8,"suggestions":"514"},{"ruleId":"436","severity":1,"message":"437","line":43,"column":15,"nodeType":"438","messageId":"439","endLine":43,"endColumn":17},{"ruleId":"403","severity":1,"message":"515","line":74,"column":13,"nodeType":"405","messageId":"406","endLine":74,"endColumn":22},{"ruleId":"516","severity":1,"message":"517","line":121,"column":5,"nodeType":"518","messageId":"519","endLine":146,"endColumn":6},{"ruleId":"465","severity":1,"message":"520","line":9,"column":5,"nodeType":"442","messageId":"467","endLine":9,"endColumn":20},{"ruleId":"516","severity":1,"message":"517","line":13,"column":13,"nodeType":"518","messageId":"519","endLine":20,"endColumn":14},{"ruleId":"506","severity":1,"message":"507","line":36,"column":17,"nodeType":"442","messageId":"508","endLine":36,"endColumn":53,"fix":"521"},{"ruleId":"403","severity":1,"message":"468","line":2,"column":17,"nodeType":"405","messageId":"406","endLine":2,"endColumn":21},{"ruleId":"403","severity":1,"message":"522","line":17,"column":9,"nodeType":"405","messageId":"406","endLine":17,"endColumn":16},{"ruleId":"403","severity":1,"message":"515","line":18,"column":9,"nodeType":"405","messageId":"406","endLine":18,"endColumn":18},{"ruleId":"403","severity":1,"message":"511","line":23,"column":10,"nodeType":"405","messageId":"406","endLine":23,"endColumn":19},{"ruleId":"403","severity":1,"message":"512","line":24,"column":10,"nodeType":"405","messageId":"406","endLine":24,"endColumn":13},{"ruleId":"432","severity":1,"message":"513","line":39,"column":6,"nodeType":"434","endLine":39,"endColumn":8,"suggestions":"523"},{"ruleId":"436","severity":1,"message":"437","line":42,"column":15,"nodeType":"438","messageId":"439","endLine":42,"endColumn":17},{"ruleId":"403","severity":1,"message":"515","line":73,"column":13,"nodeType":"405","messageId":"406","endLine":73,"endColumn":22},{"ruleId":"516","severity":1,"message":"517","line":125,"column":5,"nodeType":"518","messageId":"519","endLine":158,"endColumn":6},{"ruleId":"524","severity":1,"message":"525","line":142,"column":7,"nodeType":"457","messageId":"439","endLine":148,"endColumn":15},{"ruleId":"465","severity":1,"message":"526","line":8,"column":5,"nodeType":"442","messageId":"467","endLine":8,"endColumn":17},{"ruleId":"403","severity":1,"message":"527","line":6,"column":29,"nodeType":"405","messageId":"406","endLine":6,"endColumn":44},{"ruleId":"403","severity":1,"message":"450","line":7,"column":10,"nodeType":"405","messageId":"406","endLine":7,"endColumn":19},{"ruleId":"403","severity":1,"message":"528","line":10,"column":9,"nodeType":"405","messageId":"406","endLine":10,"endColumn":17},{"ruleId":"403","severity":1,"message":"529","line":11,"column":9,"nodeType":"405","messageId":"406","endLine":11,"endColumn":22},{"ruleId":"403","severity":1,"message":"530","line":13,"column":9,"nodeType":"405","messageId":"406","endLine":13,"endColumn":21},{"ruleId":"403","severity":1,"message":"469","line":5,"column":10,"nodeType":"405","messageId":"406","endLine":5,"endColumn":21},{"ruleId":"403","severity":1,"message":"531","line":6,"column":29,"nodeType":"405","messageId":"406","endLine":6,"endColumn":41},{"ruleId":"403","severity":1,"message":"486","line":7,"column":10,"nodeType":"405","messageId":"406","endLine":7,"endColumn":17},{"ruleId":"403","severity":1,"message":"532","line":10,"column":10,"nodeType":"405","messageId":"406","endLine":10,"endColumn":14},{"ruleId":"436","severity":1,"message":"437","line":14,"column":15,"nodeType":"438","messageId":"439","endLine":14,"endColumn":17},{"ruleId":"399","replacedBy":"533"},{"ruleId":"401","replacedBy":"534"},{"ruleId":"465","severity":1,"message":"535","line":10,"column":5,"nodeType":"442","messageId":"467","endLine":10,"endColumn":20},{"ruleId":"403","severity":1,"message":"536","line":11,"column":7,"nodeType":"405","messageId":"406","endLine":11,"endColumn":19},{"ruleId":"432","severity":1,"message":"537","line":22,"column":24,"nodeType":"477","endLine":22,"endColumn":41,"suggestions":"538"},{"ruleId":"432","severity":1,"message":"539","line":38,"column":6,"nodeType":"434","endLine":38,"endColumn":24,"suggestions":"540"},{"ruleId":"432","severity":1,"message":"463","line":14,"column":6,"nodeType":"434","endLine":14,"endColumn":8,"suggestions":"541"},"no-native-reassign",["542"],"no-negated-in-lhs",["543"],"no-unused-vars","'_Test' is defined but never used.","Identifier","unusedVar","'img_list' is assigned a value but never used.","'token' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\{.","Literal","unnecessaryEscape",["544","545"],"Unnecessary escape character: \\}.",["546","547"],"Unnecessary escape character: \\[.",["548","549"],"Unnecessary escape character: \\/.",["550","551"],"Unnecessary escape character: \\).",["552","553"],"Unnecessary escape character: \\#.",["554","555"],"Unnecessary escape character: \\=.",["556","557"],"Unnecessary escape character: \\(.",["558","559"],"Unnecessary escape character: \\'.",["560","561"],"Unnecessary escape character: \\\".",["562","563"],"react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'addPost.category', 'dispatch', 'isCreate', 'params', and 'post_one'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setOneCategory' needs the current value of 'addPost.category'.","ArrayExpression",["564"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useSelector' is defined but never used.","'Comment' is defined but never used.","'searchActions' is defined but never used.","'user' is defined but never used.","React Hook React.useEffect has missing dependencies: 'dispatch' and 'pid'. Either include them or remove the dependency array.",["565"],"'useEffect' is defined but never used.","'useParams' is defined but never used.","'isLoaded' is assigned a value but never used.","'setIsLoaded' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'dispatch' and 'search_type'. Either include them or remove the dependency array.",["566"],"no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","Expected a 'break' statement before 'default'.","default","React Hook React.useEffect has a missing dependency: 'getMoreItem'. Either include it or remove the dependency array.",["567"],"React Hook React.useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["568"],"react/jsx-pascal-case","Imported JSX component SC_Detail must be in PascalCase or SCREAMING_SNAKE_CASE","usePascalOrSnakeCase","'over' is defined but never used.","'useDispatch' is defined but never used.","'loOutAction' is defined but never used.","React Hook React.useEffect has missing dependencies: 'nickname' and 'token'. Either include them or remove the dependency array.",["569"],"'delPost' is assigned a value but never used.","'loading' is assigned a value but never used.","no-self-assign","'draft.list' is assigned to itself.","MemberExpression","selfAssignment","'setToken' is defined but never used.","'apis' is defined but never used.","no-unreachable","Unreachable code.","IfStatement","unreachableCode","BlockStatement","'history' is defined but never used.","'delToken' is defined but never used.","'status' is assigned a value but never used.","'React' is defined but never used.","React Hook React.useEffect has missing dependencies: 'dispatch', 'list.length', and 'pid'. Either include them or remove the dependency array.",["570"],"Imported JSX component SC_List must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component SC_Commentbox must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component SC_CommentList must be in PascalCase or SCREAMING_SNAKE_CASE","Expected '!==' and instead saw '!='.","'nickname' is assigned a value but never used.","Imported JSX component SC_Answer must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component SC_InputWrap must be in PascalCase or SCREAMING_SNAKE_CASE",["571"],["572"],["573"],"Imported JSX component SC_NoticeDiv must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component SC_BtnWrap must be in PascalCase or SCREAMING_SNAKE_CASE","'map' is defined but never used.","Imported JSX component SC_OtherRanking must be in PascalCase or SCREAMING_SNAKE_CASE","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"574","text":"575"},{"range":"576","text":"575"},"'connected' is assigned a value but never used.","'tab' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'stompConnect' and 'stompDisConnect'. Either include them or remove the dependency array.",["577"],"'userImage' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","Imported JSX component SC_TopRanking must be in PascalCase or SCREAMING_SNAKE_CASE",{"range":"578","text":"575"},"'crareer' is assigned a value but never used.",["579"],"no-duplicate-case","Duplicate case label.","Imported JSX component SC_TabMenu must be in PascalCase or SCREAMING_SNAKE_CASE","'categoryActions' is defined but never used.","'dispatch' is assigned a value but never used.","'category_list' is assigned a value but never used.","'CategoryView' is assigned a value but never used.","'serchActions' is defined but never used.","'find' is assigned a value but never used.",["542"],["543"],"Imported JSX component SC_AlarmsWrap must be in PascalCase or SCREAMING_SNAKE_CASE","'myMyLikePost' is assigned a value but never used.","React Hook useCallback has a missing dependency: '_handleScroll'. Either include it or remove the dependency array.",["580"],"React Hook React.useEffect has a missing dependency: 'handleScroll'. Either include it or remove the dependency array.",["581"],["582"],"no-global-assign","no-unsafe-negation",{"messageId":"583","fix":"584","desc":"585"},{"messageId":"586","fix":"587","desc":"588"},{"messageId":"583","fix":"589","desc":"585"},{"messageId":"586","fix":"590","desc":"588"},{"messageId":"583","fix":"591","desc":"585"},{"messageId":"586","fix":"592","desc":"588"},{"messageId":"583","fix":"593","desc":"585"},{"messageId":"586","fix":"594","desc":"588"},{"messageId":"583","fix":"595","desc":"585"},{"messageId":"586","fix":"596","desc":"588"},{"messageId":"583","fix":"597","desc":"585"},{"messageId":"586","fix":"598","desc":"588"},{"messageId":"583","fix":"599","desc":"585"},{"messageId":"586","fix":"600","desc":"588"},{"messageId":"583","fix":"601","desc":"585"},{"messageId":"586","fix":"602","desc":"588"},{"messageId":"583","fix":"603","desc":"585"},{"messageId":"586","fix":"604","desc":"588"},{"messageId":"583","fix":"605","desc":"585"},{"messageId":"586","fix":"606","desc":"588"},{"desc":"607","fix":"608"},{"desc":"609","fix":"610"},{"desc":"611","fix":"612"},{"desc":"613","fix":"614"},{"desc":"615","fix":"616"},{"desc":"617","fix":"618"},{"desc":"619","fix":"620"},{"desc":"621","fix":"622"},{"desc":"623","fix":"624"},{"desc":"613","fix":"625"},[1070,1070]," rel=\"noreferrer\"",[1708,1708],{"desc":"626","fix":"627"},[1191,1191],{"desc":"626","fix":"628"},{"desc":"629","fix":"630"},{"desc":"631","fix":"632"},{"desc":"633","fix":"634"},"removeEscape",{"range":"635","text":"636"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"637","text":"638"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"639","text":"636"},{"range":"640","text":"638"},{"range":"641","text":"636"},{"range":"642","text":"638"},{"range":"643","text":"636"},{"range":"644","text":"638"},{"range":"645","text":"636"},{"range":"646","text":"638"},{"range":"647","text":"636"},{"range":"648","text":"638"},{"range":"649","text":"636"},{"range":"650","text":"638"},{"range":"651","text":"636"},{"range":"652","text":"638"},{"range":"653","text":"636"},{"range":"654","text":"638"},{"range":"655","text":"636"},{"range":"656","text":"638"},"Update the dependencies array to be: [addPost.category, dispatch, isCreate, params, post_one]",{"range":"657","text":"658"},"Update the dependencies array to be: [dispatch, pid]",{"range":"659","text":"660"},"Update the dependencies array to be: [search_keyword, pageNum, pageNum1, pageNum2, search_type, dispatch]",{"range":"661","text":"662"},"Update the dependencies array to be: [getMoreItem, inView]",{"range":"663","text":"664"},"Update the dependencies array to be: [dispatch, tabList]",{"range":"665","text":"666"},"Update the dependencies array to be: [nickname, token]",{"range":"667","text":"668"},"Update the dependencies array to be: [dispatch, list.length, pid]",{"range":"669","text":"670"},"Update the dependencies array to be: [currTab, dispatch]",{"range":"671","text":"672"},"Update the dependencies array to be: [TabList, dispatch, pageNum, pageNum1]",{"range":"673","text":"674"},{"range":"675","text":"664"},"Update the dependencies array to be: [stompConnect, stompDisConnect]",{"range":"676","text":"677"},{"range":"678","text":"677"},"Update the dependencies array to be: [_handleScroll]",{"range":"679","text":"680"},"Update the dependencies array to be: [handleScroll, is_next, loading]",{"range":"681","text":"682"},"Update the dependencies array to be: [dispatch]",{"range":"683","text":"684"},[1218,1219],"",[1218,1218],"\\",[1220,1221],[1220,1220],[1222,1223],[1222,1222],[1226,1227],[1226,1226],[1234,1235],[1234,1234],[1248,1249],[1248,1248],[1255,1256],[1255,1255],[1257,1258],[1257,1257],[1259,1260],[1259,1259],[1261,1262],[1261,1261],[1473,1475],"[addPost.category, dispatch, isCreate, params, post_one]",[1876,1878],"[dispatch, pid]",[1586,1631],"[search_keyword, pageNum, pageNum1, pageNum2, search_type, dispatch]",[1980,1988],"[getMoreItem, inView]",[1268,1277],"[dispatch, tabList]",[1796,1798],"[nickname, token]",[1262,1264],"[dispatch, list.length, pid]",[647,656],"[currTab, dispatch]",[1441,1469],"[TabList, dispatch, pageNum, pageNum1]",[1854,1862],[1212,1214],"[stompConnect, stompDisConnect]",[1267,1269],[592,601],"[_handleScroll]",[912,930],"[handleScroll, is_next, loading]",[502,504],"[dispatch]"]