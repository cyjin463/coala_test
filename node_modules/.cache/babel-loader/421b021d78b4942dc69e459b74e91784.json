{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport produce from \"immer\";\nimport axios from \"axios\";\nimport { apis } from \"../../shared/api\";\nimport { apiUrl } from \"../../elements/testApiUrl\";\nconst GET_POST = \"GET_POST\";\nconst GET_POSTCHK = \"GET_POSTCHK\";\nconst ONE_POST = \"ONE_POST\";\nconst ADD_POST = \"ADD_POST\";\nconst EDIT_POST = \"EDIT_POST\";\nconst DEL_POST = \"DEL_POST\";\nconst IMG_POST = \"IMG_POST\";\nconst getPost = createAction(GET_POST, post => ({\n  post\n}));\nconst getPostNoChk = createAction(GET_POSTCHK, post => ({\n  post\n}));\nconst addPost = createAction(ADD_POST, post => ({\n  post\n}));\nconst editPost = createAction(EDIT_POST, post => ({\n  post\n}));\nconst delPost = createAction(DEL_POST, pid => ({\n  pid\n}));\nconst imgPost = createAction(IMG_POST, preview => ({\n  preview\n}));\nconst initialState = {\n  list: [],\n  nockeckList: [],\n  preview: \"\"\n}; // ===================================================================\n// ======================== 게시글 리스트 가지고오기========================\n\nconst getPostDB = () => {\n  return function (dispatch, getState, _ref) {\n    let {\n      history\n    } = _ref;\n    apis.getpost().then(res => {\n      dispatch(getPost(res.data));\n    }).catch(err => {\n      console.log(\"error get post\");\n    });\n  };\n};\n\nconst getPostNocheckDB = () => {\n  return function (dispatch, getState, _ref2) {\n    let {\n      history\n    } = _ref2;\n    apis.getpostnocheck().then(res => {\n      dispatch(getPostNoChk(res.data));\n    }).catch(err => {\n      console.log(\"error get post\");\n    });\n  };\n}; // ====================================================================\n// ======================== 선택한 게시글 가지고오기 ========================\n\n\nconst getOnePostDB = pid => {\n  return function (dispatch, getState, _ref3) {\n    let {\n      history\n    } = _ref3;\n    apis.onepost(pid).then(res => {\n      dispatch(getPost(res.data));\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n}; // =====================================================================\n// ================================ 추가 ================================\n\n\nconst addPostDB = _ref4 => {\n  let {\n    title,\n    comment,\n    tags,\n    category\n  } = _ref4;\n  return function (dispatch, getState, _ref5) {\n    let {\n      history\n    } = _ref5;\n    const token_res = sessionStorage.getItem(\"token\");\n    const img_list = getState().post.preview;\n    console.log(img_list);\n    const formData = new FormData();\n    formData.append(\"images\", img_list);\n\n    if (!img_list) {\n      axios({\n        method: \"post\",\n        url: `${apiUrl}/islogin/post/write`,\n        data: {\n          postTitle: title,\n          postComment: comment,\n          postImg: null,\n          tags: tags,\n          category: category\n        },\n        headers: {\n          Authorization: `${token_res}`\n        }\n      }).then(res => {\n        dispatch(addPost({\n          title,\n          comment,\n          imgUrl: null,\n          tags,\n          pid: res.data\n        }));\n        history.replace(\"/\");\n      });\n    } else {\n      axios.post(`${apiUrl}/images/upload`, formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          Authorization: `${token_res}`\n        }\n      }).then(res => {\n        const imgUrl = res.data.url;\n        return imgUrl;\n      }).then(imgUrl => {\n        axios({\n          method: \"post\",\n          url: `${apiUrl}/islogin/post/write`,\n          data: {\n            postTitle: title,\n            postComment: comment,\n            postImg: imgUrl,\n            tags: tags,\n            category: category\n          },\n          headers: {\n            Authorization: `${token_res}`\n          }\n        }).then(res => {\n          dispatch(addPost({\n            title,\n            comment,\n            imgUrl,\n            tags,\n            pid: res.data\n          }));\n          history.replace(\"/\");\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  };\n}; // =====================================================================\n// ================================ 수정 ================================\n\n\nconst editPostDB = props => {\n  return function (dispatch, getState, _ref6) {\n    let {\n      history\n    } = _ref6;\n    console.log(props);\n    const {\n      blogUrl,\n      career,\n      category,\n      createdAt,\n      nickname,\n      pid,\n      postComment,\n      postImg,\n      postLikeCount,\n      postTitle,\n      status,\n      tag,\n      uid,\n      userImage\n    } = props;\n    const token_res = {\n      Authorization: sessionStorage.getItem(\"token\") ? sessionStorage.getItem(\"token\") : \"Authorization\"\n    };\n    const img_list = getState().post.preview;\n    const formData = new FormData();\n    formData.append(\"images\", img_list);\n\n    if (!img_list) {\n      axios({\n        method: \"PUT\",\n        url: `${apiUrl}/islogin/post/revice/${pid}`,\n        data: {\n          pid: pid,\n          postTitle: postTitle,\n          postComment: postComment,\n          postImg: postImg,\n          tags: tag,\n          category: category\n        },\n        headers: {\n          Authorization: `${token_res}`\n        }\n      }).then(() => {\n        dispatch(editPost({\n          postTitle,\n          postComment,\n          tag,\n          category,\n          pid\n        }));\n        history.replace(`/detail/${pid}`);\n        window.scrollTo(0, 0);\n      });\n    } else {\n      axios.post(`${apiUrl}/images/upload`, formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          Authorization: `${token_res}`\n        }\n      }).then(res => {\n        const imgUrl = res.data.url;\n        return imgUrl;\n      }).then(imgUrl => {\n        axios({\n          method: \"PUT\",\n          url: `${apiUrl}/islogin/post/revice/${pid}`,\n          data: {\n            pid: pid,\n            postTitle: postTitle,\n            postComment: postComment,\n            postImg: imgUrl,\n            tags: tag,\n            category: category\n          },\n          headers: {\n            Authorization: `${token_res}`\n          }\n        }).then(() => {\n          dispatch(editPost({\n            postTitle,\n            postComment,\n            tag,\n            category,\n            pid\n          }));\n          history.replace(`/detail/${pid}`);\n          window.scrollTo(0, 0);\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  };\n}; // =====================================================================\n// ================================ 삭제 ================================\n\n\nconst delPostDB = pid => {\n  return function (dispatch, getState, _ref7) {\n    let {\n      history\n    } = _ref7;\n    apis.delpost(pid).then(res => {\n      dispatch(delPost(pid));\n      history.replace(\"/\");\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n};\n\nconst postLikeDB = (uid, pid) => {\n  return function (dispatch, getState, _ref8) {\n    let {\n      history\n    } = _ref8;\n    apis.likepost(uid, pid).then(res => {\n      const post_list = getState().post.list;\n      let like_count = \"\";\n\n      if (res.data.postLike === \"true\") {\n        like_count = post_list.postLikeCount + 1;\n      } else {\n        like_count = post_list.postLikeCount - 1;\n      }\n\n      dispatch(getPost({ ...post_list,\n        post_list,\n        postLikeCount: like_count\n      }));\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n}; // =====================================================================\n// ============================== reducer ==============================\n\n\nexport default handleActions({\n  [GET_POST]: (state, action) => produce(state, draft => {\n    draft.list = action.payload.post;\n  }),\n  [GET_POSTCHK]: (state, action) => produce(state, draft => {\n    draft.nockeckList = action.payload.post;\n  }),\n  [ADD_POST]: (state, action) => produce(state, draft => {\n    draft.list.push(action.payload.post);\n    draft.preview = \"\";\n  }),\n  [EDIT_POST]: (state, action) => produce(state, draft => {\n    draft.list = action.payload.post;\n    draft.preview = \"\";\n  }),\n  [DEL_POST]: (state, action) => produce(state, draft => {\n    draft.list = draft.list;\n  }),\n  [IMG_POST]: (state, action) => produce(state, draft => {\n    draft.preview = action.payload.preview;\n  })\n}, initialState);\nconst actionCreators = {\n  getPostDB,\n  getOnePostDB,\n  addPostDB,\n  editPostDB,\n  delPostDB,\n  imgPost,\n  getPostNocheckDB,\n  postLikeDB\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/cyj/sun/src/redux/modules/post.js"],"names":["createAction","handleActions","produce","axios","apis","apiUrl","GET_POST","GET_POSTCHK","ONE_POST","ADD_POST","EDIT_POST","DEL_POST","IMG_POST","getPost","post","getPostNoChk","addPost","editPost","delPost","pid","imgPost","preview","initialState","list","nockeckList","getPostDB","dispatch","getState","history","getpost","then","res","data","catch","err","console","log","getPostNocheckDB","getpostnocheck","getOnePostDB","onepost","addPostDB","title","comment","tags","category","token_res","sessionStorage","getItem","img_list","formData","FormData","append","method","url","postTitle","postComment","postImg","headers","Authorization","imgUrl","replace","editPostDB","props","blogUrl","career","createdAt","nickname","postLikeCount","status","tag","uid","userImage","window","scrollTo","delPostDB","delpost","postLikeDB","likepost","post_list","like_count","postLike","state","action","draft","payload","push","actionCreators"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport produce from \"immer\";\nimport axios from \"axios\";\nimport { apis } from \"../../shared/api\";\nimport { apiUrl } from \"../../elements/testApiUrl\";\n\nconst GET_POST = \"GET_POST\";\nconst GET_POSTCHK = \"GET_POSTCHK\";\nconst ONE_POST = \"ONE_POST\";\nconst ADD_POST = \"ADD_POST\";\nconst EDIT_POST = \"EDIT_POST\";\nconst DEL_POST = \"DEL_POST\";\nconst IMG_POST = \"IMG_POST\";\n\nconst getPost = createAction(GET_POST, (post) => ({ post }));\nconst getPostNoChk = createAction(GET_POSTCHK, (post) => ({ post }));\nconst addPost = createAction(ADD_POST, (post) => ({ post }));\nconst editPost = createAction(EDIT_POST, (post) => ({ post }));\nconst delPost = createAction(DEL_POST, (pid) => ({ pid }));\nconst imgPost = createAction(IMG_POST, (preview) => ({ preview }));\n\nconst initialState = {\n  list: [],\n  nockeckList: [],\n  preview: \"\",\n};\n\n// ===================================================================\n// ======================== 게시글 리스트 가지고오기========================\n\nconst getPostDB = () => {\n  return function (dispatch, getState, { history }) {\n    apis\n      .getpost()\n      .then((res) => {\n        dispatch(getPost(res.data));\n      })\n      .catch((err) => {\n        console.log(\"error get post\");\n      });\n  };\n};\n\nconst getPostNocheckDB = () => {\n  return function (dispatch, getState, { history }) {\n    apis\n      .getpostnocheck()\n      .then((res) => {\n        dispatch(getPostNoChk(res.data));\n      })\n      .catch((err) => {\n        console.log(\"error get post\");\n      });\n  };\n};\n\n// ====================================================================\n// ======================== 선택한 게시글 가지고오기 ========================\nconst getOnePostDB = (pid) => {\n  return function (dispatch, getState, { history }) {\n    apis\n      .onepost(pid)\n      .then((res) => {\n        dispatch(getPost(res.data));\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n\n// =====================================================================\n// ================================ 추가 ================================\nconst addPostDB = ({ title, comment, tags, category }) => {\n  return function (dispatch, getState, { history }) {\n    const token_res = sessionStorage.getItem(\"token\");\n    const img_list = getState().post.preview;\n    console.log(img_list);\n    const formData = new FormData();\n    formData.append(\"images\", img_list);\n    if (!img_list) {\n      axios({\n        method: \"post\",\n        url: `${apiUrl}/islogin/post/write`,\n        data: {\n          postTitle: title,\n          postComment: comment,\n          postImg: null,\n          tags: tags,\n          category: category,\n        },\n        headers: { Authorization: `${token_res}` },\n      }).then((res) => {\n        dispatch(\n          addPost({ title, comment, imgUrl: null, tags, pid: res.data })\n        );\n        history.replace(\"/\");\n      });\n    } else {\n      axios\n        .post(`${apiUrl}/images/upload`, formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\",\n            Authorization: `${token_res}`,\n          },\n        })\n        .then((res) => {\n          const imgUrl = res.data.url;\n          return imgUrl;\n        })\n        .then((imgUrl) => {\n          axios({\n            method: \"post\",\n            url: `${apiUrl}/islogin/post/write`,\n            data: {\n              postTitle: title,\n              postComment: comment,\n              postImg: imgUrl,\n              tags: tags,\n              category: category,\n            },\n            headers: { Authorization: `${token_res}` },\n          }).then((res) => {\n            dispatch(addPost({ title, comment, imgUrl, tags, pid: res.data }));\n            history.replace(\"/\");\n          });\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n};\n\n// =====================================================================\n// ================================ 수정 ================================\nconst editPostDB = (props) => {\n  return function (dispatch, getState, { history }) {\n    console.log(props);\n    const {\n      blogUrl,\n      career,\n      category,\n      createdAt,\n      nickname,\n      pid,\n      postComment,\n      postImg,\n      postLikeCount,\n      postTitle,\n      status,\n      tag,\n      uid,\n      userImage,\n    } = props;\n\n    const token_res = {\n      Authorization: sessionStorage.getItem(\"token\")\n        ? sessionStorage.getItem(\"token\")\n        : \"Authorization\",\n    };\n    const img_list = getState().post.preview;\n    const formData = new FormData();\n    formData.append(\"images\", img_list);\n\n    if (!img_list) {\n      axios({\n        method: \"PUT\",\n        url: `${apiUrl}/islogin/post/revice/${pid}`,\n        data: {\n          pid: pid,\n          postTitle: postTitle,\n          postComment: postComment,\n          postImg: postImg,\n          tags: tag,\n          category: category,\n        },\n        headers: { Authorization: `${token_res}` },\n      }).then(() => {\n        dispatch(editPost({ postTitle, postComment, tag, category, pid }));\n        history.replace(`/detail/${pid}`);\n        window.scrollTo(0, 0);\n      });\n    } else {\n      axios\n        .post(`${apiUrl}/images/upload`, formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\",\n            Authorization: `${token_res}`,\n          },\n        })\n        .then((res) => {\n          const imgUrl = res.data.url;\n          return imgUrl;\n        })\n        .then((imgUrl) => {\n          axios({\n            method: \"PUT\",\n            url: `${apiUrl}/islogin/post/revice/${pid}`,\n            data: {\n              pid: pid,\n              postTitle: postTitle,\n              postComment: postComment,\n              postImg: imgUrl,\n              tags: tag,\n              category: category,\n            },\n            headers: { Authorization: `${token_res}` },\n          }).then(() => {\n            dispatch(editPost({ postTitle, postComment, tag, category, pid }));\n            history.replace(`/detail/${pid}`);\n            window.scrollTo(0, 0);\n          });\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n};\n\n// =====================================================================\n// ================================ 삭제 ================================\nconst delPostDB = (pid) => {\n  return function (dispatch, getState, { history }) {\n    apis\n      .delpost(pid)\n      .then((res) => {\n        dispatch(delPost(pid));\n        history.replace(\"/\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\nconst postLikeDB = (uid, pid) => {\n  return function (dispatch, getState, { history }) {\n    apis\n      .likepost(uid, pid)\n      .then((res) => {\n        const post_list = getState().post.list;\n        let like_count = \"\";\n        if (res.data.postLike === \"true\") {\n          like_count = post_list.postLikeCount + 1;\n        } else {\n          like_count = post_list.postLikeCount - 1;\n        }\n\n        dispatch(\n          getPost({ ...post_list, post_list, postLikeCount: like_count })\n        );\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n// =====================================================================\n// ============================== reducer ==============================\nexport default handleActions(\n  {\n    [GET_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list = action.payload.post;\n      }),\n    [GET_POSTCHK]: (state, action) =>\n      produce(state, (draft) => {\n        draft.nockeckList = action.payload.post;\n      }),\n    [ADD_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list.push(action.payload.post);\n        draft.preview = \"\";\n      }),\n    [EDIT_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list = action.payload.post;\n        draft.preview = \"\";\n      }),\n    [DEL_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list = draft.list;\n      }),\n    [IMG_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.preview = action.payload.preview;\n      }),\n  },\n  initialState\n);\n\nconst actionCreators = {\n  getPostDB,\n  getOnePostDB,\n  addPostDB,\n  editPostDB,\n  delPostDB,\n  imgPost,\n  getPostNocheckDB,\n  postLikeDB,\n};\n\nexport { actionCreators };\n"]},"metadata":{},"sourceType":"module"}