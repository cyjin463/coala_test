{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport produce from \"immer\";\nimport axios from \"axios\";\nimport { apis } from \"../../shared/api\";\nimport { apiUrl } from \"../../elements/testApiUrl\";\nconst GET_ANSWER = \"GET_ANSWER\";\nconst ADD_ANSWER = \"ADD_ANSWER\";\nconst EDIT_ANSWER = \"EDIT_ANSWER\";\nconst DEL_ANSWER = \"DEL_ANSWER\";\nconst LIKE_ANSWER = \"LIKE_ANSWER\";\nconst AS_IMG_POST = \"AS_IMG_POST\";\nconst getAnswer = createAction(GET_ANSWER, list => ({\n  list\n}));\nconst addAnswer = createAction(ADD_ANSWER, list => ({\n  list\n}));\nconst editAnswer = createAction(EDIT_ANSWER, list => ({\n  list\n}));\nconst likeAnswer = createAction(LIKE_ANSWER, list => ({\n  list\n}));\nconst delAnswer = createAction(DEL_ANSWER, list => ({\n  list\n}));\nconst asImgPost = createAction(AS_IMG_POST, asPreview => ({\n  asPreview\n}));\nconst initialState = {\n  list: [],\n  editList: [],\n  asPreview: \"\",\n  status: false\n};\n\nconst getAnswerDB = pid => {\n  return function (dispatch, getState, _ref) {\n    let {\n      history\n    } = _ref;\n    apis.getanswer(pid).then(res => {\n      dispatch(getAnswer(res.data));\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n};\n\nconst addAnswerDB = _ref2 => {\n  let {\n    pid,\n    uid,\n    answerTitle,\n    answerComment\n  } = _ref2;\n  return function (dispatch, getState, _ref3) {\n    let {\n      history\n    } = _ref3;\n    const token_res = sessionStorage.getItem(\"token\");\n    const img_list = getState().answer.asPreview;\n    const formData = new FormData();\n    formData.append(\"images\", img_list);\n\n    if (!img_list) {\n      axios({\n        method: \"post\",\n        url: `${apiUrl}/islogin/answer/${pid}`,\n        data: {\n          pid: pid,\n          uid: uid,\n          answerTitle: answerTitle,\n          answerComment: answerComment,\n          answerImg: null\n        },\n        headers: {\n          Authorization: token_res\n        }\n      }).then(res => {\n        dispatch(addAnswer({\n          pid,\n          uid,\n          answerTitle: answerTitle,\n          answerComment: answerComment,\n          answerImg: null,\n          answerId: res.data,\n          answerLike: false,\n          blogUrl: null,\n          career: null,\n          commnetResponseDtoList: [],\n          createdAt: \"\",\n          nickname: \"\",\n          userImage: null\n        }));\n      });\n    } else {\n      axios.post(`${apiUrl}/images/upload`, formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          Authorization: `${token_res}`\n        }\n      }).then(res => {\n        console.log(\"img업로드 성공\");\n        const imgUrl = res.data.url;\n        return imgUrl;\n      }).then(imgUrl => {\n        console.log(\"img업로드 성공\");\n        axios({\n          method: \"post\",\n          url: `${apiUrl}/islogin/answer/${pid}`,\n          data: {\n            pid: pid,\n            uid: uid,\n            answerTitle: answerTitle,\n            answerComment: answerComment,\n            answerImg: imgUrl\n          },\n          headers: {\n            Authorization: token_res\n          }\n        }).then(res => {\n          dispatch(addAnswer({\n            pid,\n            uid,\n            answerTitle: answerTitle,\n            answerComment: answerComment,\n            answerImg: imgUrl,\n            answerId: res.data,\n            answerLike: false,\n            blogUrl: null,\n            career: null,\n            commnetResponseDtoList: [],\n            createdAt: \"\",\n            nickname: \"\",\n            userImage: null\n          }));\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  };\n};\n\nconst editAnswerDB = props => {\n  return function (dispatch, getState, _ref4) {\n    let {\n      history\n    } = _ref4;\n    const {\n      uid,\n      pid,\n      answerId,\n      answerUid,\n      userImage,\n      answerComment,\n      answerImg,\n      answerTitle,\n      blogUrl,\n      nickname,\n      createdAt,\n      career,\n      commnetResponseDtoList\n    } = props;\n    const token_res = sessionStorage.getItem(\"token\");\n    const img_list = getState().answer.asPreview;\n    const formData = new FormData();\n    formData.append(\"images\", img_list);\n\n    if (!img_list) {\n      axios({\n        method: \"put\",\n        url: `${apiUrl}/islogin/answer/revice/${answerId}`,\n        data: {\n          answerTitle: answerTitle,\n          answerComment: answerComment,\n          answerImg: answerImg\n        },\n        headers: {\n          Authorization: token_res\n        }\n      }).then(res => {\n        const list = {\n          uid,\n          pid,\n          answerId,\n          answerUid,\n          userImage,\n          answerComment,\n          answerImg,\n          answerTitle,\n          blogUrl,\n          nickname,\n          createdAt,\n          career,\n          commnetResponseDtoList\n        };\n        const _answer_list = getState().answer.list;\n\n        const answer_list = _answer_list.map(v => v.answerId === answerId ? list : v);\n\n        dispatch(editAnswer(answer_list)); // window.location.replace(`/detail/${pid}`);\n      });\n    } else {\n      axios.post(`${apiUrl}/images/upload`, formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          Authorization: `${token_res}`\n        }\n      }).then(res => {\n        const imgUrl = res.data.url;\n        return imgUrl;\n      }).then(imgUrl => {\n        console.log(\"img업로드 성공\");\n        console.log(imgUrl);\n        axios({\n          method: \"put\",\n          url: `${apiUrl}/islogin/answer/revice/${answerId}`,\n          data: {\n            answerTitle: answerTitle,\n            answerComment: answerComment,\n            answerImg: imgUrl\n          },\n          headers: {\n            Authorization: token_res\n          }\n        }).then(res => {\n          const list = {\n            uid,\n            pid,\n            answerId,\n            answerUid,\n            userImage,\n            answerComment,\n            answerImg: imgUrl,\n            answerTitle,\n            blogUrl,\n            nickname,\n            createdAt,\n            career,\n            commnetResponseDtoList\n          };\n          const _answer_list = getState().answer.list;\n\n          const answer_list = _answer_list.map(v => v.answerId === answerId ? list : v);\n\n          dispatch(editAnswer(answer_list)); // window.location.replace(`/detail/${pid}`);\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  };\n};\n\nconst delAnswerDB = answsrId => {\n  return function (dispatch, getState, _ref5) {\n    let {\n      history\n    } = _ref5;\n    apis.delanswer(answsrId).then(() => {\n      const _answer_list = getState().answer.list;\n\n      const answer_list = _answer_list.filter(v => v.answerId !== answsrId);\n\n      dispatch(delAnswer(answer_list));\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n};\n\nconst chooseAnswerDB = props => {\n  return function (dispatch, getState) {\n    console.log(props);\n    const {\n      uid,\n      pid,\n      answerId,\n      answerUid,\n      userImage,\n      answerComment,\n      answerImg,\n      answerTitle,\n      blogUrl,\n      nickname,\n      createdAt,\n      career,\n      commnetResponseDtoList,\n      status\n    } = props;\n    apis.chooseAnswer(uid, pid, answerId, answerUid).then(res => {\n      const status = res.data.status;\n      const list = {\n        uid,\n        pid,\n        answerId,\n        answerUid,\n        userImage,\n        answerComment,\n        answerImg,\n        answerTitle,\n        blogUrl,\n        nickname,\n        createdAt,\n        career,\n        commnetResponseDtoList,\n        status: status\n      };\n      const _answer_list = getState().answer.list;\n\n      const answer_list = _answer_list.map(v => v.answerId === answerId ? list : v);\n\n      dispatch(likeAnswer(answer_list)); // window.location.replace(`/detail/${pid}`);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n};\n\nexport default handleActions({\n  [GET_ANSWER]: (state, action) => produce(state, draft => {\n    draft.list = action.payload.list;\n  }),\n  [ADD_ANSWER]: (state, action) => produce(state, draft => {\n    draft.list.unshift(action.payload.list);\n    draft.asPreview = \"\";\n  }),\n  [EDIT_ANSWER]: (state, action) => produce(state, draft => {\n    draft.list = action.payload.list;\n    draft.asPreview = \"\";\n  }),\n  [DEL_ANSWER]: (state, action) => produce(state, draft => {\n    draft.list = action.payload.list;\n  }),\n  [LIKE_ANSWER]: (state, action) => produce(state, draft => {\n    draft.list = action.payload.list;\n  }),\n  [AS_IMG_POST]: (state, action) => produce(state, draft => {\n    draft.asPreview = action.payload.asPreview;\n  })\n}, initialState);\nconst actionCreators = {\n  getAnswerDB,\n  addAnswerDB,\n  editAnswerDB,\n  delAnswerDB,\n  chooseAnswerDB,\n  asImgPost\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/cyj/sun/src/redux/modules/answer.js"],"names":["createAction","handleActions","produce","axios","apis","apiUrl","GET_ANSWER","ADD_ANSWER","EDIT_ANSWER","DEL_ANSWER","LIKE_ANSWER","AS_IMG_POST","getAnswer","list","addAnswer","editAnswer","likeAnswer","delAnswer","asImgPost","asPreview","initialState","editList","status","getAnswerDB","pid","dispatch","getState","history","getanswer","then","res","data","catch","err","console","log","addAnswerDB","uid","answerTitle","answerComment","token_res","sessionStorage","getItem","img_list","answer","formData","FormData","append","method","url","answerImg","headers","Authorization","answerId","answerLike","blogUrl","career","commnetResponseDtoList","createdAt","nickname","userImage","post","imgUrl","editAnswerDB","props","answerUid","_answer_list","answer_list","map","v","delAnswerDB","answsrId","delanswer","filter","chooseAnswerDB","chooseAnswer","state","action","draft","payload","unshift","actionCreators"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport produce from \"immer\";\nimport axios from \"axios\";\nimport { apis } from \"../../shared/api\";\nimport { apiUrl } from \"../../elements/testApiUrl\";\n\nconst GET_ANSWER = \"GET_ANSWER\";\nconst ADD_ANSWER = \"ADD_ANSWER\";\nconst EDIT_ANSWER = \"EDIT_ANSWER\";\nconst DEL_ANSWER = \"DEL_ANSWER\";\nconst LIKE_ANSWER = \"LIKE_ANSWER\";\nconst AS_IMG_POST = \"AS_IMG_POST\";\n\nconst getAnswer = createAction(GET_ANSWER, (list) => ({ list }));\nconst addAnswer = createAction(ADD_ANSWER, (list) => ({ list }));\nconst editAnswer = createAction(EDIT_ANSWER, (list) => ({ list }));\nconst likeAnswer = createAction(LIKE_ANSWER, (list) => ({ list }));\nconst delAnswer = createAction(DEL_ANSWER, (list) => ({ list }));\nconst asImgPost = createAction(AS_IMG_POST, (asPreview) => ({ asPreview }));\n\nconst initialState = {\n  list: [],\n  editList: [],\n  asPreview: \"\",\n  status: false,\n};\n\nconst getAnswerDB = (pid) => {\n  return function (dispatch, getState, { history }) {\n    apis\n      .getanswer(pid)\n      .then((res) => {\n        dispatch(getAnswer(res.data));\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n\nconst addAnswerDB = ({ pid, uid, answerTitle, answerComment }) => {\n  return function (dispatch, getState, { history }) {\n    const token_res = sessionStorage.getItem(\"token\");\n    const img_list = getState().answer.asPreview;\n    const formData = new FormData();\n    formData.append(\"images\", img_list);\n\n    if (!img_list) {\n      axios({\n        method: \"post\",\n        url: `${apiUrl}/islogin/answer/${pid}`,\n        data: {\n          pid: pid,\n          uid: uid,\n          answerTitle: answerTitle,\n          answerComment: answerComment,\n          answerImg: null,\n        },\n        headers: { Authorization: token_res },\n      }).then((res) => {\n        dispatch(\n          addAnswer({\n            pid,\n            uid,\n            answerTitle: answerTitle,\n            answerComment: answerComment,\n            answerImg: null,\n            answerId: res.data,\n            answerLike: false,\n            blogUrl: null,\n            career: null,\n            commnetResponseDtoList: [],\n            createdAt: \"\",\n            nickname: \"\",\n            userImage: null,\n          })\n        );\n      });\n    } else {\n      axios\n        .post(`${apiUrl}/images/upload`, formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\",\n            Authorization: `${token_res}`,\n          },\n        })\n        .then((res) => {\n          console.log(\"img업로드 성공\");\n          const imgUrl = res.data.url;\n          return imgUrl;\n        })\n        .then((imgUrl) => {\n          console.log(\"img업로드 성공\");\n          axios({\n            method: \"post\",\n            url: `${apiUrl}/islogin/answer/${pid}`,\n            data: {\n              pid: pid,\n              uid: uid,\n              answerTitle: answerTitle,\n              answerComment: answerComment,\n              answerImg: imgUrl,\n            },\n            headers: { Authorization: token_res },\n          }).then((res) => {\n            dispatch(\n              addAnswer({\n                pid,\n                uid,\n                answerTitle: answerTitle,\n                answerComment: answerComment,\n                answerImg: imgUrl,\n                answerId: res.data,\n                answerLike: false,\n                blogUrl: null,\n                career: null,\n                commnetResponseDtoList: [],\n                createdAt: \"\",\n                nickname: \"\",\n                userImage: null,\n              })\n            );\n          });\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n};\n\nconst editAnswerDB = (props) => {\n  return function (dispatch, getState, { history }) {\n    const {\n      uid,\n      pid,\n      answerId,\n      answerUid,\n      userImage,\n      answerComment,\n      answerImg,\n      answerTitle,\n      blogUrl,\n      nickname,\n      createdAt,\n      career,\n      commnetResponseDtoList,\n    } = props;\n\n    const token_res = sessionStorage.getItem(\"token\");\n    const img_list = getState().answer.asPreview;\n    const formData = new FormData();\n    formData.append(\"images\", img_list);\n\n    if (!img_list) {\n      axios({\n        method: \"put\",\n        url: `${apiUrl}/islogin/answer/revice/${answerId}`,\n        data: {\n          answerTitle: answerTitle,\n          answerComment: answerComment,\n          answerImg: answerImg,\n        },\n        headers: { Authorization: token_res },\n      }).then((res) => {\n        const list = {\n          uid,\n          pid,\n          answerId,\n          answerUid,\n          userImage,\n          answerComment,\n          answerImg,\n          answerTitle,\n          blogUrl,\n          nickname,\n          createdAt,\n          career,\n          commnetResponseDtoList,\n        };\n        const _answer_list = getState().answer.list;\n        const answer_list = _answer_list.map((v) =>\n          v.answerId === answerId ? list : v\n        );\n\n        dispatch(editAnswer(answer_list));\n        // window.location.replace(`/detail/${pid}`);\n      });\n    } else {\n      axios\n        .post(`${apiUrl}/images/upload`, formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\",\n            Authorization: `${token_res}`,\n          },\n        })\n        .then((res) => {\n          const imgUrl = res.data.url;\n          return imgUrl;\n        })\n        .then((imgUrl) => {\n          console.log(\"img업로드 성공\");\n          console.log(imgUrl);\n          axios({\n            method: \"put\",\n            url: `${apiUrl}/islogin/answer/revice/${answerId}`,\n            data: {\n              answerTitle: answerTitle,\n              answerComment: answerComment,\n              answerImg: imgUrl,\n            },\n            headers: { Authorization: token_res },\n          }).then((res) => {\n            const list = {\n              uid,\n              pid,\n              answerId,\n              answerUid,\n              userImage,\n              answerComment,\n              answerImg: imgUrl,\n              answerTitle,\n              blogUrl,\n              nickname,\n              createdAt,\n              career,\n              commnetResponseDtoList,\n            };\n            const _answer_list = getState().answer.list;\n            const answer_list = _answer_list.map((v) =>\n              v.answerId === answerId ? list : v\n            );\n\n            dispatch(editAnswer(answer_list));\n            // window.location.replace(`/detail/${pid}`);\n          });\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n};\n\nconst delAnswerDB = (answsrId) => {\n  return function (dispatch, getState, { history }) {\n    apis\n      .delanswer(answsrId)\n      .then(() => {\n        const _answer_list = getState().answer.list;\n        const answer_list = _answer_list.filter((v) => v.answerId !== answsrId);\n        dispatch(delAnswer(answer_list));\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n\nconst chooseAnswerDB = (props) => {\n  return function (dispatch, getState) {\n    console.log(props);\n\n    const {\n      uid,\n      pid,\n      answerId,\n      answerUid,\n      userImage,\n      answerComment,\n      answerImg,\n      answerTitle,\n      blogUrl,\n      nickname,\n      createdAt,\n      career,\n      commnetResponseDtoList,\n      status,\n    } = props;\n\n    apis\n      .chooseAnswer(uid, pid, answerId, answerUid)\n      .then((res) => {\n        const status = res.data.status;\n        const list = {\n          uid,\n          pid,\n          answerId,\n          answerUid,\n          userImage,\n          answerComment,\n          answerImg,\n          answerTitle,\n          blogUrl,\n          nickname,\n          createdAt,\n          career,\n          commnetResponseDtoList,\n          status: status,\n        };\n\n        const _answer_list = getState().answer.list;\n        const answer_list = _answer_list.map((v) =>\n          v.answerId === answerId ? list : v\n        );\n\n        dispatch(likeAnswer(answer_list));\n        // window.location.replace(`/detail/${pid}`);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n\nexport default handleActions(\n  {\n    [GET_ANSWER]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list = action.payload.list;\n      }),\n    [ADD_ANSWER]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list.unshift(action.payload.list);\n        draft.asPreview = \"\";\n      }),\n    [EDIT_ANSWER]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list = action.payload.list;\n        draft.asPreview = \"\";\n      }),\n    [DEL_ANSWER]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list = action.payload.list;\n      }),\n    [LIKE_ANSWER]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list = action.payload.list;\n      }),\n    [AS_IMG_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.asPreview = action.payload.asPreview;\n      }),\n  },\n  initialState\n);\n\nconst actionCreators = {\n  getAnswerDB,\n  addAnswerDB,\n  editAnswerDB,\n  delAnswerDB,\n  chooseAnswerDB,\n  asImgPost,\n};\n\nexport { actionCreators };\n"]},"metadata":{},"sourceType":"module"}