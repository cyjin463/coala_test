{"ast":null,"code":"import axios from \"axios\";\nimport { apiUrl } from \"../elements/testApiUrl\"; // 사용자 정의 인스턴스 기본 설정 참고 (https://yamoo9.github.io/axios/guide/config-defaults.html#%EA%B8%80%EB%A1%9C%EB%B2%8C-axios-%EA%B8%B0%EB%B3%B8-defaults-%EC%84%A4%EC%A0%95)\n\nconst instance = axios.create({\n  baseURL: apiUrl,\n  headers: {\n    \"content-type\": \"application/json;charset=UTF-8\",\n    // 자바스크립트는 json형태로 받아와야 한다.\n    accept: \"application/json\"\n  }\n}); // Tip. html form 태그를 사용하여 post 방식으로 요청하거나, jQuery의 ajax 등의 요철을 할때\n// default Content-Type은 'application/json,'이 아니라 'application/x-www-form-urlencoded'다.\n// interceptors의 역할 => then이나 catch로 처리되기 전\n// 요청(request)이나 응답(response)을 가로채 어떠한 작업을 수행할 수 있게 한다. 참고 (https://yamoo9.github.io/axios/guide/interceptors.html)\n\ninstance.interceptors.request.use(function (config) {\n  const accessToken = sessionStorage.token;\n  config.headers.common[\"Authorization\"] = `${accessToken}`; // header에 토큰값을 넣는다 => header에 토큰값이 있어 앞으로 request를 자유자재로 할 수 있다.\n\n  return config;\n}); // 데이터 요청 to 서버\n\nexport const apis = {\n  // ==================== post api ====================//\n  getpost: () => instance.get(`/post/get/check`),\n  getpostnocheck: () => instance.get(`/post/get/nocheck`),\n  onepost: pid => instance.get(`/post/detailget/${pid}`),\n  delpost: pid => instance.delete(`/islogin/post/delete/${pid}`),\n  likepost: (uid, pid) => instance.post(`/islogin/post/like`, {\n    uid: uid,\n    pid: pid\n  }),\n  // ==================== answer api ====================//\n  getanswer: pid => instance.get(`/answer/get/${pid}`),\n  addanswer: (pid, uid, title, comment, img) => instance.post(`/islogin/answer/${pid}`, {\n    uid: uid,\n    pid: pid,\n    answerTitle: title,\n    answerComment: comment,\n    answerImg: img\n  }),\n  editanswer: (answsrId, title, comment, img) => instance.put(`/islogin/answer/revice/${answsrId}`, {\n    answerTitle: title,\n    answerComment: comment,\n    answerImg: img\n  }),\n  delanswer: answsrId => instance.delete(`/islogin/answer/delete/${answsrId}`, {\n    answsrId: answsrId\n  }),\n  chooseAnswer: (uid, pid, answerId, answerUid) => instance.post(`/islogin/answer/like/`, {\n    uid: uid,\n    pid: pid,\n    answerId: answerId,\n    answerUid: answerUid\n  }),\n  // ==================== tag api ====================//\n  tagsearch: tag => instance.get(`${apiUrl}/tag/search/${tag}`),\n  totalRanking: () => instance.get(`/user/ranking/total`),\n  monthRanking: () => instance.get(`/user/ranking/month`),\n  weekRanking: () => instance.get(`/user/ranking/weekend`),\n  mytotalRanking: () => instance.get(`/islogin/ranking/total`),\n  mymonthRanking: () => instance.get(`/islogin/ranking/month`),\n  myweekRanking: () => instance.get(`/islogin/ranking/weekend`)\n};","map":{"version":3,"sources":["/Users/cyj/sun/src/shared/api.js"],"names":["axios","apiUrl","instance","create","baseURL","headers","accept","interceptors","request","use","config","accessToken","sessionStorage","token","common","apis","getpost","get","getpostnocheck","onepost","pid","delpost","delete","likepost","uid","post","getanswer","addanswer","title","comment","img","answerTitle","answerComment","answerImg","editanswer","answsrId","put","delanswer","chooseAnswer","answerId","answerUid","tagsearch","tag","totalRanking","monthRanking","weekRanking","mytotalRanking","mymonthRanking","myweekRanking"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { apiUrl } from \"../elements/testApiUrl\";\n\n// 사용자 정의 인스턴스 기본 설정 참고 (https://yamoo9.github.io/axios/guide/config-defaults.html#%EA%B8%80%EB%A1%9C%EB%B2%8C-axios-%EA%B8%B0%EB%B3%B8-defaults-%EC%84%A4%EC%A0%95)\nconst instance = axios.create({\n  baseURL: apiUrl,\n  headers: {\n    \"content-type\": \"application/json;charset=UTF-8\", // 자바스크립트는 json형태로 받아와야 한다.\n    accept: \"application/json\",\n  },\n});\n// Tip. html form 태그를 사용하여 post 방식으로 요청하거나, jQuery의 ajax 등의 요철을 할때\n// default Content-Type은 'application/json,'이 아니라 'application/x-www-form-urlencoded'다.\n\n// interceptors의 역할 => then이나 catch로 처리되기 전\n// 요청(request)이나 응답(response)을 가로채 어떠한 작업을 수행할 수 있게 한다. 참고 (https://yamoo9.github.io/axios/guide/interceptors.html)\ninstance.interceptors.request.use(function (config) {\n  const accessToken = sessionStorage.token;\n  config.headers.common[\"Authorization\"] = `${accessToken}`; // header에 토큰값을 넣는다 => header에 토큰값이 있어 앞으로 request를 자유자재로 할 수 있다.\n  return config;\n});\n\n// 데이터 요청 to 서버\nexport const apis = {\n  // ==================== post api ====================//\n  getpost: () => instance.get(`/post/get/check`),\n\n  getpostnocheck: () => instance.get(`/post/get/nocheck`),\n\n  onepost: (pid) => instance.get(`/post/detailget/${pid}`),\n\n  delpost: (pid) => instance.delete(`/islogin/post/delete/${pid}`),\n\n  likepost: (uid, pid) =>\n    instance.post(`/islogin/post/like`, {\n      uid: uid,\n      pid: pid,\n    }),\n\n  // ==================== answer api ====================//\n  getanswer: (pid) => instance.get(`/answer/get/${pid}`),\n\n  addanswer: (pid, uid, title, comment, img) =>\n    instance.post(`/islogin/answer/${pid}`, {\n      uid: uid,\n      pid: pid,\n      answerTitle: title,\n      answerComment: comment,\n      answerImg: img,\n    }),\n\n  editanswer: (answsrId, title, comment, img) =>\n    instance.put(`/islogin/answer/revice/${answsrId}`, {\n      answerTitle: title,\n      answerComment: comment,\n      answerImg: img,\n    }),\n\n  delanswer: (answsrId) =>\n    instance.delete(`/islogin/answer/delete/${answsrId}`, {\n      answsrId: answsrId,\n    }),\n\n  chooseAnswer: (uid, pid, answerId, answerUid) =>\n    instance.post(`/islogin/answer/like/`, {\n      uid: uid,\n      pid: pid,\n      answerId: answerId,\n      answerUid: answerUid,\n    }),\n\n  // ==================== tag api ====================//\n  tagsearch: (tag) => instance.get(`${apiUrl}/tag/search/${tag}`),\n  totalRanking: () => instance.get(`/user/ranking/total`),\n  monthRanking: () => instance.get(`/user/ranking/month`),\n  weekRanking: () => instance.get(`/user/ranking/weekend`),\n\n  mytotalRanking: () => instance.get(`/islogin/ranking/total`),\n  mymonthRanking: () => instance.get(`/islogin/ranking/month`),\n  myweekRanking: () => instance.get(`/islogin/ranking/weekend`),\n};\n"]},"metadata":{},"sourceType":"module"}