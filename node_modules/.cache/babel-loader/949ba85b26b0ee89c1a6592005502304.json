{"ast":null,"code":"import React from \"react\";\nimport axios from \"axios\";\nimport { createAction, handleActions } from \"redux-actions\";\nimport produce from \"immer\";\nimport { apiUrl } from \"../../elements/testApiUrl\";\nconst token = sessionStorage.getItem(\"token\");\nconst COMMENT_ADD = \"COMMENT_ADD\";\nconst COMMENT_DELETE = \"COMMENT_DELETE\";\nconst addComment = createAction(COMMENT_ADD, comment => ({\n  comment\n}));\nconst deleteComment = createAction(COMMENT_DELETE, comment => ({\n  comment\n}));\nconst initialState = {\n  list: []\n};\n\nconst addCommentDB = (uid, pid, answerId, comment) => {\n  return function (dispatch, getState, _ref) {\n    let {\n      history\n    } = _ref;\n    console.log(uid, pid, answerId, comment);\n    axios.post(`${apiUrl}/islogin/comment/write`, {\n      uid: uid,\n      pid: pid,\n      answerId: answerId,\n      comment: comment\n    }, {\n      headers: {\n        Authorization: token\n      }\n    }).then(res => {\n      console.log(res);\n      dispatch(addComment(res));\n      window.location.reload();\n    }).catch(err => {\n      console.log(err);\n      window.alert(\"댓글 추가 실패\");\n    });\n  };\n};\n\nconst editCommentDB = (commentId, comment, pid) => {\n  console.log(commentId, comment);\n  return function (dispatch, getState, _ref2) {\n    let {\n      history\n    } = _ref2;\n    axios.put(`${apiUrl}/islogin/comment/revice/${commentId}`, {\n      comment: comment\n    }, {\n      headers: {\n        Authorization: token\n      }\n    }).then(res => {\n      console.log(res);\n      window.location.replace(`/detail/${pid}`);\n    }).catch(err => {\n      console.log(err);\n      window.alert(\"댓글 수정 실패\");\n    });\n  };\n};\n\nconst deleteCommentDB = commentId => {\n  return function (dispatch, getState, _ref3) {\n    let {\n      history\n    } = _ref3;\n    console.log(commentId);\n    axios.delete(`${apiUrl}/islogin/comment/delete/${commentId}`, {\n      headers: {\n        Authorization: token\n      }\n    }).then(res => {\n      console.log(res);\n      dispatch(deleteComment(commentId));\n      window.location.reload();\n    }).catch(err => {\n      console.log(err);\n      window.alert(\"댓글 삭제 실패\");\n    });\n  };\n};\n\nexport default handleActions({\n  [COMMENT_ADD]: (state, action) => produce(state, draft => {\n    draft.list.push(action.payload);\n  }),\n  [COMMENT_DELETE]: (state, action) => produce(state, draft => {})\n}, initialState);\nconst actionCreators = {\n  addComment,\n  deleteComment,\n  addCommentDB,\n  editCommentDB,\n  deleteCommentDB\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/cyj/sun/src/redux/modules/comment.js"],"names":["React","axios","createAction","handleActions","produce","apiUrl","token","sessionStorage","getItem","COMMENT_ADD","COMMENT_DELETE","addComment","comment","deleteComment","initialState","list","addCommentDB","uid","pid","answerId","dispatch","getState","history","console","log","post","headers","Authorization","then","res","window","location","reload","catch","err","alert","editCommentDB","commentId","put","replace","deleteCommentDB","delete","state","action","draft","push","payload","actionCreators"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport { createAction, handleActions } from \"redux-actions\";\nimport produce from \"immer\";\nimport { apiUrl } from \"../../elements/testApiUrl\";\n\nconst token = sessionStorage.getItem(\"token\");\n\nconst COMMENT_ADD = \"COMMENT_ADD\";\nconst COMMENT_DELETE = \"COMMENT_DELETE\";\n\nconst addComment = createAction(COMMENT_ADD, (comment) => ({ comment }));\nconst deleteComment = createAction(COMMENT_DELETE, (comment) => ({ comment }));\n\nconst initialState = {\n  list: [],\n};\n\nconst addCommentDB = (uid, pid, answerId, comment) => {\n  return function (dispatch, getState, { history }) {\n    console.log(uid, pid, answerId, comment);\n    axios\n      .post(\n        `${apiUrl}/islogin/comment/write`,\n        {\n          uid: uid,\n          pid: pid,\n          answerId: answerId,\n          comment: comment,\n        },\n        {\n          headers: {\n            Authorization: token,\n          },\n        }\n      )\n      .then((res) => {\n        console.log(res);\n        dispatch(addComment(res));\n        window.location.reload();\n      })\n      .catch((err) => {\n        console.log(err);\n        window.alert(\"댓글 추가 실패\");\n      });\n  };\n};\n\nconst editCommentDB = (commentId, comment, pid) => {\n  console.log(commentId, comment);\n  return function (dispatch, getState, { history }) {\n    axios\n      .put(\n        `${apiUrl}/islogin/comment/revice/${commentId}`,\n        {\n          comment: comment,\n        },\n        {\n          headers: {\n            Authorization: token,\n          },\n        }\n      )\n      .then((res) => {\n        console.log(res);\n        window.location.replace(`/detail/${pid}`);\n      })\n      .catch((err) => {\n        console.log(err);\n        window.alert(\"댓글 수정 실패\");\n      });\n  };\n};\n\nconst deleteCommentDB = (commentId) => {\n  return function (dispatch, getState, { history }) {\n    console.log(commentId);\n    axios\n      .delete(`${apiUrl}/islogin/comment/delete/${commentId}`, {\n        headers: {\n          Authorization: token,\n        },\n      })\n      .then((res) => {\n        console.log(res);\n        dispatch(deleteComment(commentId));\n        window.location.reload();\n      })\n      .catch((err) => {\n        console.log(err);\n        window.alert(\"댓글 삭제 실패\");\n      });\n  };\n};\n\nexport default handleActions(\n  {\n    [COMMENT_ADD]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list.push(action.payload);\n      }),\n    [COMMENT_DELETE]: (state, action) => produce(state, (draft) => {}),\n  },\n  initialState\n);\n\nconst actionCreators = {\n  addComment,\n  deleteComment,\n  addCommentDB,\n  editCommentDB,\n  deleteCommentDB,\n};\n\nexport { actionCreators };\n"]},"metadata":{},"sourceType":"module"}