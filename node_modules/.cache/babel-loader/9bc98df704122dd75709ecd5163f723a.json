{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport produce from \"immer\";\nimport axios from \"axios\";\nimport { apis } from \"../../shared/api\";\nimport { apiUrl } from \"../../elements/testApiUrl\";\nconst GET_POST = \"GET_POST\";\nconst GET_ONE_POST = \"GET_ONE_POST\";\nconst GET_POSTCHK = \"GET_POSTCHK\";\nconst ADD_POST = \"ADD_POST\";\nconst EDIT_POST = \"EDIT_POST\";\nconst DEL_POST = \"DEL_POST\";\nconst IMG_POST = \"IMG_POST\";\nconst LOADING = \"LOADING\";\nconst getPost = createAction(GET_POST, post => ({\n  post\n}));\nconst getPostNoChk = createAction(GET_POSTCHK, post => ({\n  post\n}));\nconst getOnePost = createAction(GET_ONE_POST, post => ({\n  post\n}));\nconst addPost = createAction(ADD_POST, post => ({\n  post\n}));\nconst editPost = createAction(EDIT_POST, post => ({\n  post\n}));\nconst delPost = createAction(DEL_POST, pid => ({\n  pid\n}));\nconst imgPost = createAction(IMG_POST, preview => ({\n  preview\n}));\nconst loading = createAction(LOADING, is_loading => ({\n  is_loading\n}));\nconst initialState = {\n  list: [],\n  one_list: [],\n  nockeckList: [],\n  preview: \"\",\n  paging: {\n    start: null,\n    next: null,\n    size: 3\n  },\n  is_loading: false\n}; // ===================================================================\n// ======================== 게시글 리스트 가지고오기========================\n\nconst getPostDB = page => {\n  return function (dispatch, getState, _ref) {\n    let {\n      history\n    } = _ref;\n    apis.getpost(page).then(res => {\n      const query = res.data;\n      const list = [];\n      const _list = getState().post.list;\n\n      if (page === 1) {\n        dispatch(getPost(query));\n      } else {\n        const _list = getState().post.list;\n        dispatch(getPost(_list.concat(query)));\n      }\n    }).catch(err => {\n      console.log(\"error get post\");\n    });\n  };\n};\n\nconst getPostNocheckDB = page => {\n  return function (dispatch, getState, _ref2) {\n    let {\n      history\n    } = _ref2;\n    apis.getpostnocheck(page).then(res => {\n      const query = res.data;\n      console.log(query);\n\n      if (page === 1) {\n        // let post = query.reduce(\n        //   (acc, cur) => {\n        //     const key = cur[\"pid\"];\n        //     if (!acc[key]) {\n        //       return [...acc, cur];\n        //     } else {\n        //       return acc;\n        //     }\n        //   },\n        //   [\"\"]\n        // );\n        dispatch(getPostNoChk(query));\n      } else {\n        const _list = getState().post.nockeckList;\n        dispatch(getPostNoChk(_list.concat(query)));\n\n        let post = _list.concat(query).reduce((acc, cur) => {\n          const key = cur[\"pid\"];\n\n          if (!acc[key]) {\n            return [...acc, cur];\n          } else {\n            return acc;\n          }\n        }, [\"\"]);\n      }\n    }).catch(err => {\n      console.log(\"error get post\");\n    });\n  };\n}; // ====================================================================\n// ======================== 선택한 게시글 가지고오기 ========================\n\n\nconst getOnePostDB = pid => {\n  return function (dispatch, getState, _ref3) {\n    let {\n      history\n    } = _ref3;\n    apis.onepost(pid).then(res => {\n      dispatch(getOnePost(res.data));\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n}; // =====================================================================\n// ================================ 추가 ================================\n\n\nconst addPostDB = props => {\n  return function (dispatch, getState, _ref4) {\n    let {\n      history\n    } = _ref4;\n    const {\n      title,\n      comment,\n      tags,\n      category\n    } = props;\n    const token_res = sessionStorage.getItem(\"token\");\n    const img_list = getState().post.preview;\n    const formData = new FormData();\n    formData.append(\"images\", img_list);\n\n    if (!img_list) {\n      axios({\n        method: \"post\",\n        url: `${apiUrl}/islogin/post/write`,\n        data: {\n          postTitle: title,\n          postComment: comment,\n          postImg: null,\n          tags: tags ? tags : null,\n          category: category\n        },\n        headers: {\n          Authorization: `${token_res}`\n        }\n      }).then(res => {\n        dispatch(addPost({\n          title,\n          comment,\n          imgUrl: null,\n          tags: tags ? tags : null,\n          pid: res.data\n        })); // history.replace(\"/\");\n      });\n    } else {\n      axios.post(`${apiUrl}/images/upload`, formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          Authorization: `${token_res}`\n        }\n      }).then(res => {\n        const imgUrl = res.data.url;\n        return imgUrl;\n      }).then(imgUrl => {\n        axios({\n          method: \"post\",\n          url: `${apiUrl}/islogin/post/write`,\n          data: {\n            postTitle: title,\n            postComment: comment,\n            postImg: imgUrl,\n            tags: tags ? tags : null,\n            category: category\n          },\n          headers: {\n            Authorization: `${token_res}`\n          }\n        }).then(res => {\n          dispatch(addPost({\n            title,\n            comment,\n            imgUrl,\n            tags: tags ? tags : null,\n            pid: res.data\n          }));\n          history.replace(\"/\");\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  };\n}; // =====================================================================\n// ================================ 수정 ================================\n\n\nconst editPostDB = props => {\n  return function (dispatch, getState, _ref5) {\n    let {\n      history\n    } = _ref5;\n    const {\n      category,\n      pid,\n      postComment,\n      postImg,\n      postTitle,\n      tag\n    } = props;\n    const token_res = sessionStorage.getItem(\"token\");\n    const img_list = getState().post.preview;\n    const formData = new FormData();\n    formData.append(\"images\", img_list);\n\n    if (!img_list) {\n      axios({\n        method: \"PUT\",\n        url: `${apiUrl}/islogin/post/revice/${pid}`,\n        data: {\n          pid: pid,\n          postTitle: postTitle,\n          postComment: postComment,\n          postImg: postImg,\n          tags: tag,\n          category: category\n        },\n        headers: {\n          Authorization: `${token_res}`\n        }\n      }).then(() => {\n        dispatch(editPost({\n          postTitle,\n          postComment,\n          tag,\n          category,\n          pid\n        }));\n        history.replace(`/detail/${pid}`);\n        window.scrollTo(0, 0);\n      });\n    } else {\n      axios.post(`${apiUrl}/images/upload`, formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          Authorization: `${token_res}`\n        }\n      }).then(res => {\n        const imgUrl = res.data.url;\n        return imgUrl;\n      }).then(imgUrl => {\n        axios({\n          method: \"PUT\",\n          url: `${apiUrl}/islogin/post/revice/${pid}`,\n          data: {\n            pid: pid,\n            postTitle: postTitle,\n            postComment: postComment,\n            postImg: imgUrl,\n            tags: tag,\n            category: category\n          },\n          headers: {\n            Authorization: `${token_res}`\n          }\n        }).then(() => {\n          dispatch(editPost({\n            postTitle,\n            postComment,\n            tag,\n            category,\n            pid\n          }));\n          history.replace(`/detail/${pid}`);\n          window.scrollTo(0, 0);\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  };\n}; // =====================================================================\n// ================================ 삭제 ================================\n\n\nconst delPostDB = pid => {\n  return function (dispatch, getState, _ref6) {\n    let {\n      history\n    } = _ref6;\n    apis.delpost(pid).then(res => {\n      dispatch(delPost(pid));\n      history.replace(\"/\");\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n};\n\nconst postLikeDB = (uid, pid) => {\n  return function (dispatch, getState, _ref7) {\n    let {\n      history\n    } = _ref7;\n    apis.likepost(uid, pid).then(res => {\n      const post_list = getState().post.list;\n      let like_count = 0;\n\n      if (res.data.postLike === \"true\") {\n        like_count = post_list.postLikeCount + 1;\n      } else {\n        like_count = post_list.postLikeCount - 1;\n      }\n\n      dispatch(getPost({ ...post_list,\n        post_list,\n        postLikeCount: like_count\n      }));\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n}; // =====================================================================\n// ============================== reducer ==============================\n\n\nexport default handleActions({\n  [GET_POST]: (state, action) => produce(state, draft => {\n    draft.list = action.payload.post;\n  }),\n  [GET_POSTCHK]: (state, action) => produce(state, draft => {\n    draft.nockeckList = action.payload.post;\n  }),\n  [GET_ONE_POST]: (state, action) => produce(state, draft => {\n    draft.one_list = action.payload.post;\n  }),\n  [ADD_POST]: (state, action) => produce(state, draft => {\n    draft.list.push(action.payload.post);\n    draft.preview = \"\";\n  }),\n  [EDIT_POST]: (state, action) => produce(state, draft => {\n    draft.one_list = action.payload.post;\n    draft.preview = \"\";\n  }),\n  [DEL_POST]: (state, action) => produce(state, draft => {\n    draft.list = draft.list;\n  }),\n  [IMG_POST]: (state, action) => produce(state, draft => {\n    draft.preview = action.payload.preview;\n  }),\n  [LOADING]: (state, action) => produce(state, draft => {\n    draft.is_loading = action.payload.is_loading;\n  })\n}, initialState);\nconst actionCreators = {\n  getPostDB,\n  getOnePostDB,\n  addPostDB,\n  editPostDB,\n  delPostDB,\n  imgPost,\n  getPostNocheckDB,\n  postLikeDB\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/cyj/sun/src/redux/modules/post.js"],"names":["createAction","handleActions","produce","axios","apis","apiUrl","GET_POST","GET_ONE_POST","GET_POSTCHK","ADD_POST","EDIT_POST","DEL_POST","IMG_POST","LOADING","getPost","post","getPostNoChk","getOnePost","addPost","editPost","delPost","pid","imgPost","preview","loading","is_loading","initialState","list","one_list","nockeckList","paging","start","next","size","getPostDB","page","dispatch","getState","history","getpost","then","res","query","data","_list","concat","catch","err","console","log","getPostNocheckDB","getpostnocheck","reduce","acc","cur","key","getOnePostDB","onepost","addPostDB","props","title","comment","tags","category","token_res","sessionStorage","getItem","img_list","formData","FormData","append","method","url","postTitle","postComment","postImg","headers","Authorization","imgUrl","replace","editPostDB","tag","window","scrollTo","delPostDB","delpost","postLikeDB","uid","likepost","post_list","like_count","postLike","postLikeCount","state","action","draft","payload","push","actionCreators"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport produce from \"immer\";\nimport axios from \"axios\";\nimport { apis } from \"../../shared/api\";\nimport { apiUrl } from \"../../elements/testApiUrl\";\n\nconst GET_POST = \"GET_POST\";\nconst GET_ONE_POST = \"GET_ONE_POST\";\nconst GET_POSTCHK = \"GET_POSTCHK\";\nconst ADD_POST = \"ADD_POST\";\nconst EDIT_POST = \"EDIT_POST\";\nconst DEL_POST = \"DEL_POST\";\nconst IMG_POST = \"IMG_POST\";\nconst LOADING = \"LOADING\";\n\nconst getPost = createAction(GET_POST, (post) => ({ post }));\nconst getPostNoChk = createAction(GET_POSTCHK, (post) => ({ post }));\nconst getOnePost = createAction(GET_ONE_POST, (post) => ({ post }));\nconst addPost = createAction(ADD_POST, (post) => ({ post }));\nconst editPost = createAction(EDIT_POST, (post) => ({ post }));\nconst delPost = createAction(DEL_POST, (pid) => ({ pid }));\nconst imgPost = createAction(IMG_POST, (preview) => ({ preview }));\nconst loading = createAction(LOADING, (is_loading) => ({ is_loading }));\n\nconst initialState = {\n  list: [],\n  one_list: [],\n  nockeckList: [],\n  preview: \"\",\n  paging: { start: null, next: null, size: 3 },\n  is_loading: false,\n};\n\n// ===================================================================\n// ======================== 게시글 리스트 가지고오기========================\n\nconst getPostDB = (page) => {\n  return function (dispatch, getState, { history }) {\n    apis\n      .getpost(page)\n      .then((res) => {\n        const query = res.data;\n        const list = [];\n        const _list = getState().post.list;\n\n        if (page === 1) {\n          dispatch(getPost(query));\n        } else {\n          const _list = getState().post.list;\n          dispatch(getPost(_list.concat(query)));\n        }\n      })\n      .catch((err) => {\n        console.log(\"error get post\");\n      });\n  };\n};\n\nconst getPostNocheckDB = (page) => {\n  return function (dispatch, getState, { history }) {\n    apis\n      .getpostnocheck(page)\n      .then((res) => {\n        const query = res.data;\n        console.log(query);\n        if (page === 1) {\n          // let post = query.reduce(\n          //   (acc, cur) => {\n          //     const key = cur[\"pid\"];\n          //     if (!acc[key]) {\n          //       return [...acc, cur];\n          //     } else {\n          //       return acc;\n          //     }\n          //   },\n          //   [\"\"]\n          // );\n\n          dispatch(getPostNoChk(query));\n        } else {\n          const _list = getState().post.nockeckList;\n          dispatch(getPostNoChk(_list.concat(query)));\n\n          let post = _list.concat(query).reduce(\n            (acc, cur) => {\n              const key = cur[\"pid\"];\n              if (!acc[key]) {\n                return [...acc, cur];\n              } else {\n                return acc;\n              }\n            },\n            [\"\"]\n          );\n        }\n      })\n      .catch((err) => {\n        console.log(\"error get post\");\n      });\n  };\n};\n\n// ====================================================================\n// ======================== 선택한 게시글 가지고오기 ========================\nconst getOnePostDB = (pid) => {\n  return function (dispatch, getState, { history }) {\n    apis\n      .onepost(pid)\n      .then((res) => {\n        dispatch(getOnePost(res.data));\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n\n// =====================================================================\n// ================================ 추가 ================================\nconst addPostDB = (props) => {\n  return function (dispatch, getState, { history }) {\n    const { title, comment, tags, category } = props;\n    const token_res = sessionStorage.getItem(\"token\");\n    const img_list = getState().post.preview;\n    const formData = new FormData();\n    formData.append(\"images\", img_list);\n\n    if (!img_list) {\n      axios({\n        method: \"post\",\n        url: `${apiUrl}/islogin/post/write`,\n        data: {\n          postTitle: title,\n          postComment: comment,\n          postImg: null,\n          tags: tags ? tags : null,\n          category: category,\n        },\n        headers: { Authorization: `${token_res}` },\n      }).then((res) => {\n        dispatch(\n          addPost({\n            title,\n            comment,\n            imgUrl: null,\n            tags: tags ? tags : null,\n            pid: res.data,\n          })\n        );\n        // history.replace(\"/\");\n      });\n    } else {\n      axios\n        .post(`${apiUrl}/images/upload`, formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\",\n            Authorization: `${token_res}`,\n          },\n        })\n        .then((res) => {\n          const imgUrl = res.data.url;\n          return imgUrl;\n        })\n        .then((imgUrl) => {\n          axios({\n            method: \"post\",\n            url: `${apiUrl}/islogin/post/write`,\n            data: {\n              postTitle: title,\n              postComment: comment,\n              postImg: imgUrl,\n              tags: tags ? tags : null,\n\n              category: category,\n            },\n            headers: { Authorization: `${token_res}` },\n          }).then((res) => {\n            dispatch(\n              addPost({\n                title,\n                comment,\n                imgUrl,\n                tags: tags ? tags : null,\n                pid: res.data,\n              })\n            );\n            history.replace(\"/\");\n          });\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n};\n\n// =====================================================================\n// ================================ 수정 ================================\nconst editPostDB = (props) => {\n  return function (dispatch, getState, { history }) {\n    const { category, pid, postComment, postImg, postTitle, tag } = props;\n    const token_res = sessionStorage.getItem(\"token\");\n    const img_list = getState().post.preview;\n    const formData = new FormData();\n    formData.append(\"images\", img_list);\n\n    if (!img_list) {\n      axios({\n        method: \"PUT\",\n        url: `${apiUrl}/islogin/post/revice/${pid}`,\n        data: {\n          pid: pid,\n          postTitle: postTitle,\n          postComment: postComment,\n          postImg: postImg,\n          tags: tag,\n          category: category,\n        },\n        headers: { Authorization: `${token_res}` },\n      }).then(() => {\n        dispatch(editPost({ postTitle, postComment, tag, category, pid }));\n        history.replace(`/detail/${pid}`);\n        window.scrollTo(0, 0);\n      });\n    } else {\n      axios\n        .post(`${apiUrl}/images/upload`, formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\",\n            Authorization: `${token_res}`,\n          },\n        })\n        .then((res) => {\n          const imgUrl = res.data.url;\n          return imgUrl;\n        })\n        .then((imgUrl) => {\n          axios({\n            method: \"PUT\",\n            url: `${apiUrl}/islogin/post/revice/${pid}`,\n            data: {\n              pid: pid,\n              postTitle: postTitle,\n              postComment: postComment,\n              postImg: imgUrl,\n              tags: tag,\n              category: category,\n            },\n            headers: { Authorization: `${token_res}` },\n          }).then(() => {\n            dispatch(editPost({ postTitle, postComment, tag, category, pid }));\n            history.replace(`/detail/${pid}`);\n            window.scrollTo(0, 0);\n          });\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n};\n\n// =====================================================================\n// ================================ 삭제 ================================\nconst delPostDB = (pid) => {\n  return function (dispatch, getState, { history }) {\n    apis\n      .delpost(pid)\n      .then((res) => {\n        dispatch(delPost(pid));\n        history.replace(\"/\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n\nconst postLikeDB = (uid, pid) => {\n  return function (dispatch, getState, { history }) {\n    apis\n      .likepost(uid, pid)\n      .then((res) => {\n        const post_list = getState().post.list;\n        let like_count = 0;\n        if (res.data.postLike === \"true\") {\n          like_count = post_list.postLikeCount + 1;\n        } else {\n          like_count = post_list.postLikeCount - 1;\n        }\n\n        dispatch(\n          getPost({ ...post_list, post_list, postLikeCount: like_count })\n        );\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n// =====================================================================\n// ============================== reducer ==============================\nexport default handleActions(\n  {\n    [GET_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list = action.payload.post;\n      }),\n    [GET_POSTCHK]: (state, action) =>\n      produce(state, (draft) => {\n        draft.nockeckList = action.payload.post;\n      }),\n    [GET_ONE_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.one_list = action.payload.post;\n      }),\n    [ADD_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list.push(action.payload.post);\n        draft.preview = \"\";\n      }),\n    [EDIT_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.one_list = action.payload.post;\n        draft.preview = \"\";\n      }),\n    [DEL_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list = draft.list;\n      }),\n    [IMG_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.preview = action.payload.preview;\n      }),\n    [LOADING]: (state, action) =>\n      produce(state, (draft) => {\n        draft.is_loading = action.payload.is_loading;\n      }),\n  },\n  initialState\n);\n\nconst actionCreators = {\n  getPostDB,\n  getOnePostDB,\n  addPostDB,\n  editPostDB,\n  delPostDB,\n  imgPost,\n  getPostNocheckDB,\n  postLikeDB,\n};\n\nexport { actionCreators };\n"]},"metadata":{},"sourceType":"module"}