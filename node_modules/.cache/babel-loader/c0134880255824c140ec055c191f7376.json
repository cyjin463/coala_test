{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport history from \"../configureStore\";\nimport axios from \"axios\";\nimport { setToken, delToken } from \"../../shared/token\";\nimport { apiUrl } from \"../../elements/testApiUrl\"; //initialState\n\nconst initialState = {\n  userinfo: {\n    uid: \"\",\n    username: \"\",\n    nickname: \"\",\n    career: \"\",\n    userImage: \"\"\n  },\n  isLogin: false,\n  isCheckUsername: false,\n  isCheckNickname: false,\n  preview: \"\"\n}; //action\n\nconst CHECK_USERNAME = \"CHECK_USERNAME\";\nconst CHECK_NICKNAME = \"CHECK_NICKNAME\";\nconst LOG_IN = \"LOG_IN\";\nconst LOG_OUT = \"LOG_OUT\";\nconst USER_EDUT = \"USER_EDUT\";\nconst IMG_POST = \"IMG_POST\"; //action creators\n\nconst setCheckUsername = createAction(CHECK_USERNAME, isCheckUsername => ({\n  isCheckUsername\n}));\nconst setCheckNickname = createAction(CHECK_NICKNAME, isCheckNickname => ({\n  isCheckNickname\n}));\nconst logIn = createAction(LOG_IN, user => ({\n  user\n}));\nconst logOut = createAction(LOG_OUT, () => ({}));\nconst logEdit = createAction(USER_EDUT, user => ({\n  user\n}));\nconst imgPost = createAction(IMG_POST, preview => ({\n  preview\n})); // //token\n\nconst token = sessionStorage.getItem(\"token\"); //middleware actions\n\nconst checkUsernameDB = (username, isCheckUsername) => {\n  return async function (dispatch, getState, _ref) {\n    let {\n      history\n    } = _ref;\n    console.log(username, isCheckUsername);\n    await axios.post(`${apiUrl}/user/signup/username`, {\n      username: username\n    }).then(res => {\n      if (res.data === true) {\n        window.alert(\"이미 존재하는 ID입니다.\");\n        return;\n      }\n\n      dispatch(setCheckUsername(!isCheckUsername));\n      console.log(\"리듀서로\");\n    });\n  };\n};\n\nconst checkNicknameDB = (userNickname, isCheckNickname) => {\n  return async function (dispatch, getState, _ref2) {\n    let {\n      history\n    } = _ref2;\n    console.log(userNickname, isCheckNickname);\n    await axios.post(`${apiUrl}/user/signup/nickname`, {\n      nickname: userNickname\n    }).then(res => {\n      if (res.data === true) {\n        window.alert(\"이미 존재하는 닉네임입니다.\");\n        return;\n      }\n\n      console.log(res);\n      dispatch(setCheckNickname(!isCheckNickname));\n    });\n  };\n};\n\nconst signupDB = (username, nickname, password, passwordCheck, career) => {\n  return function (dispatch, getState, _ref3) {\n    let {\n      history\n    } = _ref3;\n    console.log(username, nickname, password, passwordCheck, career);\n    axios.post(`${apiUrl}/user/signup`, {\n      username: username,\n      nickname: nickname,\n      password: password,\n      passwordCheck: passwordCheck,\n      career: career\n    }).then(res => {\n      window.alert(\"회원가입을 축하드립니다.\");\n      window.location.reload();\n    }).catch(err => {\n      console.log(\"회원가입 실패\", err);\n      window.alert(\"회원가입에 실패했어요\");\n    });\n  };\n};\n\nconst loginDB = (username, password) => {\n  return function (dispatch, getState, _ref4) {\n    let {\n      history\n    } = _ref4;\n    console.log(username, password);\n    axios.post(`${apiUrl}/user/login`, {\n      username: username,\n      password: password\n    }).then(res => {\n      console.log(res);\n      const token_res = res.headers.authorization;\n      setToken(token_res);\n      return token_res;\n    }).then(token_res => {\n      console.log(token_res);\n      axios({\n        method: \"post\",\n        url: `${apiUrl}/islogin/user`,\n        headers: {\n          Authorization: `${token_res}`\n        }\n      }).then(res => {\n        console.log(res);\n        sessionStorage.setItem(\"uid\", res.data.uid);\n        sessionStorage.setItem(\"username\", res.data.username);\n        sessionStorage.setItem(\"nickname\", res.data.nickname);\n        sessionStorage.setItem(\"career\", res.data.career);\n        sessionStorage.setItem(\"userImage\", res.data.userImage);\n        sessionStorage.setItem(\"url\", res.data.blogUrl);\n        sessionStorage.setItem(\"isLogin\", true);\n        console.log(\"1번\");\n        dispatch(logIn({\n          uid: res.data.uid,\n          username: res.data.username,\n          nickname: res.data.nickname,\n          career: res.data.career,\n          userImage: res.data.userImage,\n          url: res.data.blogUrl\n        }));\n        history.push(\"/\");\n        window.location.reload();\n      }).catch(err => {\n        console.log(\"로그인 확인 실패\", err);\n      });\n    }).catch(err => {\n      console.log(err);\n      window.alert(\"이메일이나 패스워드를 다시 확인해주세요!\");\n    });\n  };\n};\n\nconst logEditDB = (uid, nickname, career, url, userImg) => {\n  return function (dispatch, getState, _ref5) {\n    let {\n      history\n    } = _ref5;\n    console.log(uid, nickname, career, url);\n    axios.put(`${apiUrl}/islogin/user/getinfo/${uid}`, {\n      nickname: nickname,\n      career: career,\n      userImage: \"\",\n      blogUrl: url\n    }, {\n      headers: {\n        Authorization: token\n      }\n    }).then(res => {\n      console.log(res.data);\n      dispatch(logEdit({\n        nickname: nickname,\n        career: career,\n        userImage: userImg,\n        blogUrl: url\n      }));\n      sessionStorage.setItem(\"nickname\", nickname);\n      sessionStorage.setItem(\"career\", career);\n      sessionStorage.setItem(\"url\", url);\n      window.location.replace(\"/\");\n    }).catch(err => {\n      console.log(err);\n      window.alert(\"회원 정보 수정 실패\");\n    });\n  };\n};\n\nconst logEditDB2 = (uid, nickname, career, url, userImg) => {\n  return function (dispatch, getState, _ref6) {\n    let {\n      history\n    } = _ref6;\n    const img_list = getState().user.preview;\n    const Data = new FormData();\n    Data.append(\"images\", img_list);\n    console.log(img_list);\n    axios.post(`${apiUrl}/images/upload`, Data, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n        Authorization: token\n      }\n    }).then(res => {\n      console.log(\"img업로드 성공\");\n      const imgUrl = res.data.url;\n      return imgUrl;\n    }).then(imgUrl => {\n      axios.put(`${apiUrl}/islogin/user/getinfo/${uid}`, {\n        nickname: nickname,\n        career: career,\n        userImage: imgUrl,\n        blogUrl: url\n      }, {\n        headers: {\n          Authorization: token\n        }\n      }).then(res => {\n        console.log(res);\n        dispatch(logEdit({\n          nickname: nickname,\n          career: career,\n          userImage: userImg,\n          blogUrl: url\n        }));\n        sessionStorage.setItem(\"nickname\", nickname);\n        sessionStorage.setItem(\"career\", career);\n        sessionStorage.setItem(\"userImage\", userImg);\n        sessionStorage.setItem(\"url\", url);\n        history.push(\"/\");\n        window.location.reload();\n      });\n    }).catch(err => {\n      console.log(err);\n      window.alert(\"회원 정보 수정 실패\");\n    });\n  };\n};\n\nconst NewPassWordDB = (uid, password, newPassword, newPasswordCheck) => {\n  console.log(\"간다\");\n  return function (dispatch, getState, _ref7) {\n    let {\n      history\n    } = _ref7;\n    axios.put(`${apiUrl}/islogin/user/password/${uid}`, {\n      password: password,\n      newPassword: newPassword,\n      newPasswordCheck: newPasswordCheck\n    }, {\n      headers: {\n        Authorization: token\n      }\n    }).then(res => {\n      console.log(res.data);\n\n      if (res.data.result !== true) {\n        window.alert(\"비밀번호 수정 실패\");\n        window.location.reload();\n      } else {\n        window.alert(\"비밀번호 수정 성공\");\n        history.push(\"/\");\n        window.location.replace();\n      }\n    }).catch(err => {\n      console.log(err);\n      window.alert(\"비밀번호 수정 실패\");\n    });\n  };\n};\n\n_c = NewPassWordDB;\nexport default handleActions({\n  [CHECK_USERNAME]: (state, action) => produce(state, draft => {\n    console.log(\"CHECK_USERNAME 리듀서로 적용 완료\", state, action.payload);\n    draft.isCheckUsername = action.payload.isCheckUsername;\n    window.alert(\"해당 이메일은 사용 가능합니다.\");\n  }),\n  [CHECK_NICKNAME]: (state, action) => produce(state, draft => {\n    console.log(\"CHECK_NICKNAME 리듀서 적용\", state, action.payload);\n    draft.isCheckNickname = action.payload.isCheckNickname;\n    window.alert(\"사용 가능한 닉네임입니다.\");\n  }),\n  [LOG_IN]: (state, action) => produce(state, draft => {\n    draft.userinfo = action.payload.user;\n    draft.isLogin = true;\n  }),\n  [USER_EDUT]: (state, action) => produce(state, draft => {\n    draft.userinfo = action.payload.user;\n  }),\n  [IMG_POST]: (state, action) => produce(state, draft => {\n    draft.preview = action.payload.preview;\n  })\n}, initialState);\nconst actionCreators = {\n  signupDB,\n  checkUsernameDB,\n  checkNicknameDB,\n  loginDB,\n  logOut,\n  logEditDB,\n  logEditDB2,\n  NewPassWordDB,\n  imgPost\n};\nexport { actionCreators };\n\nvar _c;\n\n$RefreshReg$(_c, \"NewPassWordDB\");","map":{"version":3,"sources":["/Users/cyj/sun/src/redux/modules/user.js"],"names":["createAction","handleActions","produce","history","axios","setToken","delToken","apiUrl","initialState","userinfo","uid","username","nickname","career","userImage","isLogin","isCheckUsername","isCheckNickname","preview","CHECK_USERNAME","CHECK_NICKNAME","LOG_IN","LOG_OUT","USER_EDUT","IMG_POST","setCheckUsername","setCheckNickname","logIn","user","logOut","logEdit","imgPost","token","sessionStorage","getItem","checkUsernameDB","dispatch","getState","console","log","post","then","res","data","window","alert","checkNicknameDB","userNickname","signupDB","password","passwordCheck","location","reload","catch","err","loginDB","token_res","headers","authorization","method","url","Authorization","setItem","blogUrl","push","logEditDB","userImg","put","replace","logEditDB2","img_list","Data","FormData","append","imgUrl","NewPassWordDB","newPassword","newPasswordCheck","result","state","action","draft","payload","actionCreators"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport history from \"../configureStore\";\nimport axios from \"axios\";\n\nimport { setToken, delToken } from \"../../shared/token\";\nimport { apiUrl } from \"../../elements/testApiUrl\";\n\n//initialState\nconst initialState = {\n  userinfo: {\n    uid: \"\",\n    username: \"\",\n    nickname: \"\",\n    career: \"\",\n    userImage: \"\",\n  },\n  isLogin: false,\n  isCheckUsername: false,\n  isCheckNickname: false,\n  preview: \"\",\n};\n\n//action\nconst CHECK_USERNAME = \"CHECK_USERNAME\";\nconst CHECK_NICKNAME = \"CHECK_NICKNAME\";\nconst LOG_IN = \"LOG_IN\";\nconst LOG_OUT = \"LOG_OUT\";\nconst USER_EDUT = \"USER_EDUT\";\nconst IMG_POST = \"IMG_POST\";\n\n//action creators\nconst setCheckUsername = createAction(CHECK_USERNAME, (isCheckUsername) => ({\n  isCheckUsername,\n}));\nconst setCheckNickname = createAction(CHECK_NICKNAME, (isCheckNickname) => ({\n  isCheckNickname,\n}));\nconst logIn = createAction(LOG_IN, (user) => ({ user }));\nconst logOut = createAction(LOG_OUT, () => ({}));\nconst logEdit = createAction(USER_EDUT, (user) => ({ user }));\nconst imgPost = createAction(IMG_POST, (preview) => ({ preview }));\n\n// //token\nconst token = sessionStorage.getItem(\"token\");\n\n//middleware actions\nconst checkUsernameDB = (username, isCheckUsername) => {\n  return async function (dispatch, getState, { history }) {\n    console.log(username, isCheckUsername);\n    await axios\n      .post(`${apiUrl}/user/signup/username`, { username: username })\n      .then((res) => {\n        if (res.data === true) {\n          window.alert(\"이미 존재하는 ID입니다.\");\n          return;\n        }\n        dispatch(setCheckUsername(!isCheckUsername));\n        console.log(\"리듀서로\");\n      });\n  };\n};\n\nconst checkNicknameDB = (userNickname, isCheckNickname) => {\n  return async function (dispatch, getState, { history }) {\n    console.log(userNickname, isCheckNickname);\n    await axios\n      .post(`${apiUrl}/user/signup/nickname`, {\n        nickname: userNickname,\n      })\n      .then((res) => {\n        if (res.data === true) {\n          window.alert(\"이미 존재하는 닉네임입니다.\");\n          return;\n        }\n        console.log(res);\n        dispatch(setCheckNickname(!isCheckNickname));\n      });\n  };\n};\n\nconst signupDB = (username, nickname, password, passwordCheck, career) => {\n  return function (dispatch, getState, { history }) {\n    console.log(username, nickname, password, passwordCheck, career);\n    axios\n      .post(`${apiUrl}/user/signup`, {\n        username: username,\n        nickname: nickname,\n        password: password,\n        passwordCheck: passwordCheck,\n        career: career,\n      })\n      .then((res) => {\n        window.alert(\"회원가입을 축하드립니다.\");\n        window.location.reload();\n      })\n      .catch((err) => {\n        console.log(\"회원가입 실패\", err);\n        window.alert(\"회원가입에 실패했어요\");\n      });\n  };\n};\n\nconst loginDB = (username, password) => {\n  return function (dispatch, getState, { history }) {\n    console.log(username, password);\n    axios\n      .post(`${apiUrl}/user/login`, {\n        username: username,\n        password: password,\n      })\n      .then((res) => {\n        console.log(res);\n        const token_res = res.headers.authorization;\n        setToken(token_res);\n        return token_res;\n      })\n      .then((token_res) => {\n        console.log(token_res);\n        axios({\n          method: \"post\",\n          url: `${apiUrl}/islogin/user`,\n          headers: {\n            Authorization: `${token_res}`,\n          },\n        })\n          .then((res) => {\n            console.log(res);\n            sessionStorage.setItem(\"uid\", res.data.uid);\n            sessionStorage.setItem(\"username\", res.data.username);\n            sessionStorage.setItem(\"nickname\", res.data.nickname);\n            sessionStorage.setItem(\"career\", res.data.career);\n            sessionStorage.setItem(\"userImage\", res.data.userImage);\n            sessionStorage.setItem(\"url\", res.data.blogUrl);\n            sessionStorage.setItem(\"isLogin\", true);\n            console.log(\"1번\");\n            dispatch(\n              logIn({\n                uid: res.data.uid,\n                username: res.data.username,\n                nickname: res.data.nickname,\n                career: res.data.career,\n                userImage: res.data.userImage,\n                url: res.data.blogUrl,\n              })\n            );\n            history.push(\"/\");\n            window.location.reload();\n          })\n          .catch((err) => {\n            console.log(\"로그인 확인 실패\", err);\n          });\n      })\n      .catch((err) => {\n        console.log(err);\n        window.alert(\"이메일이나 패스워드를 다시 확인해주세요!\");\n      });\n  };\n};\n\nconst logEditDB = (uid, nickname, career, url, userImg) => {\n  return function (dispatch, getState, { history }) {\n    console.log(uid, nickname, career, url);\n    axios\n      .put(\n        `${apiUrl}/islogin/user/getinfo/${uid}`,\n        {\n          nickname: nickname,\n          career: career,\n          userImage: \"\",\n          blogUrl: url,\n        },\n        {\n          headers: {\n            Authorization: token,\n          },\n        }\n      )\n      .then((res) => {\n        console.log(res.data);\n        dispatch(\n          logEdit({\n            nickname: nickname,\n            career: career,\n            userImage: userImg,\n            blogUrl: url,\n          })\n        );\n        sessionStorage.setItem(\"nickname\", nickname);\n        sessionStorage.setItem(\"career\", career);\n        sessionStorage.setItem(\"url\", url);\n        window.location.replace(\"/\");\n      })\n      .catch((err) => {\n        console.log(err);\n        window.alert(\"회원 정보 수정 실패\");\n      });\n  };\n};\n\nconst logEditDB2 = (uid, nickname, career, url, userImg) => {\n  return function (dispatch, getState, { history }) {\n    const img_list = getState().user.preview;\n    const Data = new FormData();\n    Data.append(\"images\", img_list);\n    console.log(img_list);\n    axios\n      .post(`${apiUrl}/images/upload`, Data, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          Authorization: token,\n        },\n      })\n      .then((res) => {\n        console.log(\"img업로드 성공\");\n        const imgUrl = res.data.url;\n        return imgUrl;\n      })\n\n      .then((imgUrl) => {\n        axios\n          .put(\n            `${apiUrl}/islogin/user/getinfo/${uid}`,\n            {\n              nickname: nickname,\n              career: career,\n              userImage: imgUrl,\n              blogUrl: url,\n            },\n            {\n              headers: {\n                Authorization: token,\n              },\n            }\n          )\n          .then((res) => {\n            console.log(res);\n            dispatch(\n              logEdit({\n                nickname: nickname,\n                career: career,\n                userImage: userImg,\n                blogUrl: url,\n              })\n            );\n            sessionStorage.setItem(\"nickname\", nickname);\n            sessionStorage.setItem(\"career\", career);\n            sessionStorage.setItem(\"userImage\", userImg);\n            sessionStorage.setItem(\"url\", url);\n            history.push(\"/\");\n            window.location.reload();\n          });\n      })\n      .catch((err) => {\n        console.log(err);\n        window.alert(\"회원 정보 수정 실패\");\n      });\n  };\n};\n\nconst NewPassWordDB = (uid, password, newPassword, newPasswordCheck) => {\n  console.log(\"간다\");\n  return function (dispatch, getState, { history }) {\n    axios\n      .put(\n        `${apiUrl}/islogin/user/password/${uid}`,\n        {\n          password: password,\n          newPassword: newPassword,\n          newPasswordCheck: newPasswordCheck,\n        },\n        {\n          headers: {\n            Authorization: token,\n          },\n        }\n      )\n      .then((res) => {\n        console.log(res.data);\n        if (res.data.result !== true) {\n          window.alert(\"비밀번호 수정 실패\");\n          window.location.reload();\n        } else {\n          window.alert(\"비밀번호 수정 성공\");\n          history.push(\"/\");\n          window.location.replace();\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        window.alert(\"비밀번호 수정 실패\");\n      });\n  };\n};\n\nexport default handleActions(\n  {\n    [CHECK_USERNAME]: (state, action) =>\n      produce(state, (draft) => {\n        console.log(\"CHECK_USERNAME 리듀서로 적용 완료\", state, action.payload);\n        draft.isCheckUsername = action.payload.isCheckUsername;\n        window.alert(\"해당 이메일은 사용 가능합니다.\");\n      }),\n    [CHECK_NICKNAME]: (state, action) =>\n      produce(state, (draft) => {\n        console.log(\"CHECK_NICKNAME 리듀서 적용\", state, action.payload);\n        draft.isCheckNickname = action.payload.isCheckNickname;\n        window.alert(\"사용 가능한 닉네임입니다.\");\n      }),\n    [LOG_IN]: (state, action) =>\n      produce(state, (draft) => {\n        draft.userinfo = action.payload.user;\n        draft.isLogin = true;\n      }),\n    [USER_EDUT]: (state, action) =>\n      produce(state, (draft) => {\n        draft.userinfo = action.payload.user;\n      }),\n    [IMG_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.preview = action.payload.preview;\n      }),\n  },\n  initialState\n);\n\nconst actionCreators = {\n  signupDB,\n  checkUsernameDB,\n  checkNicknameDB,\n  loginDB,\n  logOut,\n  logEditDB,\n  logEditDB2,\n  NewPassWordDB,\n  imgPost,\n};\n\nexport { actionCreators };\n"]},"metadata":{},"sourceType":"module"}