{"ast":null,"code":"// import React, { useState } from \"react\";\n// import { over } from \"stompjs\";\n// import SockJS from \"sockjs-client\";\n// var stompClient = null;\n// const _Test = () => {\n//   const username1 = sessionStorage.getItem(\"nickname\");\n//   const token = {\n//     Authorization: sessionStorage.getItem(\"token\"),\n//   };\n//   const [publicChats, setpublicChats] = useState([]);\n//   const [privateChats, setprivateChats] = useState(new Map());\n//   // const [tab, setTab] = useState(\"CHATROOM\")\n//   const [userData, setUserData] = React.useState({\n//     username: \"\",\n//     message: \"\",\n//     opposingUserName: \"\",\n//     pid: \"\",\n//   });\n//   // 해당 페이지오면 바로 실행 return disconnet는 모르겠다.\n//   React.useEffect(() => {\n//     connect();\n//     return () => disconnect();\n//   }, []);\n//   // Start!!\n//   const connect = () => {\n//     // 접속하고자라는 Sock 주소 가져오기\n//     let Sock = new SockJS(\"http://175.118.48.164:7050/ws\");\n//     // let Sock = new SockJS(\"http://15.164.231.31/ws\");\n//     // Sock 열기\n//     stompClient = over(Sock);\n//     //Sock 연결하기 (헤더(토큰값 필요시 여기에 넣기), 바디(실행함수), 에러)\n//     stompClient.connect({}, onConnected, onError);\n//   };\n//   // 연결 끊기\n//   const disconnect = () => {\n//     let chatMessage = {\n//       status: \"OUT\",\n//     };\n//     stompClient.send(\n//       \"/app/message1\",\n//       token,\n//       JSON.stringify(chatMessage),\n//       console.log(\"전체 채팅방 OUT\")\n//     );\n//     stompClient.send(\n//       \"/app/user\",\n//       token,\n//       JSON.stringify(chatMessage),\n//       console.log(\"1:1 채팅방 OUT\")\n//     );\n//     stompClient.disconnect();\n//   };\n//   // input값이 바뀔때마다 userData 안에 username키의 value를 input값으로 바꾼다\n//   const handleValue = (event) => {\n//     // userData의 name의 value 값만 바꿔서 저장한다\n//     const { name, value } = event.target;\n//     setUserData({ ...userData, [name]: value });\n//   };\n//   //  연결하면 onConnented 함수 실행으로 userData 안에 connected 값을 true로 변경\n//   const onConnected = () => {\n//     // //userData 의 connected값을 true 로 바꾼다 나머지는 그대로\n//     // setUserData({...userData,\"connected\":true});\n//     // subscribe - store가 변할때 마다 호출 subscribe(함수()) / dispatch가 실행될 때마다 subscribe에 전달함수가 호출\n//     // 포스트별 채팅방만들대 이곳을 바꾸어야 할수도? ***********\n//     stompClient.subscribe(\"/topic/greetings\", Public, token);\n//     //1:1 대화에서는 topic이 아닌 quene를 사용해볼수도? ( topic은 1대 다수 - quene는 1:1)\n//     // stompClient.subscribe(\n//     //   `/queue/user${username1}`,\n//     //   token,\n//     //   onPrivateMessageReceived\n//     // );\n//     //userJoin 함수 실행\n//     userJoin();\n//   };\n//   const userJoin = () => {\n//     // chatMessage 선언 store 바뀔때마다 계속 바뀜\n//     let chatMessage = {\n//       senderName: username1,\n//       message: userData.message,\n//       opposingUserName: userData.opposingUserName,\n//       pid: userData.pid,\n//       status: \"JOIN\",\n//     };\n//     console.log(chatMessage);\n//     //포스트에따라 여기가 바뀔수도!! *****************\n//     stompClient.send(\"/app/message1\", token, JSON.stringify(chatMessage));\n//   };\n//   // 에러일경우\n//   const onError = (err) => {\n//     console.log(err);\n//   };\n//   // // 1:1메세지 (귓속말) 함수\n//   const onPrivateMessageReceived = (payload) => {\n//     let payloadData = JSON.parse(payload.body);\n//     if (privateChats.get(payloadData.senderName)) {\n//       privateChats.get(payloadData.senderName).push(payloadData);\n//       setprivateChats(new Map(privateChats));\n//     } else {\n//       let list = [];\n//       list.push(payloadData);\n//       privateChats.set(payloadData.senderName, list);\n//       setprivateChats(new Map(privateChats));\n//     }\n//   };\n//   //오픈 채팅방 메세지 보내기 함수\n//   const sendPublicMessage = () => {\n//     console.log(userData.opposingUserName);\n//     if (stompClient && userData.opposingUserName !== \"\") {\n//       let chatMessage = {\n//         senderName: username1,\n//         message: userData.message,\n//         status: \"MESSAGE\",\n//         pid: userData.pid,\n//         opposingUserName: userData.opposingUserName,\n//       };\n//       stompClient.send(\"/app/user\", token, JSON.stringify(chatMessage));\n//       setUserData({ ...userData, message: \"\" });\n//     } else {\n//       let chatMessage = {\n//         senderName: username1,\n//         message: userData.message,\n//         status: \"MESSAGE\",\n//         pid: userData.pid,\n//       };\n//       stompClient.send(\"/app/message1\", token, JSON.stringify(chatMessage));\n//       setUserData({ ...userData, message: \"\" });\n//     }\n//   };\n//   //1:1 메세지보내기 함수\n//   const sendPrivateMessage = () => {\n//     if (stompClient) {\n//       let chatMessage = {\n//         senderName: username1,\n//         message: userData.message,\n//         status: \"MESSAGE\",\n//         opposingUserName: \"jjy\",\n//       };\n//       stompClient.send(\"/app/user\", token, JSON.stringify(chatMessage));\n//       setUserData({ ...userData, message: \"\" });\n//     }\n//   };\n//   //전체 채팅방 메세지\n//   const Public = (payload) => {\n//     let payloadData = JSON.parse(payload.body);\n//     switch (payloadData.status) {\n//       case \"JOIN\":\n//         if (!privateChats.get(payloadData.senderName)) {\n//           privateChats.set(payloadData.senderName, []);\n//           setprivateChats(new Map(privateChats));\n//           console.log(publicChats);\n//         }\n//         break;\n//       case \"MESSAGE\":\n//         publicChats.push(payloadData);\n//         setpublicChats([...publicChats]);\n//         console.log(publicChats);\n//         break;\n//     }\n//   };\n//   const abc = (chat) => {\n//     console.log(chat);\n//     setUserData({ ...userData, opposingUserName: chat.senderName });\n//     console.log(userData);\n//   };\n//   return (\n//     <div className='container'>\n//       <div className='chat-box'>\n//         <div className='chat-content'>\n//           <ul className='chat-messages'>\n//             {/* <div className='member-list'>\n//           <ul>\n//             {[...privateChats.keys()].map((name, index) =>(\n//               <li onClick={()=>{setTab(name)}} className={`member ${tab===name && \"active\"}`} key={index}>\n//                 {name}\n//                 </li>\n//             ))}\n//           </ul>\n//         </div> */}\n//             {/* 오픈 채팅창 */}\n//             {/*\n//         {tab === \"CHATROOM\" && <div className='chat-content'>\n//           <ul className='chat-message'> */}\n//             {publicChats.map((chat, index) => (\n//               <li className='message' key={index}>\n//                 {/* 보낸사람이  본인이 아닐때*/}\n//                 {chat.senderName !== userData.username && (\n//                   <div className='avatar'>\n//                     <button onClick={(chat) => abc}>{chat.senderName}</button> :{\" \"}\n//                     {chat.message}\n//                   </div>\n//                 )}\n//                 {/* 채팅메세지 */}\n//                 {/* 보낸사람이 본인일때 */}\n//                 {chat.senderName === userData.username && (\n//                   <div className='avatar self'>\n//                     {chat.senderName} : {chat.message}\n//                   </div>\n//                 )}\n//               </li>\n//             ))}\n//           </ul>\n//           <div className='send-message'>\n//             <input\n//               type='text'\n//               className='input-maeeage'\n//               name='message'\n//               placeholder='메세지를 입력하세요'\n//               value={userData.message}\n//               onChange={handleValue}\n//             />\n//             <button\n//               type='button'\n//               className='send-button'\n//               onClick={sendPublicMessage}>\n//               send\n//             </button>\n//             {publicChats.count}\n//           </div>\n//         </div>\n//         {/*\n//           <div className='send-message'>\n//             <input type='text' className='input-maeeage'\n//             name='message' placeholder={'에게 메세지 보내기'} value={userData.message}\n//             onChange={handleValue}/>\n//             <button type='button' className='send-button' onClick={sendPrivateMessage}>2</button>\n//           </div> */}\n//         {/* </div>} */}\n//         {/* 1:1 채팅창 */}\n//         {/* {tab !== \"CHATROOM\" && <div className='chat-content'>\n//         <ul className='chat-message'>\n//         {[,,,privateChats.get(tab)].map((chat, index) =>(\n//               <li className='message' key={index}>\n//                 {chat.senderName !== userData.username && <div className='avatar'>{chat.senderName}</div>}\n//                 <div className='message-data'>{chat.message}</div>\n//                 {chat.senderName=== userData.username && <div className='avatar self'>{chat.senderName}</div>}\n//                 </li>\n//             ))}\n//           </ul>\n//             <div className='send-message'>\n//             <input type='text' className='input-maeeage'\n//             name='message' placeholder={`${tab}에게 메세지 보내기`} value={userData.message}\n//             onChange={handleValue}/>\n//             <button type='button' className='send-button' onClick={sendPrivateMessage}>send</button>\n//           </div>\n//         </div>} */}\n//       </div>\n//     </div>\n//   );\n// };\n// export default _Test;","map":{"version":3,"sources":["/Users/cyj/sun/src/components/_Test.js"],"names":[],"mappingssourcesContent":["// import React, { useState } from \"react\";\n// import { over } from \"stompjs\";\n// import SockJS from \"sockjs-client\";\n\n// var stompClient = null;\n\n// const _Test = () => {\n//   const username1 = sessionStorage.getItem(\"nickname\");\n//   const token = {\n//     Authorization: sessionStorage.getItem(\"token\"),\n//   };\n//   const [publicChats, setpublicChats] = useState([]);\n//   const [privateChats, setprivateChats] = useState(new Map());\n//   // const [tab, setTab] = useState(\"CHATROOM\")\n//   const [userData, setUserData] = React.useState({\n//     username: \"\",\n//     message: \"\",\n//     opposingUserName: \"\",\n//     pid: \"\",\n//   });\n//   // 해당 페이지오면 바로 실행 return disconnet는 모르겠다.\n//   React.useEffect(() => {\n//     connect();\n//     return () => disconnect();\n//   }, []);\n\n//   // Start!!\n//   const connect = () => {\n//     // 접속하고자라는 Sock 주소 가져오기\n//     let Sock = new SockJS(\"http://175.118.48.164:7050/ws\");\n//     // let Sock = new SockJS(\"http://15.164.231.31/ws\");\n//     // Sock 열기\n//     stompClient = over(Sock);\n\n//     //Sock 연결하기 (헤더(토큰값 필요시 여기에 넣기), 바디(실행함수), 에러)\n//     stompClient.connect({}, onConnected, onError);\n//   };\n\n//   // 연결 끊기\n//   const disconnect = () => {\n//     let chatMessage = {\n//       status: \"OUT\",\n//     };\n//     stompClient.send(\n//       \"/app/message1\",\n//       token,\n//       JSON.stringify(chatMessage),\n//       console.log(\"전체 채팅방 OUT\")\n//     );\n//     stompClient.send(\n//       \"/app/user\",\n//       token,\n//       JSON.stringify(chatMessage),\n//       console.log(\"1:1 채팅방 OUT\")\n//     );\n\n//     stompClient.disconnect();\n//   };\n\n//   // input값이 바뀔때마다 userData 안에 username키의 value를 input값으로 바꾼다\n//   const handleValue = (event) => {\n//     // userData의 name의 value 값만 바꿔서 저장한다\n//     const { name, value } = event.target;\n//     setUserData({ ...userData, [name]: value });\n//   };\n\n//   //  연결하면 onConnented 함수 실행으로 userData 안에 connected 값을 true로 변경\n//   const onConnected = () => {\n//     // //userData 의 connected값을 true 로 바꾼다 나머지는 그대로\n//     // setUserData({...userData,\"connected\":true});\n//     // subscribe - store가 변할때 마다 호출 subscribe(함수()) / dispatch가 실행될 때마다 subscribe에 전달함수가 호출\n//     // 포스트별 채팅방만들대 이곳을 바꾸어야 할수도? ***********\n//     stompClient.subscribe(\"/topic/greetings\", Public, token);\n\n//     //1:1 대화에서는 topic이 아닌 quene를 사용해볼수도? ( topic은 1대 다수 - quene는 1:1)\n//     // stompClient.subscribe(\n//     //   `/queue/user${username1}`,\n//     //   token,\n//     //   onPrivateMessageReceived\n//     // );\n\n//     //userJoin 함수 실행\n//     userJoin();\n//   };\n\n//   const userJoin = () => {\n//     // chatMessage 선언 store 바뀔때마다 계속 바뀜\n//     let chatMessage = {\n//       senderName: username1,\n//       message: userData.message,\n//       opposingUserName: userData.opposingUserName,\n//       pid: userData.pid,\n//       status: \"JOIN\",\n//     };\n//     console.log(chatMessage);\n//     //포스트에따라 여기가 바뀔수도!! *****************\n//     stompClient.send(\"/app/message1\", token, JSON.stringify(chatMessage));\n//   };\n\n//   // 에러일경우\n//   const onError = (err) => {\n//     console.log(err);\n//   };\n//   // // 1:1메세지 (귓속말) 함수\n//   const onPrivateMessageReceived = (payload) => {\n//     let payloadData = JSON.parse(payload.body);\n//     if (privateChats.get(payloadData.senderName)) {\n//       privateChats.get(payloadData.senderName).push(payloadData);\n//       setprivateChats(new Map(privateChats));\n//     } else {\n//       let list = [];\n//       list.push(payloadData);\n//       privateChats.set(payloadData.senderName, list);\n//       setprivateChats(new Map(privateChats));\n//     }\n//   };\n\n//   //오픈 채팅방 메세지 보내기 함수\n//   const sendPublicMessage = () => {\n//     console.log(userData.opposingUserName);\n//     if (stompClient && userData.opposingUserName !== \"\") {\n//       let chatMessage = {\n//         senderName: username1,\n//         message: userData.message,\n//         status: \"MESSAGE\",\n//         pid: userData.pid,\n//         opposingUserName: userData.opposingUserName,\n//       };\n//       stompClient.send(\"/app/user\", token, JSON.stringify(chatMessage));\n//       setUserData({ ...userData, message: \"\" });\n//     } else {\n//       let chatMessage = {\n//         senderName: username1,\n//         message: userData.message,\n//         status: \"MESSAGE\",\n//         pid: userData.pid,\n//       };\n//       stompClient.send(\"/app/message1\", token, JSON.stringify(chatMessage));\n//       setUserData({ ...userData, message: \"\" });\n//     }\n//   };\n\n//   //1:1 메세지보내기 함수\n//   const sendPrivateMessage = () => {\n//     if (stompClient) {\n//       let chatMessage = {\n//         senderName: username1,\n//         message: userData.message,\n//         status: \"MESSAGE\",\n//         opposingUserName: \"jjy\",\n//       };\n//       stompClient.send(\"/app/user\", token, JSON.stringify(chatMessage));\n//       setUserData({ ...userData, message: \"\" });\n//     }\n//   };\n\n//   //전체 채팅방 메세지\n//   const Public = (payload) => {\n//     let payloadData = JSON.parse(payload.body);\n//     switch (payloadData.status) {\n//       case \"JOIN\":\n//         if (!privateChats.get(payloadData.senderName)) {\n//           privateChats.set(payloadData.senderName, []);\n//           setprivateChats(new Map(privateChats));\n//           console.log(publicChats);\n//         }\n//         break;\n//       case \"MESSAGE\":\n//         publicChats.push(payloadData);\n//         setpublicChats([...publicChats]);\n//         console.log(publicChats);\n//         break;\n//     }\n//   };\n\n//   const abc = (chat) => {\n//     console.log(chat);\n//     setUserData({ ...userData, opposingUserName: chat.senderName });\n//     console.log(userData);\n//   };\n\n//   return (\n//     <div className='container'>\n//       <div className='chat-box'>\n//         <div className='chat-content'>\n//           <ul className='chat-messages'>\n//             {/* <div className='member-list'>\n//           <ul>\n//             {[...privateChats.keys()].map((name, index) =>(\n//               <li onClick={()=>{setTab(name)}} className={`member ${tab===name && \"active\"}`} key={index}>\n//                 {name}\n//                 </li>\n//             ))}\n//           </ul>\n//         </div> */}\n\n//             {/* 오픈 채팅창 */}\n//             {/*\n//         {tab === \"CHATROOM\" && <div className='chat-content'>\n//           <ul className='chat-message'> */}\n\n//             {publicChats.map((chat, index) => (\n//               <li className='message' key={index}>\n//                 {/* 보낸사람이  본인이 아닐때*/}\n//                 {chat.senderName !== userData.username && (\n//                   <div className='avatar'>\n//                     <button onClick={(chat) => abc}>{chat.senderName}</button> :{\" \"}\n//                     {chat.message}\n//                   </div>\n//                 )}\n//                 {/* 채팅메세지 */}\n//                 {/* 보낸사람이 본인일때 */}\n//                 {chat.senderName === userData.username && (\n//                   <div className='avatar self'>\n//                     {chat.senderName} : {chat.message}\n//                   </div>\n//                 )}\n//               </li>\n//             ))}\n//           </ul>\n\n//           <div className='send-message'>\n//             <input\n//               type='text'\n//               className='input-maeeage'\n//               name='message'\n//               placeholder='메세지를 입력하세요'\n//               value={userData.message}\n//               onChange={handleValue}\n//             />\n//             <button\n//               type='button'\n//               className='send-button'\n//               onClick={sendPublicMessage}>\n//               send\n//             </button>\n//             {publicChats.count}\n//           </div>\n//         </div>\n//         {/*\n//           <div className='send-message'>\n//             <input type='text' className='input-maeeage'\n//             name='message' placeholder={'에게 메세지 보내기'} value={userData.message}\n//             onChange={handleValue}/>\n//             <button type='button' className='send-button' onClick={sendPrivateMessage}>2</button>\n//           </div> */}\n//         {/* </div>} */}\n\n//         {/* 1:1 채팅창 */}\n//         {/* {tab !== \"CHATROOM\" && <div className='chat-content'>\n//         <ul className='chat-message'>\n//         {[,,,privateChats.get(tab)].map((chat, index) =>(\n//               <li className='message' key={index}>\n//                 {chat.senderName !== userData.username && <div className='avatar'>{chat.senderName}</div>}\n//                 <div className='message-data'>{chat.message}</div>\n//                 {chat.senderName=== userData.username && <div className='avatar self'>{chat.senderName}</div>}\n//                 </li>\n//             ))}\n//           </ul>\n\n//             <div className='send-message'>\n//             <input type='text' className='input-maeeage'\n//             name='message' placeholder={`${tab}에게 메세지 보내기`} value={userData.message}\n//             onChange={handleValue}/>\n//             <button type='button' className='send-button' onClick={sendPrivateMessage}>send</button>\n//           </div>\n//         </div>} */}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default _Test;\n"]},"metadata":{},"sourceType":"module"}