{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport produce from \"immer\";\nimport axios from \"axios\";\nimport { apis } from \"../../shared/api\";\nimport { apiUrl } from \"../../elements/testApiUrl\";\nconst GET_POST = \"GET_POST\";\nconst GET_ONE_POST = \"GET_ONE_POST\";\nconst GET_POSTCHK = \"GET_POSTCHK\";\nconst ADD_POST = \"ADD_POST\";\nconst EDIT_POST = \"EDIT_POST\";\nconst DEL_POST = \"DEL_POST\";\nconst IMG_POST = \"IMG_POST\";\nconst LOADING = \"LOADING\";\nconst getPost = createAction(GET_POST, post => ({\n  post\n}));\nconst getPostNoChk = createAction(GET_POSTCHK, post => ({\n  post\n}));\nconst getOnePost = createAction(GET_ONE_POST, post => ({\n  post\n}));\nconst addPost = createAction(ADD_POST, post => ({\n  post\n}));\nconst editPost = createAction(EDIT_POST, post => ({\n  post\n}));\nconst delPost = createAction(DEL_POST, pid => ({\n  pid\n}));\nconst imgPost = createAction(IMG_POST, preview => ({\n  preview\n}));\nconst loading = createAction(LOADING, is_loading => ({\n  is_loading\n}));\nconst initialState = {\n  list: [],\n  one_list: [],\n  nockeckList: [],\n  preview: \"\",\n  paging: {\n    start: null,\n    next: null,\n    size: 3\n  },\n  is_loading: false\n}; // ===================================================================\n// ======================== 게시글 리스트 가지고오기========================\n\nconst getPostDB = page => {\n  return function (dispatch, getState, _ref) {\n    let {\n      history\n    } = _ref;\n    apis.getpost(page).then(res => {\n      const query = res.data;\n      dispatch(getPost(query));\n    }).catch(err => {\n      console.log(\"error get post\");\n    });\n  };\n};\n\nconst getPostNocheckDB = page => {\n  return function (dispatch, getState, _ref2) {\n    let {\n      history\n    } = _ref2;\n    console.log(page);\n    apis.getpostnocheck(page).then(res => {\n      const query = res.data;\n      dispatch(getPostNoChk(query));\n    }).catch(err => {\n      console.log(\"error get post\");\n    });\n  };\n}; // ====================================================================\n// ======================== 선택한 게시글 가지고오기 ========================\n\n\nconst getOnePostDB = pid => {\n  return function (dispatch, getState, _ref3) {\n    let {\n      history\n    } = _ref3;\n    apis.onepost(pid).then(res => {\n      dispatch(getOnePost(res.data));\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n}; // =====================================================================\n// ================================ 추가 ================================\n\n\nconst addPostDB = props => {\n  return function (dispatch, getState, _ref4) {\n    let {\n      history\n    } = _ref4;\n    const {\n      title,\n      comment,\n      tags,\n      category\n    } = props;\n    const token_res = sessionStorage.getItem(\"token\");\n    const img_list = getState().post.preview;\n    const formData = new FormData();\n    formData.append(\"images\", img_list);\n\n    if (!img_list) {\n      axios({\n        method: \"post\",\n        url: `${apiUrl}/islogin/post/write`,\n        data: {\n          postTitle: title,\n          postComment: comment,\n          postImg: null,\n          tags: tags ? tags : null,\n          category: category\n        },\n        headers: {\n          Authorization: `${token_res}`\n        }\n      }).then(res => {\n        dispatch(addPost({\n          title,\n          comment,\n          imgUrl: null,\n          tags: tags ? tags : null,\n          pid: res.data\n        }));\n        history.replace(\"/\");\n      });\n    } else {\n      axios.post(`${apiUrl}/images/upload`, formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          Authorization: `${token_res}`\n        }\n      }).then(res => {\n        const imgUrl = res.data.url;\n        return imgUrl;\n      }).then(imgUrl => {\n        axios({\n          method: \"post\",\n          url: `${apiUrl}/islogin/post/write`,\n          data: {\n            postTitle: title,\n            postComment: comment,\n            postImg: imgUrl,\n            tags: tags ? tags : null,\n            category: category\n          },\n          headers: {\n            Authorization: `${token_res}`\n          }\n        }).then(res => {\n          dispatch(addPost({\n            title,\n            comment,\n            imgUrl,\n            tags: tags ? tags : null,\n            pid: res.data\n          }));\n          history.replace(\"/\");\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  };\n}; // =====================================================================\n// ================================ 수정 ================================\n\n\nconst editPostDB = props => {\n  return function (dispatch, getState, _ref5) {\n    let {\n      history\n    } = _ref5;\n    const {\n      category,\n      pid,\n      postComment,\n      postImg,\n      postTitle,\n      tag\n    } = props;\n    const token_res = sessionStorage.getItem(\"token\");\n    const img_list = getState().post.preview;\n    const formData = new FormData();\n    formData.append(\"images\", img_list);\n\n    if (!img_list) {\n      axios({\n        method: \"PUT\",\n        url: `${apiUrl}/islogin/post/revice/${pid}`,\n        data: {\n          pid: pid,\n          postTitle: postTitle,\n          postComment: postComment,\n          postImg: postImg,\n          tags: tag,\n          category: category\n        },\n        headers: {\n          Authorization: `${token_res}`\n        }\n      }).then(() => {\n        dispatch(editPost({\n          postTitle,\n          postComment,\n          tag,\n          category,\n          pid\n        }));\n        history.replace(`/detail/${pid}`);\n        window.scrollTo(0, 0);\n      });\n    } else {\n      axios.post(`${apiUrl}/images/upload`, formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          Authorization: `${token_res}`\n        }\n      }).then(res => {\n        const imgUrl = res.data.url;\n        return imgUrl;\n      }).then(imgUrl => {\n        axios({\n          method: \"PUT\",\n          url: `${apiUrl}/islogin/post/revice/${pid}`,\n          data: {\n            pid: pid,\n            postTitle: postTitle,\n            postComment: postComment,\n            postImg: imgUrl,\n            tags: tag,\n            category: category\n          },\n          headers: {\n            Authorization: `${token_res}`\n          }\n        }).then(() => {\n          dispatch(editPost({\n            postTitle,\n            postComment,\n            tag,\n            category,\n            pid\n          }));\n          history.replace(`/detail/${pid}`);\n          window.scrollTo(0, 0);\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  };\n}; // =====================================================================\n// ================================ 삭제 ================================\n\n\nconst delPostDB = pid => {\n  return function (dispatch, getState, _ref6) {\n    let {\n      history\n    } = _ref6;\n    apis.delpost(pid).then(() => {\n      window.location.replace(\"/\");\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n};\n\nconst postLikeDB = (uid, pid) => {\n  return function (dispatch, getState, _ref7) {\n    let {\n      history\n    } = _ref7;\n    apis.likepost(uid, pid).then(res => {\n      const post_list = getState().post.one_list;\n      let like_count = \"\";\n\n      if (res.data.postLike === \"true\") {\n        like_count = post_list.postLikeCount + 1;\n      } else {\n        like_count = post_list.postLikeCount - 1;\n      }\n\n      dispatch(getOnePost({ ...post_list,\n        post_list,\n        postLikeCount: like_count\n      }));\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n}; // =====================================================================\n// ============================== reducer ==============================\n\n\nexport default handleActions({\n  [GET_POST]: (state, action) => produce(state, draft => {\n    draft.list.push(...action.payload.post);\n    draft.list = draft.list.reduce((acc, cur) => {\n      if (acc.findIndex(a => a.pid === cur.pid) === -1) {\n        return [...acc, cur];\n      } else {\n        acc[acc.findIndex(a => a.pid === cur.pid)] = cur;\n        return acc;\n      }\n    }, []);\n  }),\n  [GET_POSTCHK]: (state, action) => produce(state, draft => {\n    draft.nockeckList.push(...action.payload.post);\n    draft.nockeckList = draft.nockeckList.reduce((acc, cur) => {\n      if (acc.findIndex(a => a.pid === cur.pid) === -1) {\n        return [...acc, cur];\n      } else {\n        acc[acc.findIndex(a => a.pid === cur.pid)] = cur;\n        return acc;\n      }\n    }, []);\n  }),\n  [GET_ONE_POST]: (state, action) => produce(state, draft => {\n    draft.one_list = action.payload.post;\n  }),\n  [ADD_POST]: (state, action) => produce(state, draft => {\n    draft.list.push(action.payload.post);\n    draft.preview = \"\";\n  }),\n  [EDIT_POST]: (state, action) => produce(state, draft => {\n    draft.one_list = action.payload.post;\n    draft.preview = \"\";\n  }),\n  [DEL_POST]: (state, action) => produce(state, draft => {\n    draft.list = draft.list;\n  }),\n  [IMG_POST]: (state, action) => produce(state, draft => {\n    draft.preview = action.payload.preview;\n  }),\n  [LOADING]: (state, action) => produce(state, draft => {\n    draft.is_loading = action.payload.is_loading;\n  })\n}, initialState);\nconst actionCreators = {\n  getPostDB,\n  getOnePostDB,\n  addPostDB,\n  editPostDB,\n  delPostDB,\n  imgPost,\n  getPostNocheckDB,\n  postLikeDB\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/cyj/sun/src/redux/modules/post.js"],"names":["createAction","handleActions","produce","axios","apis","apiUrl","GET_POST","GET_ONE_POST","GET_POSTCHK","ADD_POST","EDIT_POST","DEL_POST","IMG_POST","LOADING","getPost","post","getPostNoChk","getOnePost","addPost","editPost","delPost","pid","imgPost","preview","loading","is_loading","initialState","list","one_list","nockeckList","paging","start","next","size","getPostDB","page","dispatch","getState","history","getpost","then","res","query","data","catch","err","console","log","getPostNocheckDB","getpostnocheck","getOnePostDB","onepost","addPostDB","props","title","comment","tags","category","token_res","sessionStorage","getItem","img_list","formData","FormData","append","method","url","postTitle","postComment","postImg","headers","Authorization","imgUrl","replace","editPostDB","tag","window","scrollTo","delPostDB","delpost","location","postLikeDB","uid","likepost","post_list","like_count","postLike","postLikeCount","state","action","draft","push","payload","reduce","acc","cur","findIndex","a","actionCreators"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport produce from \"immer\";\nimport axios from \"axios\";\nimport { apis } from \"../../shared/api\";\nimport { apiUrl } from \"../../elements/testApiUrl\";\n\nconst GET_POST = \"GET_POST\";\nconst GET_ONE_POST = \"GET_ONE_POST\";\nconst GET_POSTCHK = \"GET_POSTCHK\";\nconst ADD_POST = \"ADD_POST\";\nconst EDIT_POST = \"EDIT_POST\";\nconst DEL_POST = \"DEL_POST\";\nconst IMG_POST = \"IMG_POST\";\nconst LOADING = \"LOADING\";\n\nconst getPost = createAction(GET_POST, (post) => ({ post }));\nconst getPostNoChk = createAction(GET_POSTCHK, (post) => ({ post }));\nconst getOnePost = createAction(GET_ONE_POST, (post) => ({ post }));\nconst addPost = createAction(ADD_POST, (post) => ({ post }));\nconst editPost = createAction(EDIT_POST, (post) => ({ post }));\nconst delPost = createAction(DEL_POST, (pid) => ({ pid }));\nconst imgPost = createAction(IMG_POST, (preview) => ({ preview }));\nconst loading = createAction(LOADING, (is_loading) => ({ is_loading }));\n\nconst initialState = {\n  list: [],\n  one_list: [],\n  nockeckList: [],\n  preview: \"\",\n  paging: { start: null, next: null, size: 3 },\n  is_loading: false,\n};\n\n// ===================================================================\n// ======================== 게시글 리스트 가지고오기========================\n\nconst getPostDB = (page) => {\n  return function (dispatch, getState, { history }) {\n    apis\n      .getpost(page)\n      .then((res) => {\n        const query = res.data;\n        dispatch(getPost(query));\n      })\n      .catch((err) => {\n        console.log(\"error get post\");\n      });\n  };\n};\n\nconst getPostNocheckDB = (page) => {\n  return function (dispatch, getState, { history }) {\n    console.log(page);\n    apis\n      .getpostnocheck(page)\n      .then((res) => {\n        const query = res.data;\n        dispatch(getPostNoChk(query));\n      })\n      .catch((err) => {\n        console.log(\"error get post\");\n      });\n  };\n};\n\n// ====================================================================\n// ======================== 선택한 게시글 가지고오기 ========================\nconst getOnePostDB = (pid) => {\n  return function (dispatch, getState, { history }) {\n    apis\n      .onepost(pid)\n      .then((res) => {\n        dispatch(getOnePost(res.data));\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n\n// =====================================================================\n// ================================ 추가 ================================\nconst addPostDB = (props) => {\n  return function (dispatch, getState, { history }) {\n    const { title, comment, tags, category } = props;\n    const token_res = sessionStorage.getItem(\"token\");\n    const img_list = getState().post.preview;\n    const formData = new FormData();\n    formData.append(\"images\", img_list);\n\n    if (!img_list) {\n      axios({\n        method: \"post\",\n        url: `${apiUrl}/islogin/post/write`,\n        data: {\n          postTitle: title,\n          postComment: comment,\n          postImg: null,\n          tags: tags ? tags : null,\n          category: category,\n        },\n        headers: { Authorization: `${token_res}` },\n      }).then((res) => {\n        dispatch(\n          addPost({\n            title,\n            comment,\n            imgUrl: null,\n            tags: tags ? tags : null,\n            pid: res.data,\n          })\n        );\n        history.replace(\"/\");\n      });\n    } else {\n      axios\n        .post(`${apiUrl}/images/upload`, formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\",\n            Authorization: `${token_res}`,\n          },\n        })\n        .then((res) => {\n          const imgUrl = res.data.url;\n          return imgUrl;\n        })\n        .then((imgUrl) => {\n          axios({\n            method: \"post\",\n            url: `${apiUrl}/islogin/post/write`,\n            data: {\n              postTitle: title,\n              postComment: comment,\n              postImg: imgUrl,\n              tags: tags ? tags : null,\n\n              category: category,\n            },\n            headers: { Authorization: `${token_res}` },\n          }).then((res) => {\n            dispatch(\n              addPost({\n                title,\n                comment,\n                imgUrl,\n                tags: tags ? tags : null,\n                pid: res.data,\n              })\n            );\n            history.replace(\"/\");\n          });\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n};\n\n// =====================================================================\n// ================================ 수정 ================================\nconst editPostDB = (props) => {\n  return function (dispatch, getState, { history }) {\n    const { category, pid, postComment, postImg, postTitle, tag } = props;\n    const token_res = sessionStorage.getItem(\"token\");\n    const img_list = getState().post.preview;\n    const formData = new FormData();\n    formData.append(\"images\", img_list);\n\n    if (!img_list) {\n      axios({\n        method: \"PUT\",\n        url: `${apiUrl}/islogin/post/revice/${pid}`,\n        data: {\n          pid: pid,\n          postTitle: postTitle,\n          postComment: postComment,\n          postImg: postImg,\n          tags: tag,\n          category: category,\n        },\n        headers: { Authorization: `${token_res}` },\n      }).then(() => {\n        dispatch(editPost({ postTitle, postComment, tag, category, pid }));\n        history.replace(`/detail/${pid}`);\n        window.scrollTo(0, 0);\n      });\n    } else {\n      axios\n        .post(`${apiUrl}/images/upload`, formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\",\n            Authorization: `${token_res}`,\n          },\n        })\n        .then((res) => {\n          const imgUrl = res.data.url;\n          return imgUrl;\n        })\n        .then((imgUrl) => {\n          axios({\n            method: \"PUT\",\n            url: `${apiUrl}/islogin/post/revice/${pid}`,\n            data: {\n              pid: pid,\n              postTitle: postTitle,\n              postComment: postComment,\n              postImg: imgUrl,\n              tags: tag,\n              category: category,\n            },\n            headers: { Authorization: `${token_res}` },\n          }).then(() => {\n            dispatch(editPost({ postTitle, postComment, tag, category, pid }));\n            history.replace(`/detail/${pid}`);\n            window.scrollTo(0, 0);\n          });\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  };\n};\n\n// =====================================================================\n// ================================ 삭제 ================================\nconst delPostDB = (pid) => {\n  return function (dispatch, getState, { history }) {\n    apis\n      .delpost(pid)\n      .then(() => {\n        window.location.replace(\"/\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n\nconst postLikeDB = (uid, pid) => {\n  return function (dispatch, getState, { history }) {\n    apis\n      .likepost(uid, pid)\n      .then((res) => {\n        const post_list = getState().post.one_list;\n        let like_count = \"\";\n        if (res.data.postLike === \"true\") {\n          like_count = post_list.postLikeCount + 1;\n        } else {\n          like_count = post_list.postLikeCount - 1;\n        }\n\n        dispatch(\n          getOnePost({ ...post_list, post_list, postLikeCount: like_count })\n        );\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n// =====================================================================\n// ============================== reducer ==============================\nexport default handleActions(\n  {\n    [GET_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list.push(...action.payload.post);\n        draft.list = draft.list.reduce((acc, cur) => {\n          if (acc.findIndex((a) => a.pid === cur.pid) === -1) {\n            return [...acc, cur];\n          } else {\n            acc[acc.findIndex((a) => a.pid === cur.pid)] = cur;\n            return acc;\n          }\n        }, []);\n      }),\n    [GET_POSTCHK]: (state, action) =>\n      produce(state, (draft) => {\n        draft.nockeckList.push(...action.payload.post);\n        draft.nockeckList = draft.nockeckList.reduce((acc, cur) => {\n          if (acc.findIndex((a) => a.pid === cur.pid) === -1) {\n            return [...acc, cur];\n          } else {\n            acc[acc.findIndex((a) => a.pid === cur.pid)] = cur;\n            return acc;\n          }\n        }, []);\n      }),\n    [GET_ONE_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.one_list = action.payload.post;\n      }),\n    [ADD_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list.push(action.payload.post);\n        draft.preview = \"\";\n      }),\n    [EDIT_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.one_list = action.payload.post;\n        draft.preview = \"\";\n      }),\n    [DEL_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list = draft.list;\n      }),\n    [IMG_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.preview = action.payload.preview;\n      }),\n    [LOADING]: (state, action) =>\n      produce(state, (draft) => {\n        draft.is_loading = action.payload.is_loading;\n      }),\n  },\n  initialState\n);\n\nconst actionCreators = {\n  getPostDB,\n  getOnePostDB,\n  addPostDB,\n  editPostDB,\n  delPostDB,\n  imgPost,\n  getPostNocheckDB,\n  postLikeDB,\n};\n\nexport { actionCreators };\n"]},"metadata":{},"sourceType":"module"}