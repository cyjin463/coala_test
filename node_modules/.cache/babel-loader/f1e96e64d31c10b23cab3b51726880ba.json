{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport produce from \"immer\";\nimport { apis } from \"../../shared/api\";\nconst MY_ALAMS = \"MY_ALAMS\";\nconst MY_ALAMS_DEL = \"MY_ALAMS_DEL\";\nconst MY_LIKE_POST = \"MY_LIKE_POST\";\nconst myAlarms = createAction(MY_ALAMS, list => ({\n  list\n}));\nconst myAlarmsDel = createAction(MY_ALAMS_DEL, list => ({\n  list\n}));\nconst myMyLikePost = createAction(MY_LIKE_POST, list => ({\n  list\n}));\nconst initialState = {\n  list: []\n};\n\nconst myAlarmsDB = () => {\n  return function (dispatch, getState, _ref) {\n    let {\n      history\n    } = _ref;\n    apis.myalarm().then(res => {\n      dispatch(myAlarms(res.data));\n    });\n  };\n};\n\nconst myAlarmsDelDB = alarmId => {\n  return function (dispatch, getState, _ref2) {\n    let {\n      history\n    } = _ref2;\n    apis.myalarmdel(alarmId).then(() => {\n      const _aram_list = getState().mypage.list;\n\n      const aram_list = _aram_list.filter(v => v.alarmId !== alarmId);\n\n      dispatch(myAlarmsDel(aram_list));\n    });\n  };\n};\n\nconst myLikePostDB = page => {\n  return function (dispatch, getState, _ref3) {\n    let {\n      history\n    } = _ref3;\n    console.log(page);\n    apis.mylikepost(page).then(res => {\n      dispatch(myAlarms(res.data));\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n};\n\nexport default handleActions({\n  [MY_ALAMS]: (state, action) => produce(state, draft => {\n    draft.list = action.payload.list;\n  }),\n  [MY_ALAMS_DEL]: (state, action) => produce(state, draft => {\n    draft.list = action.payload.list;\n  }),\n  [MY_LIKE_POST]: (state, action) => produce(state, draft => {\n    draft.list = action.payload.list;\n  })\n}, initialState);\nconst actionCreators = {\n  myAlarmsDB,\n  myAlarmsDelDB,\n  myLikePostDB\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/cyj/sun/src/redux/modules/mypage.js"],"names":["createAction","handleActions","produce","apis","MY_ALAMS","MY_ALAMS_DEL","MY_LIKE_POST","myAlarms","list","myAlarmsDel","myMyLikePost","initialState","myAlarmsDB","dispatch","getState","history","myalarm","then","res","data","myAlarmsDelDB","alarmId","myalarmdel","_aram_list","mypage","aram_list","filter","v","myLikePostDB","page","console","log","mylikepost","catch","err","state","action","draft","payload","actionCreators"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport produce from \"immer\";\nimport { apis } from \"../../shared/api\";\n\nconst MY_ALAMS = \"MY_ALAMS\";\nconst MY_ALAMS_DEL = \"MY_ALAMS_DEL\";\nconst MY_LIKE_POST = \"MY_LIKE_POST\";\n\nconst myAlarms = createAction(MY_ALAMS, (list) => ({ list }));\nconst myAlarmsDel = createAction(MY_ALAMS_DEL, (list) => ({ list }));\nconst myMyLikePost = createAction(MY_LIKE_POST, (list) => ({ list }));\n\nconst initialState = {\n  list: [],\n};\n\nconst myAlarmsDB = () => {\n  return function (dispatch, getState, { history }) {\n    apis.myalarm().then((res) => {\n      dispatch(myAlarms(res.data));\n    });\n  };\n};\n\nconst myAlarmsDelDB = (alarmId) => {\n  return function (dispatch, getState, { history }) {\n    apis.myalarmdel(alarmId).then(() => {\n      const _aram_list = getState().mypage.list;\n      const aram_list = _aram_list.filter((v) => v.alarmId !== alarmId);\n      dispatch(myAlarmsDel(aram_list));\n    });\n  };\n};\n\nconst myLikePostDB = (page) => {\n  return function (dispatch, getState, { history }) {\n    console.log(page);\n    apis\n      .mylikepost(page)\n      .then((res) => {\n        dispatch(myAlarms(res.data));\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n\nexport default handleActions(\n  {\n    [MY_ALAMS]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list = action.payload.list;\n      }),\n    [MY_ALAMS_DEL]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list = action.payload.list;\n      }),\n    [MY_LIKE_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list = action.payload.list;\n      }),\n  },\n  initialState\n);\n\nconst actionCreators = {\n  myAlarmsDB,\n  myAlarmsDelDB,\n  myLikePostDB,\n};\n\nexport { actionCreators };\n"]},"metadata":{},"sourceType":"module"}